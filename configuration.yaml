#-----------------------------------------------------------------------------#
#* NOTES                                                                      #
 
  #---------------------------------------------#
  #= legend - comment highlighting

    #--   divider
    #=    header

    #     comment
    #*    highlight
    #!    important/critical

    #.    disabled
    #>   to be removed
    

    #[todo] to do
    #[dev]  in development
    #[test] testing
    #[x]  completed
    #[bug] problem

    #|    note
    #||   manual

  #---------------------------------------------#
  #= project workflow
    # [ ] mechanics PoC
    # [ ] motorization/electronics PoC
    # [ ] software basic functionality
    # [ ] case/3d-print prototype
    # [ ] test period/software development
    # [ ] additional feature development
    # [ ] automation
    # [ ] mechanics/motor finalization
    # [ ] miniaturization
    # [ ] continuous reliability-/automation improvement
  #---------------------------------------------#
  #= TASKS

    #[bug]    plants last watered time not reliable
    #[bug]    check boiler relay not turning off
    #[bug]    motion floor automation
    #[bug]    lux michbaeck 2 is floating
    #[bug]    check this log on startup: 
              # Error rendering data template: 
              # UndefinedError: 'dict object' has no attribute 'entity_id'

    #[x]   sleep script: set brightness = 100-cover
    #[x]   combine flur motions to virtual single sensor
    #[x]   combine bad motions to virtual single sensor
    #[todo]   VLAN200 ACL
    #[todo]   ESPeasy p2p
    #[todo]   customize espeasy candle plugin
    #[todo]   alexa/ticker queue scripts
    #[todo]   work-time tracking
    #[todo]   influxDB for history
    #[todo]   logging
              # when
              # by what
              # action

    #[dev]    add notifications (eg climate off because window open; water empty)
    #[dev]    alexa event queue ('while you've been away, I did...')
    #[dev]    custom-card with 
              #[x] folding
              #[x] templates
              #[x] attributes, 2nd infos
              #[dev] conditions (entity, last-changed, etc.)
              #[test] icon-color
              #[todo] compute only when shown

    #[test]   make value-only-card/row
    #[test]   track home internet, seems unstable
    #[test]   replace alexa shell_scripts with custom component
              #! tts ok, media not working
    #[test]   check auto color michbaeck
    #[test]   get sleep cycle right
              #! bed_load cabling issues
              #! esp died
    #[x]   massive recorder issues (use mySQL?)
              # switched to mysql → huge improvement
    #[test]   make automations not turning off climates but 'standby' (to differ user-off and system-off)

    #[x]      adjust/autodimmer flux for winter
    #[x]      identify roommate's devices to check presence
    #[x]      add option to autodimmer to not change color
 
    #---------------------------------------------#
    #= Hardware

      #[dev]  plant
              #[] watertight tank
              #[] add USB
              #[] add light
              #[] add beacon
      #[dev]  door motor
              #[test] dc motor
              #[todo] stepper
              #[todo] espeasy plugin
      #[dev]  boiler relais
#-----------------------------------------------------------------------------#
 

#-----------------------------------------------------------------------------#
#* CORE CONFIG                                                                #

    homeassistant:
      name: Home
      latitude: !secret homelat
      longitude: !secret homelong
      #.radius: 50
      elevation: 47
      unit_system: metric
      time_zone: CET
      whitelist_external_dirs:
        - /home/homeassistant/.homeassistant
        - /home/michbaeck/Media
        - /var/log
      #.customize_domain:

      customize: !include customize.yaml

    logger:
      default: error   # loglvls - critical,fatal,error,warning,warn,info,debug,notset
      logs:
        homeassistant.components.media_player: fatal
        homeassistant.components.media_player.alexa: fatal
        # homeassistant.components.notify.ios: debug
        # homeassistant.components.ios: debug
        # homeassistant.components.mqtt: warn
        homeassistant.components.discovery: warn

    frontend: !include themes.yaml

    #! enable with 0.84
    lovelace:
      mode: yaml

    config:

    http:
      api_password: !secret http_password
      server_port: !secret server_port
      ssl_certificate: !secret ssl_certificate
      ssl_key: !secret ssl_key
      ip_ban_enabled: false
      login_attempts_threshold: 10
      base_url: !secret http_base_url

    mqtt:
      broker: !secret mqtt_broker
      port: !secret mqtt_port
      username: !secret mqtt_user
      password: !secret mqtt_password
      client_id: homeassistant
      discovery: true
      #.certificate: auto
      #.discovery_prefix: 'homeassistant/discovery'
      #.protocol: 3.1.1
      #.tls_version: '1.2'
      birth_message:
        topic: 'homeassistant/state'
        payload: 'online'
        qos: 0
        retain: true
      will_message:
        topic: 'homeassistant/state'
        payload: 'offline'
        qos: 0
        retain: true

    updater:
      include_used_components: true

    discovery:

    recorder:
      db_url: !secret mysql
      exclude:
        entities:
          - sensor.time

    #.recorder:
      # purge_keep_days: 1
      # purge_interval: 1
      # include:
      #   domains:
      #     - climate
      #     - automation
      #     - input_boolean
      #     - input_number
      #     - input_select
      #     #.- input_text
      #     - input_datetime
      #   entities:
      #     - sensor.sun_elevation_stats_mean   # for flux
      #     - binary_sensor.sleep_cycle_trend   # for to calculate ratio
      #     - sensor.sleep_cycle_ratio    # for diagram
      # exclude:
      #   entities:
      #     - input_boolean.michbaeck_arrival
      #     - input_number.bed_load_step
      #     - input_number.sleep_cycle
      #     - input_number.sleep_cycle_lowpass
      #     - input_number.sleep_cycle_ratio_lowpass
      #     - input_number.drucker_timer
      #     - input_number.alexa_volume
      #     - input_number.ticker_fx
      #     - input_number.cleanup_keep_days

    history:
      include:
        # domains:
          # - climate
          # - variable
        entities:
          - binary_sensor.door_michbaeck
          - binary_sensor.window_bad
          - binary_sensor.window_kueche
          - binary_sensor.window_michbaeck_1
          - binary_sensor.window_michbaeck_2
          - binary_sensor.climate_michbaeck_helper
          - binary_sensor.climate_kueche_helper
          - binary_sensor.climate_bad_helper
          - proximity.home
          - sensor.bed_load
          - sensor.bed_load_step
          - sensor.daily_routine
          - sensor.dir_of_travel
          - sensor.flux
          - sensor.michbaeck
          - sensor.plant_michbaeck_1
          - sensor.plant_michbaeck_2
          - variable.sleep_cycle
          - sensor.sleep_cycle
          - sensor.sleep_cycle_ratio
          - sensor.sleep_cycle_lowpass
          - sensor.sleep_cycle_ratio_lowpass
          - sensor.sun_elevation
          - sensor.temp_aussen
          - sensor.temp_bad
          - sensor.temp_flur
          - sensor.temp_kueche
          - sensor.temp_michbaeck
          - sensor.weather

    # map:

    logbook:
      include: 
        domains:
          - climate
          - binary_sensor
          - switch
          - fan
          - device_tracker
          - input_select
        # entities:
        #   - automation.sleep_cycle_calculations
        #   - input_text.ticker
      exclude:
        entities: 
          - binary_sensor.motion_michbaeck_1
          - binary_sensor.motion_bad
          - binary_sensor.motion_bad_1
          - binary_sensor.motion_bad_2
          - binary_sensor.motion_bad_helper
          - binary_sensor.motion_flur
          - binary_sensor.motion_flur_1
          - binary_sensor.motion_flur_2
          - binary_sensor.motion_flur_3
          - binary_sensor.motion_flur_helper
          - binary_sensor.motion_kueche
          - binary_sensor.motion_kueche_helper
          - binary_sensor.sleep_cycle_trend
          - binary_sensor.johannes_handy

    #.tts:
      #.- platform: google

    shopping_list:

    cloud:
      alexa:
        filter:
          include_entities:
            - binary_sensor.door_michbaeck
            - binary_sensor.window_bad
            - binary_sensor.window_kueche
            - binary_sensor.window_michbaeck_1
            - binary_sensor.window_michbaeck_2
            - binary_sensor.motion_michbaeck_1
            - binary_sensor.motion_michbaeck_2
            - binary_sensor.motion_bad
            - binary_sensor.motion_flur
            - binary_sensor.motion_kueche
            - binary_sensor.vpn   #[test]
            - cover.window_michbaeck_1    #[dev]
            - cover.window_michbaeck_2    #[todo]
            - cover.window_michbaeck_1_blind    #[test]  
            - cover.window_michbaeck_2_blind    #[test]
            - cover.door_michbaeck    #[test]
            - climate.bad
            - climate.kueche
            - climate.michbaeck
            - fan.michbaeck   #[test]
            - light.bad
            - light.esstisch
            - light.flur
            - light.grosses_licht
            - light.ikea
            - light.michbaeck_auto
            - light.regal
            - light.schreibtisch
            - light.stehlampe
            - light.wohnzimmer_licht
            - sensor.plant_michbaeck_1    #[test]
            - sensor.plant_michbaeck_2    #[test]
            - sensor.temp_aussen
            - sensor.temp_bad
            - sensor.temp_flur
            - sensor.temp_kueche
            - sensor.temp_michbaeck
            - switch.computer
            - switch.drucker
            - switch.loetkolben
            - switch.rcswitch3
            - script.wakeup
            - script.bedtime_actions
        entity_config:
          script.wakeup:
            name: Aufstehen
            display_categories: SCENE_TRIGGER
          script.bedtime_actions:
            name: Schlafen
            display_categories: SCENE_TRIGGER
          switch.rcswitch3:
            name: Schalter 3
          cover.door_michbaeck:
            name: Tür
          cover.window_michbaeck_1:
            name: Fenster 1
          cover.window_michbaeck_2:
            name: Fenster 2
          cover.window_michbaeck_1_blind:
            name: Rollo 1
          cover.window_michbaeck_2_blind:
            name: Rollo 2

    xiaomi_aqara:
      discovery_retry: 10
      gateways:
        - key: !secret xiaomi_key
          host: 192.168.200.12
          mac: 7811dce136b6

    hue:
      bridges: 
        - host: 192.168.200.11
          allow_unreachable: true   # seems to be required to use osram socket witch bridge
          allow_hue_groups: false

    sensor hue_sensors:
      platform: hue
      ip_address: 192.168.200.11
      token: !secret hue_token

    binary_sensor hue_binary_sensors:
      platform: hue

    device_tracker hue_trackers:
      platform: hue

    #! tuya:   # lose switches when using 'official' plugin
      #! platform: smart_life
      #! username: !secret tuya_user
      #! password: !secret tuya_password
      #! country_code: 49

    scene:
      # - name: flur_kueche_warm
        # entities:
        #   light.flur_kueche:
        #     hs_color: [35.426,73.725]
        #     brightness: 254
      # - name: flur_kueche_bright
        # entities:
        #   light.flur_kueche:
        #     hs_color: [38.667,52.941]
        #     brightness: 254
      # - name: flur_kueche_cozy
        # entities:
        #   light.flur_links:
        #     hs_color: [22.468,92.157]
        #     brightness: 254
        #   light.flur_rechts:
        #     hs_color: [33.273,86.275]
        #     brightness: 183
        #   light.esstisch:
        #     hs_color: [31.765,86.667]
        #     brightness: 232
      - name: michbaeck_office
        entities:
          light.michbaeck_auto:
            state: off
          light.computer:
            state: on
          light.stehlampe:
            state: on
            brightness: 255
          light.regal:
            state: on
            brightness: 255
          light.schreibtisch:
            state: on
            brightness: 175
            kelvin: 2200
          light.ikea:
            state: on
            brightness: 100
          light.bett:
            state: off
      - name: michbaeck_nightlight
        entities:
          light.michbaeck_hue:
            state: on
            brightness: 50
            rgb_color: [255,50,0]
            transition: 1
      - name: michbaeck_evening
        entities:
          light.regal:
            state: on
            brightness: 253
            rgb_color: [255,183,75]
            transition: 10
          light.stehlampe:
            state: on
            brightness: 253
            rgb_color: [255,183,75]
            transition: 10
          light.schreibtisch:
            state: on
            brightness: 253
            rgb_color: [255,183,75]
            transition: 10
          light.grosses_licht_1:
            state: on
            brightness: 253
            rgb_color: [153,82,255]
            transition: 10
          light.grosses_licht_2:
            state: on
            brightness: 253
            rgb_color: [255,183,75]
            transition: 10
          light.grosses_licht_3:
            state: on
            brightness: 253
            rgb_color: [255,57,19]
            transition: 10
          light.bett:
            state: on
            brightness: 253
            rgb_color: [255,139,0]
            transition: 10
          input_boolean.light_michbaeck_color:
            state: off
#-----------------------------------------------------------------------------#
#* SYSTEM + STATUS                                                            #

    custom_updater:
      track:
        - cards
        - components
        # - python_scripts
      show_installable: true
      card_urls:
        - https://raw.githubusercontent.com/kalkih/mini-media-player/master/tracker.json
        - https://raw.githubusercontent.com/kalkih/mini-graph-card/master/tracker.json
      component_urls:
        - https://raw.githubusercontent.com/robmarkcole/Hue-sensors-HASS/master/custom_updater.json
      # python_script_urls:
      #   -

    sensor ha_version:
      platform: version
    
    sensor db_size:
    - platform: sql
      db_url: !secret mysql
      queries:
        - name: DB size
          query: 'SELECT table_schema "database", Round(Sum(data_length + index_length) /1024/1024, 1) "value" FROM information_schema.tables WHERE table_schema="hass_db" GROUP BY table_schema;'
          column: 'value'
          unit_of_measurement: MB

    sensor config_version:
      platform: template
      sensors:
        config_version:
          friendly_name: Konfiguration
          value_template: 'v0.20'

    binary_sensor vpn:
      platform: ping  
      host: 192.168.200.1
      name: vpn
      scan_interval: 30
      count: 5
      device_class: connectivity

    sensor server_ip:
      platform: dnsip
      hostname: !secret vpsurl
      resolver: 8.8.8.8

    #! change to "last_boot" with 0.84
    sensor systemmonitor:   # HDD | uptime
      platform: systemmonitor   
      resources:
        - type: disk_use_percent
          arg: /
        - type: last_boot

    sensor cert_check:  
      platform: cert_expiry
      name: cert_nextcloud
      host: !secret nextcloud_url_short
      scan_interval: 86400

    sensor battery_templates:   # using 999 as default to differ 'empty' from 'na'
      platform: template
      sensors:
        battery_motion_flur:
          friendly_name: 'Motion Flur Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("sensor.motion_flur", "battery")|default(999)|int }}
          unit_of_measurement: "%"

        battery_hue_dimmer1:
          friendly_name: 'Remote 1 Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("sensor.dimmer_1", "battery")|default(999)|int }}
          unit_of_measurement: "%"

        battery_hue_dimmer2:
          friendly_name: 'Remote 2 Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("sensor.dimmer_2", "battery")|default(999)|int }}
          unit_of_measurement: "%"

        battery_motion_kueche:
          friendly_name: 'Motion Küche Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("binary_sensor.motion_kueche", "battery_level")|default(999)|int }}
          unit_of_measurement: "%"

        battery_door_michbaeck:
          friendly_name: 'Tür michbaeck Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("binary_sensor.door_michbaeck", "battery_level")|default(999)|int }}
          unit_of_measurement: "%"

        battery_temp_kueche:
          friendly_name: 'Temp Küche Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("sensor.temp_kueche", "battery_level")|default(999)|int }}
          unit_of_measurement: "%"

        battery_cube:
          friendly_name: 'Cube Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("binary_sensor.xiaomi_cube", "battery_level")|default(999)|int }}
          unit_of_measurement: "%"

        battery_water_1:
          friendly_name: 'Wasser Sensor 1 Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("binary_sensor.water_1", "battery_level")|default(999)|int }}
          unit_of_measurement: "%"

        battery_water_2:
          friendly_name: 'Wasser Sensor 2 Batterie'
          device_class: battery
          value_template: >-
            {{ state_attr("binary_sensor.water_2", "battery_level")|default(999)|int }}
          unit_of_measurement: "%"

  #= disconnect history
    sensor vpn_disconnects:
      platform: history_stats
      name: vpn_disconnects
      entity_id: binary_sensor.vpn
      state: 'off'
      type: count
      # count from 00:00 to now
      start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
      end: '{{ now() }}'

    sensor esp01_disconnects:
      platform: history_stats
      name: esp01_disconnects
      entity_id: sensor.esp01
      state: 'unavailable'
      type: count
      # count from 00:00 to now
      start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
      end: '{{ now() }}'

    sensor esp02_disconnects:
      platform: history_stats
      name: esp02_disconnects
      entity_id: sensor.esp02
      state: 'unavailable'
      type: count
      # count from 00:00 to now
      start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
      end: '{{ now() }}'

    sensor esp04_disconnects:
      platform: history_stats
      name: esp04_disconnects
      entity_id: sensor.esp04
      state: 'unavailable'
      type: count
      # count from 00:00 to now
      start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
      end: '{{ now() }}'

    sensor esp05_disconnects:
      platform: history_stats
      name: esp05_disconnects
      entity_id: sensor.esp05
      state: 'unavailable'
      type: count
      # count from 00:00 to now
      start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
      end: '{{ now() }}'

    sensor esp07_disconnects:
      platform: history_stats
      name: esp07_disconnects
      entity_id: sensor.esp07
      state: 'unavailable'
      type: count
      # count from 00:00 to now
      start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
      end: '{{ now() }}'

    sensor esp10_disconnects:
      platform: history_stats
      name: esp10_disconnects
      entity_id: sensor.esp10
      state: 'unavailable'
      type: count
      # count from 00:00 to now
      start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
      end: '{{ now() }}'

    sensor esp11_disconnects:
      platform: history_stats
      name: esp11_disconnects
      entity_id: sensor.esp11
      state: 'unavailable'
      type: count
      # count from 00:00 to now
      start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
      end: '{{ now() }}'
#-----------------------------------------------------------------------------#
#* NOTIFY                                                                     #

    ios:
      push:
        categories:
          - name: testpush
            identifier: testpush
            actions:
              - identifier: TESTPUSH1
                title: test title
                activationMode: background
                authenticationRequired: no
                destructive: yes
                behavior: default

          - name: door_alarm
            identifier: 'door_alarm'
            actions:
              - identifier: 'DOOR_ALARM_OFF'
                title: 'Alarm ausschalten'
                activationMode: 'background'
                authenticationRequired: no
                destructive: yes
                behavior: 'default'

          - name: switch_off_reminder
            identifier: 'switch_off_reminder'
            actions:
              - identifier: 'SWITCH_OFF'
                title: 'Switch off all devices'
                activationMode: 'background'
                authenticationRequired: no
                destructive: yes
                behavior: 'default'

          - name: computer_off_reminder
            identifier: 'computer_off_reminder'
            actions:
              - identifier: 'PC_OFF'
                title: 'Switch off computer'
                activationMode: 'background'
                authenticationRequired: no
                destructive: yes
                behavior: 'default'

          - name: bedtime_cmd
            identifier: 'bedtime_cmd'
            actions:
              - identifier: 'BEDTIME'
                title: 'Geräte im Schlafzimmer ausschalten'
                activationMode: 'background'
                authenticationRequired: no
                destructive: yes
                behavior: 'default'

          - name: wecker_snooze
            identifier: 'wecker_snooze'
            actions:
              - identifier: 'WECKER_SNOOZE'
                title: '10 Minuten schlummern'
                activationMode: 'background'
                authenticationRequired: no
                destructive: yes
                behavior: 'default'
              - identifier: 'WECKER_STOP'
                title: 'Wecker ausschalten'
                activationMode: 'background'
                authenticationRequired: no
                destructive: no
                behavior: 'textInput'
                textInputButtonTitle: 'Code eingeben'
                textInputPlaceholder: 'Weekday'

    notify iospush:
      name: iospush
      platform: group
      services:
        - service: ios_brain
        - service: ios_pinky

    notify curl_debug:
      name: curl_debug
      platform: file
      filename: curl_debug.log

    notify homeassistant_debug:
      name: homeassistant_debug
      platform: file
      filename: www/debug/homeassistant_debug.txt

    folder_watcher:
      - folder: /home/michbaeck/Media
        patterns:
          - '*.mkv'
          - '*.mp4'
          - '*.avi'
      - folder: /home/homeassistant/.homeassistant/www/datasheets
        patterns:
          - '*.pdf'
          - '*.jpg'
          - '*.png'

    sensor ticker:
      platform: template
      sensors:
        ticker:
          friendly_name: Ticker
          value_template: >-
            {{ states("input_text.ticker")|default("") }}
#-----------------------------------------------------------------------------#
#* WEATHER + TIME                                                             #

    sensor datetime:
      platform: time_date
      display_options:
        - 'date'
        - 'time'

    sensor season:
      platform: season
      type: astronomical

    #! weather yahoo:   # retired
      #! platform: yweather
      #! name: yahoo

    weather darksky:
      platform: darksky
      api_key: !secret darksky_api
      mode: daily

    sensor dwd:
      platform: dwd_weather_warnings
      name: DWD
      region_name: !secret dwd_region

    #| sensor.wetter_symbol
    #|   |_ sensor.weather

    sensor weather_yr:
      platform: yr
      name: wetter
      monitored_conditions:
        - symbol
        - temperature

    sensor weather_string:
      platform: template    
      sensors:
        weather:
          friendly_name: Wetter
          value_template: >-
            {%- set x = states("sensor.wetter_symbol")|default(0)|int -%}
            {% if x == 1 %}
              {% if states("sensor.light_aussen")|int == 0 %}
                klare Nacht
              {% else %}
                sonnig
              {% endif %}
            {% elif x == 2 %}
              {% if states("sensor.light_aussen")|default(0)|int == 0 %}
                überwiegend klar
              {% else %}
                überwiegend sonnig
              {% endif %}
            {% elif x == 3 %}
              teilweise bewölkt
            {% elif x == 4 %}
              bewölkt
            {% elif x == 5 %}
              wechselhaft mit leichtem Regen
            {% elif x == 6 %}
              wechselhaft mit Gewitter
            {% elif x == 7 %}
              wechselhaft mit Schneeregen
            {% elif x == 8 %}
              wechselhaft mit Schnee
            {% elif x == 9 %}
              leichter Regen
            {% elif x == 10 %}
              Regen
            {% elif x == 11 %}
              Gewitter
            {% elif x == 12 %}
              Schneeregen
            {% elif x == 13 %}
              Schnee
            {% elif x == 14 %}
              Schnee und Gewitter
            {% elif x == 15 %}
              bewölkt
            {% elif x == 20 %}
              wechselhaft mit Gewitter und Schneeregen
            {% elif x == 21 %}
              wechselhaft mit Gewitter und Schnee
            {% elif x == 22 %}
              Gewitter mit Regen
            {% elif x == 23 %}
              Gewitter mit Schneeregen
            {% elif x == 24 %}
              wechselhaft mit Gewitter und leichtem Regen
            {% elif x == 25 %}
              wechselhaft mit Gewitter und starkem Regen
            {% elif x == 26 %}
              wechselhaft mit Gewitter und leichtem Schneefall
            {% elif x == 27 %}
              wechselhaft mit Gewitter und Schneeregen
            {% elif x == 28 %}
              wechselhaft mit Gewitter und leichtem Schneefall
            {% elif x == 29 %}
              wechselhaft mit Gewitter und starkem Schneefall
            {% elif x == 30 %}
              Gewitter mit leichtem Regen
            {% elif x == 31 %}
              Gewitter mit leichtem Schneefall
            {% elif x == 32 %}
              Gewitter mit Schneeregen
            {% elif x == 33 %}
              Gewitter mit leichtem Schneefall
            {% elif x == 34 %}
              Gewitter mit starkem Schneefall
            {% elif x == 40 %}
              wechselhaft mit leichtem Regen
            {% elif x == 41 %}
              wechselhaft mit starkem Regen
            {% elif x == 42 %}
              wechselhaft mit Schnee
            {% elif x == 43 %}
              wechselhaft mit Schneeregen
            {% elif x == 44 %}
              wechselhaft mit Schnee
            {% elif x == 45 %}
              wechselhaft mit starkem Schneefall
            {% elif x == 46 %}
              leichter Regen
            {% elif x == 47 %}
              leichter Schneefall
            {% elif x == 48 %}
              Schneefall
            {% elif x == 49 %}
              leichter Schneefall
            {% elif x == 50 %}
              starker Schneefall
            {% else %}
              {{ x }}
            {% endif %}
#-----------------------------------------------------------------------------#
#* MEDIA                                                                      #

    sensor trakt_upcoming:
      platform: trakt
      name: trakt
      id: !secret trakt_id
      secret: !secret trakt_secret
      username: !secret trakt_user
      days: 10
      # exclude:
      #   'The Bachelor'

    sensor spotify-playlist:
      platform: spotify-playlist
      name: Spotify Listen
      client_id: !secret spotify_playlist_id
      client_secret: !secret spotify_playlist_secret

    media_player alexa:
      platform: alexa
      email: !secret amazon_user
      password: !secret amazon_password
      url: "amazon.de"
      debug: true

    media_player spotify:
      platform: spotify
      client_id: !secret spotify_id
      client_secret: !secret spotify_secret
      aliases:
        20ab775fc50260f909a900509ab0a92dcaee457c: 'Flur'
        b56d5caad11dd0a288620645cefc18f5f0ffe25e: 'Küche'
        dd13382d2d7f1e124fea1a544b5b69109d7fb534: 'FireTV'
        3c816ebeb05320ebe0830b49512bce547e87da19: 'Stereopaar'
        # b9cfe86fa7e75ae5a025fae31c22f5f02946b872: 'Echos'
        # eccd212a0a600278ec3432a76a70c9b1e1612806: 'Computer'
#-----------------------------------------------------------------------------#
#* LIGHT + MOTION                                                             #

    #| sun.sun                                             
    #|   |_ sensor.sun_elevation                           
    #|       |_ automation.sun_elevation                   
    #|            |_ variable.sun_elevation                
    #|             + light.michbaeck_dimmer (min/max color)
    #|             + input_number.flux_adjust              
    #|                |_ sensor.flux                       

    sensor lux_aussen_pct:   # lux sensors in percent
      platform: template
      sensors:
        lux_aussen_pct:    # defines max lamp light as 100%
          friendly_name: Lux Aussen (%)
          device_class: illuminance
          value_template: >-
            {% if not is_state("variable.light_aussen", 0) %}
              {{ ((states("sensor.light_aussen") | float * 100 / states("variable.light_baseline_aussen")|default(15) | float)) | round(1) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "%"
        
    sun:  # sun.sun

    sensor sun_elevation:   #[todo] replace with variable.sun_elevation
      platform: template
      sensors:
        sun_elevation:
          friendly_name: Sonnenstand
          unit_of_measurement: '°'
          value_template: >-
            {{ state_attr("sun.sun", "elevation")|default(0)|float }}

    #> sensor sun_elevation_stats:   #[todo] need to record
      #> platform: statistics    # evaluates min/max sun elevation | used in color temp calc (flux)
      #> entity_id: sensor.sun_elevation
      #> name: sun_elevation_stats
      #> sampling_size: 1440    # 24 hours, 1 sample/min
      #> max_age:
      #>   hours: 24

    sensor flux:    #[todo] use variable.sun_elevation; add weather + desired minimum colortemp
      #color = (sun_elevation - sun_elevation_min) * 100 / (sun_elevation_max - sun_elevation_min) * (color_max - color_min) / 100 + color_min
      #color = (sun - sun_min) * 100 / sun_range * color_range / 100 + color_min
      platform: template
      sensors:
        flux:
          unit_of_measurement: mireds
          value_template: >-
            {% set lux = (100 - states("sensor.lux_aussen_pct")|default(100)|int)*2/3 %}

            {% set sun = states("sensor.sun_elevation")|default(0)|float %}

            {# sun max/min swapped because sun low > color high, sun high > color low #}
            {% set sun_min = states("variable.sun_elevation_max")|default(20)|float  %}
            {% set sun_max = states("variable.sun_elevation_min")|default(-60)|float %}

            {% set sun_range = sun_max - sun_min %}

            {% set color_min = state_attr("light.michbaeck_dimmer", "min_mireds")|default(153)|float %}
            {% set color_max = state_attr("light.michbaeck_dimmer", "max_mireds")|default(500)|float %}
            {% set color_min = 250 %}
            {% set color_range = color_max - color_min %}
            
            {% set flux = (sun - sun_min)*100/sun_range*color_range/100 + color_min %}

            {# take outdoor brightness outside into account #}
            {% set flux = flux + lux %}

            {# add user input #}
            {% set flux = flux + states("input_number.flux_adjust")|default(0)|int*20 %}

            {# limit to possible values 153 < flux < 500 #}
            {% set flux = [[flux,color_max]|min,250]|max|int %}

            {{ flux }}
        flux_raw:
          unit_of_measurement: mireds
          value_template: >-
            {% set sun = states("sensor.sun_elevation")|default(0)|float %}

            {# sun max/min swapped because sun low > color high, sun high > color low #}
            {% set sun_min = states("variable.sun_elevation_max")|default(20)|float  %}
            {% set sun_max = states("variable.sun_elevation_min")|default(-60)|float %}

            {% set sun_range = sun_max - sun_min %}

            {% set color_min = state_attr("light.michbaeck_dimmer", "min_mireds")|default(153)|float %}
            {% set color_max = state_attr("light.michbaeck_dimmer", "max_mireds")|default(500)|float %}
            {% set color_min = 250 %}
            {% set color_range = color_max - color_min %}
            
            {% set flux = (sun - sun_min)*100/sun_range*color_range/100 + color_min %}

            {# limit to possible values 153 < flux < 500 #}
            {% set flux = [[flux,color_max]|min,250]|max|int %}

            {{ flux }}
  #----------------------------------------------------------------------------#
  #= FLUR

    #| sensor.motion_flur via HUE
    #| binary_sensor.motion_flur_2 via XIAOMI

    binary_sensor motion_flur:  # copy "sensor.motion_flur" to "binary_sensor.motion_flur" to equal other motion sensors
      platform: template
      sensors:
        # motion_flur_1:
        #   friendly_name: Motion Flur 1
        #   device_class: motion
        #   entity_id:
        #     - sensor.motion_flur
        #   value_template: >-
        #     {{ is_state("sensor.motion_flur", "on") }}

        motion_flur:
          friendly_name: Motion Flur
          device_class: motion
          entity_id:
            - binary_sensor.motion_flur_3
            - binary_sensor.motion_flur_1
          value_template: >-
            {# state_attr("binary_sensor.motion_flur_2","No motion since")|int < 60 #}
            {{
              is_state("binary_sensor.motion_flur_3", "on")
              or
              is_state("binary_sensor.motion_flur_2", "on")
              or
              is_state("binary_sensor.motion_flur_1", "on")
            }}

            
    binary_sensor motion_flur_helper:  # evaluates if light in floor is to be turned off
      platform: template
      sensors:
        motion_flur_helper:
          friendly_name: Motion Flur Helper
          entity_id:
            - input_boolean.motion_flur   # motion sensor must be enabled
            - binary_sensor.motion_flur   # sensor must be off
            - input_number.motion_flur_delay    # delay must have passed
            - sensor.time   # required to force updating sensor
          value_template: >-
            {{ 
              not
              (
                is_state("binary_sensor.motion_flur", "off") 
                and
                (now().timestamp() - states.binary_sensor.motion_flur.last_changed.timestamp())/60 >= states("input_number.motion_flur_delay")|default(0)|int
              ) 
            }}

    sensor light_flur:
      platform: template
      sensors:
        light_flur:
          friendly_name: Lux Flur
          device_class: illuminance
          unit_of_measurement: "lx"
          value_template: >
            {{state_attr("binary_sensor.motion_flur_3", "lx")|default(0)|float|round(1) }}

    light flur:
      platform: group
      name: flur
      entities:
        - light.flur_links
        - light.flur_rechts
  #----------------------------------------------------------------------------#
  #= KUECHE

    #| light.esstisch via HUE
    #| binary_sensor.motion_kueche via XIAOMI
    #| sensor.temp_kueche via XIAOMI
    #| sensor.humidity_kueche via XIAOMI
    #| sensor.light_kueche via XIAOMI

    binary_sensor motion_kueche_helper:   # evaluates if light in kitchen is to be turned off
      platform: template
      sensors:
        motion_kueche_helper:
          entity_id:
            - input_boolean.motion_kueche   # motion sensor must be enabled
            - binary_sensor.motion_kueche   # sensor must be off
            - input_number.motion_kueche_delay  # delay must have passed
            - sensor.time   # required to force updating sensor
          value_template: >-
            {#- "delay -3 due to fixed delay in xiaomi api" -#}
            {# is_state("light.kueche", "on") #}
            {{ 
              not 
              (
                is_state("binary_sensor.motion_kueche", "off") 
                and 
                (now().timestamp() - states.binary_sensor.motion_kueche.last_changed.timestamp())/60 >= states("input_number.motion_kueche_delay")|default(0)|int
              ) 
            }}

    light kueche:
      platform: group   # kueche
      name: kueche
      entities:
        - light.esstisch
  #----------------------------------------------------------------------------#
  #= BAD

    #| binary_sensor.motion_bad via MQTT
    #| binary_sensor.motion_bad_2 via XIAOMI

    binary_sensor motion_bad:  # copy "sensor.motion_flur" to "binary_sensor.motion_flur" to equal other motion sensors
      platform: template
      sensors:
        motion_bad:
          friendly_name: Motion Bad
          device_class: motion
          entity_id:
            - binary_sensor.motion_bad_2
            - binary_sensor.motion_bad_1
          value_template: >-
            {# state_attr("binary_sensor.motion_bad_2","No motion since")|int < 60 #}
            {{
              is_state("binary_sensor.motion_bad_1", "on")
              or
              is_state("binary_sensor.motion_bad_2", "on")
            }}
            
    binary_sensor motion_bad_helper:  # evaluates if light in bath is to be turned off
      platform: template
      sensors:
        motion_bad_helper:
          friendly_name: Motion Bad Helper
          entity_id:
            - input_boolean.motion_bad   # motion sensor must be enabled
            - binary_sensor.motion_bad   # sensor must be off
            - binary_sensor.motion_bad_1   # sensor must be off
            - binary_sensor.motion_bad_2   # sensor must be off
            - input_number.motion_bad_delay    # delay must have passed
            - sensor.time   # required to force updating sensor
          value_template: >-
            {{
              not
              (
                is_state("binary_sensor.motion_bad", "off") 
                and
                (now().timestamp() - states.binary_sensor.motion_bad.last_changed.timestamp())/60 >= states("input_number.motion_bad_delay")|default(0)|int
              )
            }}
            
    # binary_sensor motion_bad_helper:  # evaluates if light in bath is to be turned off
      # platform: template
      # sensors:
      #   motion_bad_helper:
      #     entity_id:
      #       - input_boolean.motion_bad   # motion sensor must be enabled
      #       - binary_sensor.motion_bad   # sensor must be off
      #       - input_number.motion_bad_delay    # delay must have passed
      #       - sensor.time   # required to force updating sensor
      #     value_template: >-
      #       {{ 
      #         not 
      #         (
      #           is_state("input_boolean.motion_bad", "on")
      #           and 
      #           is_state("binary_sensor.motion_bad", "off") 
      #           and 
      #           state_attr("binary_sensor.motion_bad_2","No motion since")|int/60 >= states("input_number.motion_bad_delay")|default(0)|int
      #           and 
      #           (now().timestamp() - states.binary_sensor.motion_bad.last_changed.timestamp())/60 > states("input_number.motion_bad_delay")|default(0)|int
      #         ) 
      #       }}

    light bad: #todo reflash for discovery
      platform: mqtt
      name: bad
      state_topic: /sonofftouch01/relais/state
      command_topic: /sonofftouch01/gpio/12
      payload_on: 1
      payload_off: 0
      retain: true
      availability_topic: /sonofftouch01/system
      payload_available: online
      payload_not_available: offline
  #----------------------------------------------------------------------------#
  #= WOHNZIMMER

    light wohnzimmer:
      platform: group   # wohnzimmer
      name: wohnzimmer
      entities:
        - light.wohnzimmer_licht
  #----------------------------------------------------------------------------#
  #= MICHBAECK

    #| sensor.light_michbaeck_2 via MQTT
    #| sensor.light_michbaeck_3 via MQTT
    #| sensor.light_michbaeck_4 via MQTT

    switch flux_bett:
      platform: flux    # flux bett
      name: flux_bett
      start_time: '10:00'
      stop_time: '22:00'
      start_colortemp: 8000
      sunset_colortemp: 2100
      stop_colortemp: 1800
      disable_brightness_adjust: true
      mode: xy
      transition: 10
      interval: 15
      lights:
        - light.bett

    light michbaeck_hue:    # hue color lights michbaeck (for alarm, animations)
      platform: group
      name: michbaeck_hue
      entities:
        - light.bett
        - light.schreibtisch
        - light.regal
        - light.stehlampe
        - light.grosses_licht

    light michbaeck_dimmer:   # dimmable lights used for AutoDimmer 
      platform: group
      name: michbaeck_dimmer
      entities:
        #.- light.bett
        - light.schreibtisch
        - light.regal
        - light.stehlampe
        - light.ikea
        - light.grosses_licht

    light michbaeck:    # ANY light michbaeck
      platform: group
      name: michbaeck
      entities:
        - light.bett
        - light.schreibtisch
        - light.regal
        - light.stehlampe
        - light.ikea
        - light.grosses_licht
        - light.xiaomi_gateway

    #| switch.grosses_licht
    #|  |_ light.grosses_licht
    #| switch.grosses_licht
    #|  | sensor.light_michbaeck_3 via MQTT
    #|  | sensor.light_michbaeck_4 via MQTT
    #|  |   |_ sensor.light_michbaeck_34_mean
    #|  |_____ light.grosses_licht
    #|           |_ sensor.light_michbaeck_1

    switch grosses_licht:   #[todo] hide
      platform: tuya    # grosses licht
      name: Grosses Licht
      host: '192.168.100.16'
      local_key: d147cebcf4d102bd
      device_id: 012001872c3ae831a564
      id: 2

    light grosses_licht:  # group 3 bulb light to one
      platform: group
      name: grosses_licht
      entities:
        - light.grosses_licht_1
        - light.grosses_licht_2
        - light.grosses_licht_3

    light michbaeck_all:    # group for all lights in michbaeck's room which will also disable automations when turned off
      platform: template
      lights:
        michbaeck_all:    
          friendly_name: Licht michbaeck
          value_template: >-
            {{ states("light.michbaeck") }}
          turn_on:
            service: light.turn_on
            data:
              entity_id: light.michbaeck
          turn_off:
            service: light.turn_off
            data:
              entity_id:
                - light.michbaeck
                - light.michbaeck_auto
          level_template: >-
            {{ state_attr("light.michbaeck", "brightness")|int }}
          set_level:
            service: light.turn_on
            data:
              entity_id: light.michbaeck
              brightness: >-
                {{ value }}

    light michbaeck_auto:  # transform switch to light
      platform: template
      lights:
        michbaeck_auto:   # represents dimmer and color automations
          friendly_name: AutoDimmer michbaeck
          value_template: >
            {% if is_state("automation.light_michbaeck_auto", "on") %}
            {# and is_state("automation.light_michbaeck_auto_color", "on") #}
              true
            {% else %}
              false
            {% endif %}
          turn_on:
            - service: automation.turn_on
              data:
                entity_id: 
                  - automation.light_michbaeck_auto
            # - service: automation.turn_off
            #   data:
            #     entity_id: 
            #       - automation.light_michbaeck_auto_color
          turn_off:
            - service: automation.turn_off
              data:
                entity_id: 
                  - automation.light_michbaeck_auto
            # - service: automation.turn_on
            #   data:
            #     entity_id: 
            #       - automation.light_michbaeck_auto_color
          level_template: >-
            {{ (states("input_number.light_michbaeck_auto")|int * 255/100)|int }}
          set_level:
            - service: input_number.set_value
              data_template:
                entity_id: 
                  - input_number.light_michbaeck_auto
                  # - input_number.light_automatic_michbaeck_2
                value: '{{ (brightness * 100/255)|int }}'

    sensor light_michbaeck_34_mean:   # lux3 + lux4 = 34mean
      platform: min_max
      name: light_michbaeck_34_mean
      type: mean
      round_digits: 1
      entity_ids:
        - sensor.light_michbaeck_4
        - sensor.light_michbaeck_3

    sensor light_michbaeck_1:   # lux3 + lux4 = 34mean = lux1
      platform: template
      sensors:
        light_michbaeck_1:
          friendly_name: Lux michbaeck 1
          device_class: illuminance
          unit_of_measurement: "lx"
          entity_id:
            #. - light.grosses_licht
            - sensor.light_michbaeck_34_mean
          value_template: >-
              {{ states("sensor.light_michbaeck_34_mean")|default(0)|float|round(2) }}

    sensor all_michbaeck_brightness_sensors:    # lights in percent
      platform: template
      sensors:
        brightness_michbaeck:   # converts 0-255 to 0-100 (for thermostat)
          friendly_name: Helligkeit michbaeck
          value_template: >-
            {% if is_state("light.michbaeck", "on") -%}
              {{ 
                (
                  state_attr('light.michbaeck', 'brightness')|int * 100/255
                )|int 
              }}
            {%- else -%}
              0
            {%- endif %}
          unit_of_measurement: "%"
        
        brightness_michbaeck_dimmer:    # converts 0-255 to 0-100 (for thermostat)
          friendly_name: Helligkeit Dimmer michbaeck
          value_template: >-
            {% if is_state("light.michbaeck_dimmer", "on") -%}
              {{ (state_attr('light.michbaeck_dimmer', 'brightness')|int * 100/255)|int }}
            {%- else -%}
              0
            {%- endif %}
          unit_of_measurement: "%"
        
        brightness_schreibtisch:    # converts 0-255 to 0-100
          friendly_name: Helligkeit Schreibtisch
          value_template: >-
            {% if is_state("light.schreibtisch", "on") -%}
              {{ (state_attr('light.schreibtisch', 'brightness')|int * 100/255)|int }}
            {%- else -%}
              0
            {%- endif %}
          unit_of_measurement: "%"
        
        brightness_stehlampe:   # converts 0-255 to 0-100
          friendly_name: Helligkeit Stehlampe
          value_template: >-
            {% if is_state("light.stehlampe", "on") -%}
              {{ (state_attr('light.stehlampe', 'brightness')|int * 100/255)|int }}
            {%- else -%}
              0
            {%- endif %}
          unit_of_measurement: "%"
        
        brightness_grosses_licht:   # converts 0-255 to 0-100
          friendly_name: Helligkeit Grosses Licht
          value_template: >-
            {% if is_state("light.grosses_licht", "on") -%}
              {{ (state_attr('light.grosses_licht', 'brightness')|int * 100/255)|int }}
            {%- else -%}
              0
            {%- endif %}
          unit_of_measurement: "%"
        
        brightness_regal:   # converts 0-255 to 0-100
          friendly_name: Helligkeit Regal
          value_template: >-
            {% if is_state("light.regal", "on") -%}
              {{ (state_attr('light.regal', 'brightness')|int * 100/255)|int }}
            {%- else -%}
              0
            {%- endif %}
          unit_of_measurement: "%"
        
        brightness_bett:    # converts 0-255 to 0-100
          friendly_name: Helligkeit Bett
          value_template: >-
            {% if is_state("light.bett", "on") -%}
              {{ (state_attr('light.bett', 'brightness')|int * 100/255)|int }}
            {%- else -%}
              0
            {%- endif %}
          unit_of_measurement: "%"
        
        brightness_ikea:    # converts 0-255 to 0-100
          friendly_name: Helligkeit IKEA
          value_template: >-
            {% if is_state("light.ikea", "on") -%}
              {{ (state_attr('light.ikea', 'brightness')|int * 100/255)|int }}
            {%- else -%}
              0
            {%- endif %}
          unit_of_measurement: "%"

    sensor light_michbaeck_target:
      platform: template
      sensors:
        light_michbaeck_1_target:
          friendly_name: AutoDimmer SOLL
          value_template: >-
            {# input from frontend #}
              {%- set input = states("input_number.light_michbaeck_auto")|float -%}

            {# LIGHT increases target by outside brightness to compensate shadows #}
              {%- set light = 
                [
                  (
                    states("input_number.light_michbaeck_auto")|float * 
                    [states("sensor.light_aussen_pct")|float,50]|min * 
                    0.03
                  ),25
                ]|min 
              -%}

            {# SUN decreases target by sun elevation to slowly lower brightness over time #}
              {%- set sun = 
                [
                  [
                    states("input_number.light_michbaeck_auto")|float * states("sensor.sun_elevation")|float * 0.01 
                    ,0
                  ]|min
                  ,states("input_number.light_michbaeck_auto")|float * -0.4
                ]|max 
              -%}

            {%- set target = input + light + sun -%}

            {#- if boost enabled, double it -#}
              {%- if is_state("input_boolean.light_michbaeck_boost", "on") -%}
                {{ target|float|round(1) * 2 }}
              {%- else -%}
                {{ target|float|round(1) }}
              {%- endif -%}
          unit_of_measurement: '%'

        light_michbaeck_2_target:
          value_template: >-
            {%- set target = 
                states("input_number.light_automatic_michbaeck_2")|float + 
                [(states("input_number.light_automatic_michbaeck_2")|float * [states("sensor.light_aussen_pct")|float,50]|min * 0.03),100]|min
            -%}
            {%- if is_state("input_boolean.light_michbaeck_boost", "on") -%}
              {{ target|float|round(1) * 2 }}
            {%- else -%}
              {{ target|float|round(1) }}
            {%- endif -%}
          unit_of_measurement: '%'

    sensor lux_michbaeck_percent:   # lux sensors in percent
      platform: template
      sensors:
        light_michbaeck_1_pct:    # defines max lamp light as 100%
          friendly_name: Lux michbaeck 1 (%)
          device_class: illuminance
          value_template: >-
            {% if states("variable.light_baseline_michbaeck_1")|default(15)|float > 0 %}
              {{ ((states("sensor.light_michbaeck_1") | float * 100 / states("variable.light_baseline_michbaeck_1")|default(15) | float)) | round(1) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "%"
        
        light_michbaeck_2_pct:    # defines max lamp light as 100%
          friendly_name: Lux michbaeck 2 (%)
          device_class: illuminance
          value_template: >-
            {% if states("variable.light_baseline_michbaeck_2")|default(3)|float > 0 %}
              {{  (states("sensor.light_michbaeck_2") | float * 100 / states("variable.light_baseline_michbaeck_2")|default(3) | float) | round(1) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "%"
        
        light_michbaeck_3_pct:    # defines max lamp light as 100%
          friendly_name: Lux michbaeck 3 (%)
          device_class: illuminance
          value_template: >-
            {% if states("variable.light_baseline_michbaeck_3")|default(3)|float > 0 %}
              {{  (states("sensor.light_michbaeck_3") | float * 100 / states("variable.light_baseline_michbaeck_3")|default(3) | float) | round(1) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "%"
        
        light_michbaeck_4_pct:    # defines max lamp light as 100%
          friendly_name: Lux michbaeck 4 (%)
          device_class: illuminance
          value_template: >-
            {% if states("variable.light_baseline_michbaeck_4")|default(3)|float > 0 %}
              {{  (states("sensor.light_michbaeck_4") | float * 100 / states("variable.light_baseline_michbaeck_4")|default(3) | float) | round(1) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "%"

    sensor light_michbaeck_auto:    # AutoDimmer action
      platform: template
      sensors:
        light_michbaeck_auto:
          #| SENSOR down                          → do nothing
          #|
          #| SENSOR < TARGET
          #|    → LIGHT not max                   → brighter
          #|    → LIGHT max and COLOR not min     → colder
          #|
          #| SENSOR > TARGET
          #|    → LIGHT not min and COLOR not max → warmer
          #|    → LIGHT not min and COLOR max     → darker
          #|    → LIGHT min                       → off
          value_template: >-
            {%- set target = states("sensor.light_michbaeck_1_target")|float -%}
            {%- set sensor = states("sensor.light_michbaeck_1_pct")|float -%}
            {%- set flux = states("sensor.flux")|int -%}

            {%- if is_state("switch.loetkolben", "on") -%}
              {%- set light = state_attr("light.schreibtisch", "brightness")|int -%}
            {%- else -%}
              {%- set light = state_attr("light.michbaeck_dimmer", "brightness")|int -%}
            {%- endif -%}

            {%- if state_attr("light.stehlampe", "color_temp")|int == 0 -%}
              {%- set color = flux -%}
            {%- else -%}
              {%- set color = state_attr("light.stehlampe", "color_temp")|int -%}
            {%- endif -%}

            {%- if is_state("light.michbaeck_auto", "off") %}
              disabled
            {%- elif states("sensor.light_michbaeck_1") in ["unavailable","unknown"] -%}
              idle
            {%- elif sensor < [target*0.95, target-2]|min -%}
              {%- if light < 254 -%}
                increase_brightness
              {#- elif color >= flux|int -#}
              {%- elif color > 250 and is_state("input_boolean.light_michbaeck_color", "on") -%}
                decrease_color
              {%- else -%}
                idle
              {%- endif -%}
            {%- elif sensor > [target*1.05, target+2]|max -%}
              {%- if color < flux and light != 0 and is_state("input_boolean.light_michbaeck_color", "on") -%}
                increase_color
              {%- elif light != 0  and (color >= flux or is_state("input_boolean.light_michbaeck_color", "off")) -%}
                decrease_brightness
              {%- elif light == 0 and is_state("light.michbaeck_dimmer", "on") -%}
                off
              {%- else -%}
                idle
              {%- endif -%}
            {%- else -%}
              idle
            {%- endif -%}

        light_michbaeck_auto_state:
          value_template: >-
            {%- set lastaction = states("sensor.light_michbaeck_auto")|string -%}

            {%- if lastaction == "increase_brightness" -%}
              brightness increased
            {%- elif lastaction == "decrease_brightness" -%}
              brightness decreased
            {%- elif lastaction == "increase_color" -%}
              color increased
            {%- elif lastaction == "decrease_color" -%}
              color decreased
            {%- elif lastaction == "disabled" -%}
              disabled
            {% else %}
              {{ states("sensor.light_michbaeck_auto_state") }}
            {%- endif -%}
#-----------------------------------------------------------------------------#
#* DOOR + WINDOW                                                              #

    #| binary_sensor.window_michbaeck_2 via MQTT
    #| cover.window_michbaeck_1 via MQTT
    #| cover.window_michbaeck_2 via MQTT
    #| cover.window_michbaeck_1_blind via MQTT
    #| cover.window_michbaeck_2_blind via MQTT
    #| binary_sensor.door_michbaeck via XIAOMI

    binary_sensor window_michbaeck_1:   #[todo] flash discovery
      platform: mqtt    # window michbaeck 1
      state_topic: /sonoff05/window/state
      name: window_michbaeck_1
      device_class: window
      payload_on: 1
      payload_off: 0
      availability_topic: /sonoff05/system
      payload_available: online
      payload_not_available: offline

    # cover window_michbaeck_1_blind:
      # - platform: mqtt
      #   name: "window_michbaeck_1_blind"
      #   command_topic: "esp42/1/set/blind"
      #   position_topic: "esp42/1/status/blind"
      #   # availability_topic: "home-assistant/cover/availability"
      #   set_position_topic: "esp42/1/set/blind"
      #   # qos: 0
      #   retain: true
      #   payload_open: 0
      #   payload_close: 100
      #   # payload_stop: "STOP"
      #   position_open: 0
      #   position_closed: 100
      #   # payload_available: "online"
      #   # payload_not_available: "offline"
      #   # optimistic: false
      #   # value_template: '{{ value.x }}'

    # cover door_michbaeck_test:
      # - platform: mqtt
      #   name: "door_michbaeck_test"
      #   command_topic: "esp26/cmd"
      #   position_topic: "esp26/cover/position"
      #   # availability_topic: "home-assistant/cover/availability"
      #   set_position_topic: "esp26/cover/position/set"
      #   # qos: 0
      #   retain: true
      #   payload_open: 0
      #   payload_close: 100
      #   # payload_stop: "STOP"
      #   position_open: 0
      #   position_closed: 100
      #   # payload_available: "online"
      #   # payload_not_available: "offline"
      #   # optimistic: false
      #   # value_template: '{{ value.x }}'

    binary_sensor window_kueche:  #todo flash discovery
      platform: mqtt    # window kueche
      state_topic: /sonoff01/window/state
      name: window_kueche
      device_class: window
      payload_on: 1
      payload_off: 0
      availability_topic: /sonoff01/system
      payload_available: online
      payload_not_available: offline

    binary_sensor window_bad: #todo flash discovery
      platform: mqtt    # window bad
      state_topic: /sonoff04/window/state
      name: window_bad
      device_class: window
      payload_on: 1
      payload_off: 0
      availability_topic: /sonoff04/system
      payload_available: online
      payload_not_available: offline
#-----------------------------------------------------------------------------#
#* CLIMATE + TEMP                                                             #

    #| switch.boiler via mqtt → gpio,14,0 = turn_on?


    #| anyone home or traveling home  → presence = true
    #| presence(true) + time + temp   → binary_sensor.climate_home = true
    #| climate_home(true)             → switch.boiler = on
    #| boiler(on) + window            → heat kueche = on
    #| boiler(on) + window            → heat bad = on
    #| michbaeck home or traveling 
    #|  + windows + awake||alarm      → heat michbaeck = on


    binary_sensor climate_home:   #[test] add times, temp, season, remove asleep
      platform: template
      sensors:
        climate_home:
          entity_id:
            - binary_sensor.presence
            # - input_boolean.asleep
            - sensor.daily_routine
            - input_datetime.climate_1_start
            - input_datetime.climate_1_end
            - input_datetime.climate_2_start
            - input_datetime.climate_2_end
            - input_datetime.climate_3_start
            - input_datetime.climate_3_end
            - input_datetime.climate_4_start
            - input_datetime.climate_4_end
            - input_datetime.climate_5_start
            - input_datetime.climate_5_end
            - input_datetime.climate_6_start
            - input_datetime.climate_6_end
            - input_datetime.climate_7_start
            - input_datetime.climate_7_end
            - sensor.time
          value_template: >-
            {% set start = as_timestamp(strptime(states("input_datetime.climate_" + now().isoweekday()|string + "_start"),"%H:%M:%S")) %}
            {% set end = as_timestamp(strptime(states("input_datetime.climate_" + now().isoweekday()|string + "_end"),"%H:%M:%S")) %}
            {% set now = as_timestamp(strptime(states("sensor.time"),"%H:%M")) %}

            {% if start is none or end is none %}
              {% set time = true %}
            {% elif now > start and now < end %}
              {% set time = true %}
            {% else %}
              {% set time = false %}
            {% endif %}

            {{
              (
                time and
                is_state("binary_sensor.presence", 'on')
              ) or
              is_state("sensor.daily_routine", "preheat")
            }}

            {#
              and
              (
                is_state('input_boolean.asleep', 'off')
                or 
                is_state("sensor.daily_routine", "alarm")
                or 
                is_state("sensor.daily_routine", "alarm_fadein")
              )
            #}


  #---------------------------------------------------------------------------#
  #= FLUR

    sensor temp_flur:
      platform: template
      sensors:
        temp_flur:
          friendly_name: Temperatur Flur
          device_class: temperature
          unit_of_measurement: "°C"
          value_template: >-
            {{ state_attr("binary_sensor.motion_flur_3", "temperature")|default(0)|float|round(2) }}
  #----------------------------------------------------------------------------#
  #= KUECHE

    #| sensor.temp_kueche via XIAOMI
    #| sensor.humidity_kueche via XIAOMI

    switch climate_kueche:    #todo flash sonoff01 with discovery
      platform: mqtt
      name: climate_kueche
      state_topic: /sonoff01/relais/state
      command_topic: /sonoff01/gpio/12
      payload_on: 1
      payload_off: 0
      optimistic: false
      retain: true
      availability_topic: /sonoff01/system
      payload_available: online
      payload_not_available: offline

    climate climate_kueche:
      platform: generic_thermostat    # kueche heater
      name: kueche
      heater: switch.climate_kueche
      target_sensor: sensor.temp_kueche
      min_temp: 10
      max_temp: 30
      min_cycle_duration:
        minutes: 5
      cold_tolerance: 0
      hot_tolerance: 0.1
      initial_operation_mode: "auto"

    binary_sensor climate_kueche_helper:    #[todo] replace with switch.boiler
      platform: template
      sensors:
        climate_kueche_helper:    # generic helper + windows + door + presence + awake + temp compare
          entity_id:
            - binary_sensor.climate_home    
            - sensor.wetter_temperature
            - binary_sensor.window_michbaeck_1
            - binary_sensor.door_michbaeck
            - binary_sensor.window_kueche
            - sensor.time
            - input_boolean.asleep
            - sensor.daily_routine
          value_template: >-
            {{
              is_state('binary_sensor.climate_home', 'on')
              and 
              states('binary_sensor.window_kueche') in ["off", "unavailable"]
              and 
              state_attr('climate.kueche', 'temperature')|float > states('sensor.wetter_temperature')|float
              and
              (
                states('binary_sensor.door_michbaeck') in ["off", "unavailable"]
                or
                (
                  states('binary_sensor.door_michbaeck') in ["on", "unavailable"]
                  and 
                  states('binary_sensor.window_michbaeck_1') in ["off", "unavailable"]
                )|default(true)
              )
            }}
          delay_on:
            seconds: 2
          delay_off:
            seconds: 2
  #----------------------------------------------------------------------------#
  #= BAD

    #| sensor.temp_bad via MQTT

    switch climate_bad: #todo flash sonoff04 with discovery
      platform: mqtt
      name: climate_bad
      state_topic: /sonoff04/relais/state
      command_topic: /sonoff04/gpio/12
      payload_on: 1
      payload_off: 0
      optimistic: false
      retain: true
      availability_topic: /sonoff04/system
      payload_available: online
      payload_not_available: offline

    climate climate_bad:
      platform: generic_thermostat    # bad heater
      name: bad
      heater: switch.climate_bad
      target_sensor: sensor.temp_bad
      min_temp: 10
      max_temp: 30
      min_cycle_duration:
        minutes: 5
      cold_tolerance: 0
      hot_tolerance: 0.1
      initial_operation_mode: "auto"
    
    binary_sensor climate_bad_helper:   #[todo] replace with switch.boiler
      platform: template
      sensors:
        climate_bad_helper:   # generic helper + windows + door + presence + awake + temp compare
          entity_id:
            - binary_sensor.climate_home    
            - sensor.wetter_temperature
            - binary_sensor.window_bad
            - sensor.time
            - input_boolean.asleep
            - sensor.daily_routine
          value_template: >-
            {{
              is_state('binary_sensor.climate_home', 'on')
              and 
              states('binary_sensor.window_bad') in ["off", "unavailable"]
              and 
              state_attr('climate.bad', 'temperature')|float > states('sensor.wetter_temperature')|float
            }}
          delay_on:
            seconds: 2
          delay_off:
            seconds: 2
  #----------------------------------------------------------------------------#
  #= WOHNZIMMER
  #----------------------------------------------------------------------------#
  #= MICHBAECK

    #| sensor.temp_michbaeck via MQTT

    switch climate_michbaeck:
      platform: mqtt    # sonoff05 michbaeck
      name: climate_michbaeck
      state_topic: /sonoff05/relais/state
      command_topic: /sonoff05/gpio/12
      payload_on: 1
      payload_off: 0
      optimistic: false
      retain: true
      availability_topic: /sonoff05/system
      payload_available: online
      payload_not_available: offline

    switch ventilator:
      platform: tuya    # ventilator
      name: Ventilator
      host: '192.168.100.16'
      local_key: d147cebcf4d102bd
      device_id: 012001872c3ae831a564
      id: 1

    climate michbaeck:  
      platform: generic_thermostat    # michbaeck heater
      name: michbaeck
      heater: switch.climate_michbaeck
      target_sensor: sensor.temp_michbaeck
      min_temp: 10
      max_temp: 30
      min_cycle_duration:
        minutes: 15
      cold_tolerance: 0
      hot_tolerance: 0.1
      initial_operation_mode: "auto"

    climate michbaeck_ac:
      platform: generic_thermostat    # michbaeck fan
      name: michbaeck_ac
      heater: fan.michbaeck
      target_sensor: sensor.temp_michbaeck
      ac_mode: true
      min_temp: 10
      max_temp: 30
      min_cycle_duration:
        minutes: 5
      cold_tolerance: 0
      hot_tolerance: 0
      initial_operation_mode: "auto"

    binary_sensor climate_michbaeck_helper:   #[todo] replace with switch.boiler
      platform: template
      sensors:
        climate_michbaeck_helper:   # generic helper + windows + door + presence + awake + temp compare
          entity_id:
            - binary_sensor.climate_home    
            - sensor.wetter_temperature
            - input_boolean.asleep
            - cover.window_michbaeck_1
            - cover.window_michbaeck_2
            - binary_sensor.window_michbaeck_1
            - binary_sensor.window_michbaeck_2
            - binary_sensor.door_michbaeck
            - binary_sensor.window_kueche
            - sensor.daily_routine
            - sensor.michbaeck
            - sensor.time
          value_template: >-
            {{
              is_state('binary_sensor.climate_home', 'on') and 
              (
                is_state("sensor.michbaeck","home") or
                is_state("sensor.daily_routine","travel_home") or
                is_state("sensor.daily_routine","preheat")
              ) and
              states('binary_sensor.window_michbaeck_1') in ["off", "unavailable"] and 
              states('binary_sensor.window_michbaeck_2') in ["off", "unavailable"] and not
              is_state("cover.window_michbaeck_1", "open") and not
              is_state("cover.window_michbaeck_2", "open") and
              state_attr('climate.michbaeck', 'temperature')|float > states('sensor.wetter_temperature')|float and 
              (
                states('binary_sensor.door_michbaeck') in ["off", "unavailable"] or 
                (
                  states('binary_sensor.door_michbaeck') in ["on", "unavailable"] and 
                  states('binary_sensor.window_kueche') in ["off", "unavailable"]
                )
              )
            }}
          delay_on:
            seconds: 2
          delay_off:
            seconds: 2

        climate_michbaeck_ac_helper:    # on when home and not asleep
          value_template: >-
            {{
              is_state("sensor.michbaeck", "home")
              and 
              is_state("input_boolean.asleep", "off")
            }}
          delay_on:
            seconds: 2
          delay_off:
            seconds: 2
#-----------------------------------------------------------------------------#
#* OTHER DEVICES                                                              #

    #| switch.loetkolben via MQTT
    #| switch.drucker via MQTT
    #| switch.rcswitch3 via MQTT

    sensor drucker_timer:
      platform: template
      sensors:
        drucker_timer:
          friendly_name: Drucker SleepTimer
          unit_of_measurement: Minuten
          entity_id:
            - script.drucker_timer
            - input_number.drucker_timer
            - sensor.time
          value_template: >-
            {% if is_state("script.drucker_timer", "on") %}
              {{ (as_timestamp(state_attr("script.drucker_timer", "last_triggered")|default(0))/60)|int + states("input_number.drucker_timer")|default(0)|int*60 - (as_timestamp(utcnow())/60)|int }}
            {% else %}
              off
            {% endif %}

    sensor solder_timer:
      platform: template
      sensors:
        solder_timer:
          friendly_name: Lötkolben SleepTimer
          unit_of_measurement: Minuten
          entity_id:
            - switch.loetkolben
            - sensor.time
          value_template: >-
            {% if is_state("switch.loetkolben", "on") and is_state("automation.loetkolben_off", "on") %}
              {{ (as_timestamp(states.switch.loetkolben.last_changed)/60)|int + 45 - (as_timestamp(utcnow())/60)|int }}
            {% else %}
              off
            {% endif %}

    switch computer:
      platform: template
      switches:
        computer:
          friendly_name: Computer
          value_template: >-
            {{ is_state("light.computer", "on") }}
          turn_on:
            service: light.turn_on
            data:
              entity_id: light.computer
          turn_off:
            service: light.turn_off
            data:
              entity_id: light.computer
#-----------------------------------------------------------------------------#
#* TRACKER + ROUTINE                                                          #

    #| device_tracker.brain by iOS app

    geofency:

    binary_sensor johannes_notebook:
      platform: ping  
      host: 192.168.100.28
      name: johannes_notebook
      scan_interval: 60
      count: 5
      device_class: connectivity

    binary_sensor johannes_handy:
      platform: ping  
      host: 192.168.100.26
      name: johannes_handy
      scan_interval: 60
      count: 5
      device_class: connectivity

    binary_sensor johannes:    #[todo] need to track Hannes presence
      platform: template
      sensors:
        johannes: 
          value_template: >-
            {{ 
              is_state("binary_sensor.johannes_handy","on") or 
              is_state("binary_sensor.johannes_notebook","on") 
            }}

    device_tracker nmap:
      platform: nmap_tracker
      hosts:
        - 192.168.0.1
        - 192.168.1.0/24
        - 192.168.100.0/24
        - 192.168.200.0/24
      interval_seconds: 60
      track_new_devices: yes

    #> device_tracker geofeny:    # replaced with geofency component
      #> platform: geofency
      #> consider_home: 60
      #> track_new_devices: yes

    #| input_select.michbaeck
    #|  |_ sensor.michbaeck

    sensor michbaeck:    # where am I?
      platform: template
      sensors:
        michbaeck: 
          friendly_name: michbaeck Location
          entity_id:
            - input_select.michbaeck
            - sensor.time
          value_template: >-
            {{ states("input_select.michbaeck")|default("NA") }}

    #| input_select.daily_routine
    #|  |_ sensor.daily_routine

    sensor daily_routine:   # what am I doing?
      platform: template
      sensors:
        daily_routine:
          friendly_name: michbaeck Routine
          value_template: >-
            {{ states("input_select.daily_routine")|default("NA") }}

    #| proximity.home
    #|  |_ sensor.dir_of_travel

    proximity:  # how far am I away?
      home:
        tolerance: 50
        unit_of_measurement: km
        devices:
          - device_tracker.cb58345aa18f4028a72da9fb0c30e6f9

    sensor dir_of_travel:   # where am I going?
      platform: template
      sensors:
        dir_of_travel:
          friendly_name: michbaeck Richtung
          entity_id:
            - proximity.home
          value_template: >-
            {{ state_attr("proximity.home", "dir_of_travel")|default("NA") }}

    binary_sensor presence:   # is anyone home?
      platform: template
      sensors:
        presence:
          value_template: >-
            {{
              is_state("binary_sensor.johannes", "on") or
              is_state("sensor.michbaeck", "home") or
              is_state("sensor.daily_routine", "travel_home")
            }}
#-----------------------------------------------------------------------------#
#* SLEEP/ALARM                                                                #

    #|   sensor.bed_load_raw via MQTT
    #| + input_number.bed_load_raw_min
    #| + input_number.bed_load_raw_max
    #| + input_number.bed_load_ref_weight
    #|    |_ sensor.bed_load
    #|        |_ automation.sleep_cycle_calculations
    #|         + input_number.bed_load_sensitivity
    #|            |_ binary_sensor.sleep_cycle_trend
    #|            |_ binary_sensor.sleep_cycle_helper

    sensor bed_load:    # calibrates load cell raw values
      platform: template
      sensors:
        bed_load:
          friendly_name: Bett Last
          unit_of_measurement: 'kg'
          value_template: >-
            {# 2-point-calibration: #}
            {# CorrectedValue = (((RawValue – RawLow) * ReferenceRange) / RawRange) + ReferenceLow #}
            {% set raw = states("sensor.bed_load_raw")|default(0)|float %}
            {% set raw_min = states("input_number.bed_load_raw_min")|default(800)|int %}
            {% set raw_max = states("input_number.bed_load_raw_max")|default(1200)|int %}
            {% set raw_range = raw_max - raw_min %}
            {% set ref = states("input_number.bed_load_ref_weight")|default(65)|int %}

            {% set load = ((raw - raw_min) * ref / raw_range)|float|round(2) %}

            {# compensate sensor failures #}
            {% if load < 0 %}
              {% set load = load + load|int*-1 +1 %}
            {% endif %} 

            {{ load|round(3) }}    

        bed_load_nolimit:
          friendly_name: Bett Last
          unit_of_measurement: 'kg'
          value_template: >-
            {# 2-point-calibration: #}
            {# CorrectedValue = (((RawValue – RawLow) * ReferenceRange) / RawRange) + ReferenceLow #}
            {% set raw = states("sensor.bed_load_raw")|default(0)|float %}
            {% set raw_min = states("input_number.bed_load_raw_min")|default(800)|int %}
            {% set raw_max = states("input_number.bed_load_raw_max")|default(1200)|int %}
            {% set raw_range = raw_max - raw_min %}
            {% set ref = states("input_number.bed_load_ref_weight")|default(65)|int %}

            {{ ((raw - raw_min) * ref / raw_range)|float|round(2) }}
            
    sensor bed_load_step:   #[todo] to be removed, just need graphs for testing
      platform: template
      sensors:
        bed_load_step:
          friendly_name: Bett Laständerung
          unit_of_measurement: g
          value_template: >-
            {#> states("input_number.bed_load_step")|default(0)|int #}
            {{ state_attr("variable.sleep_cycle", "step")|default(0)|round(2) }}

    sensor sleep_cycle:
      platform: template 
      sensors:
        sleep_cycle:
          friendly_name: SleepCycle Messwert
          unit_of_measurement: moves
          value_template: >-
            {#> states("input_number.sleep_cycle")|default(0)|float|round(2) #}
            {% if state_attr("variable.sleep_cycle", "count") is number %}
              {{- state_attr("variable.sleep_cycle", "count")|round(2) -}}
            {% else %}
              0
            {% endif %}

    binary_sensor sleep_cycle_trend:
      platform: trend
      sensors:
        sleep_cycle_trend:
          entity_id: sensor.sleep_cycle
          device_class: moving

    sensor sleep_cycle_ratio:
      platform: history_stats
      name: sleep_cycle_ratio
      entity_id: binary_sensor.sleep_cycle_trend
      state: 'on'
      type: ratio
      duration: 00:00:05
      end: '{{ now() }}'
      
    sensor sleep_cycle_lowpass:   #[todo] to be removed, just need graphs for testing
      platform: template 
      sensors:
        sleep_cycle_lowpass:
          friendly_name: SleepCycle Bewegung
          unit_of_measurement: moves
          value_template: >-
            {#> states("input_number.sleep_cycle")|default(0)|float|round(2) #}

            {% if state_attr("variable.sleep_cycle", "lowpasscount") is number %}
              {{- state_attr("variable.sleep_cycle", "lowpasscount")|float|round(2) -}}
            {% else %}
              0
            {% endif %}

    sensor sleep_cycle_ratio_lowpass:   #[todo] to be removed, just need graphs for testing
      platform: template 
      sensors:
        sleep_cycle_ratio_lowpass:
          friendly_name: SleepCycle Phase
          unit_of_measurement: '%'
          value_template: >-
            {#> states("input_number.sleep_cycle")|default(0)|float|round(2) #}
            {{ states("variable.sleep_cycle")|default(0)|float }}

    binary_sensor sleep_cycle_helper:   # triggers wakeup alarm when true
      platform: template
      sensors:
        sleep_cycle_helper: 
          value_template: >-
            {{ 
              states("sensor.sleep_cycle_lowpass")|float > 70 or
              states("sensor.sleep_cycle_ratio_lowpass")|float > 40 
            }}
          delay_on:
            minutes: 1

    sensor sleep_cycle_helper:    # just to add binary to diagram
      platform: template
      sensors:
        sleep_cycle_helper: 
          unit_of_measurement: '%'
          value_template: >-
            {% if is_state("binary_sensor.sleep_cycle_helper", "on") %}
              100
            {% else %}
              0
            {% endif %}
#-----------------------------------------------------------------------------#
#* ALARM                                                                      #

    binary_sensor workday:
      platform: workday
      country: DE
      province: NW

    #| calendar.arbeit
    #| calendar.erinnerungen
    #| calendar.familie
    #| calendar.neue_kontakte
    #| calendar.privat
    #| calendar.schulden
    #| calendar.homeassistant

    calendar icloud:
      platform: caldav
      username: !secret icloud_user
      password: !secret icloud_caldav
      url: !secret icloud_calbase

    binary_sensor alarm_helper:
      platform: template
      sensors:
        alarm_helper:    # turns off on weekends, holidays, vacation
          value_template: >-
            {{
              is_state('binary_sensor.workday_sensor', 'on')
              and 
              is_state('calendar.arbeit', 'off')
            }}
#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#
#* INPUT                                                                      #

  #---------------------------------------------------------------------------#
  #= BOOL

    input_boolean:

      climate_automatic:
        name: Klima-Automatik

      motion_flur:

      motion_kueche:

      motion_bad:

      motion_michbaeck_1:

      light_michbaeck_color:
        name: Auto Color

      light_michbaeck_boost:
        name: Dimmer Boost

      michbaeck_arrival:    #[todo] replace with var # used for open-door action after coming home
        initial: false

      asleep:   # enabled when asleep, used for many conditions

      alexa_toggle:   # enable/disable alexa voice (user input)

      #> alexa_toggle2:    #[todo] replace with var # enable/disable alexa voice (script input)
  
      view_details:
        name: Details anzeigen

      view_options:
        name: Einstellungen

      view_debug:
        name: Debug anzeigen

      debug_services:
        name: Debug service calls

      debug_states:
        name: Debug state changes
        # initial: false

      debug_attributes:
        name: Include attributes

      wecker_toggle:    # enable/disable morning alarm automation
        name: Wecker Automatik
  #---------------------------------------------------------------------------#
  #= NUMBER

    input_number:
      
    #-------------------------------------------------------------------------#
    #= LIGHT

      light_michbaeck_auto:    # desired brightness, 100% = baseline
        name: light_michbaeck_auto
        unit_of_measurement: '%'
        min: 0
        max: 200
        step: 5

      flux_adjust:
        name: flux Anpassen
        unit_of_measurement: mireds
        min: -10
        max: 10
        step: 1
        initial: 0

      # light_michbaeck_1_baseline:   #[todo] replace with var # set by automation, highest lux after sunset
        # name: light_michbaeck_1_baseline
        # unit_of_measurement: 'lx'
        # mode: box
        # min: 0
        # max: 50
        # step: 0.01

      # light_michbaeck_2_baseline:   #[todo] replace with var # set by automation, highest lux after sunset
        # name: light_michbaeck_2_baseline
        # unit_of_measurement: 'lx'
        # min: 0
        # max: 50
        # step: 0.01
        # mode: box

      # light_kueche_baseline:    #[todo] replace with var # set by automation, highest lux after sunset
        # name: light_kueche_baseline
        # unit_of_measurement: 'lx'
        # mode: box
        # min: 0
        # max: 50
        # step: 0.01

      # light_flur_baseline:    #[todo] replace with var # set by automation, highest lux after sunset
        # name: light_flur_baseline
        # unit_of_measurement: 'lx'
        # mode: box
        # min: 0
        # max: 50
        # step: 0.01

      # light_bad_baseline:   #[todo] replace with var # set by automation, highest lux after sunset
        # name: light_bad_baseline
        # unit_of_measurement: 'lx'
        # mode: box
        # min: 0
        # max: 50
        # step: 0.01

      # light_aussen_baseline:    #[todo] replace with var # set by automation, highest lux at anytime
        # name: light_aussen_baseline
        # unit_of_measurement: 'lx'
        # mode: box
        # min: 0
        # max: 10000
        # step: 0.01
    #-------------------------------------------------------------------------#
    #= MOTION

      motion_flur_trigger:
        unit_of_measurement: lx
        min: 1
        max: 30
        step: 1

      motion_flur_delay:
        unit_of_measurement: Minuten
        min: 1
        max: 15
        step: 1
        
      motion_kueche_trigger:
        unit_of_measurement: lx
        min: 1
        max: 30
        step: 1

      motion_kueche_delay:
        unit_of_measurement: Minuten
        min: 1
        max: 15
        step: 1
        
      motion_bad_trigger:
        unit_of_measurement: lx
        min: 1
        max: 30
        step: 1

      motion_bad_delay:
        unit_of_measurement: Minuten
        min: 1
        max: 15
        step: 1
    #-------------------------------------------------------------------------#
    #= CLIMATE

      climate_michbaeck_tempdiff:
        unit_of_measurement: '°C'
        mode: box
        min: 0
        max: 10
        step: 1

      climate_away_temp:
        unit_of_measurement: '°C'
        mode: box
        min: 5
        max: 30
        step: 0.1

      # climate_michbaeck_save:   #[todo] replace with var
        # unit_of_measurement: '°C'
        # mode: box
        # min: 5
        # max: 30
        # step: 0.1

      # climate_kueche_save:    #[todo] replace with var
        # unit_of_measurement: '°C'
        # mode: box
        # min: 5
        # max: 30
        # step: 0.1

      # climate_bad_save:   #[todo] replace with var
        # unit_of_measurement: '°C'
        # mode: box
        # min: 5
        # max: 30
        # step: 0.1
    #-------------------------------------------------------------------------#
    #= SLEEP

      bed_load_sensitivity:
        unit_of_measurement: 'g'
        min: 10
        max: 200
        step: 10

      # bed_load_step:    #[todo] replace with var
        # unit_of_measurement: g
        # mode: box
        # min: -100000
        # max: 100000
        # step: 1
        # initial: 0

      bed_load_raw_min:
        unit_of_measurement: raw
        mode: box
        min: 0
        max: 5000
        step: 1
      
      bed_load_raw_max:
        unit_of_measurement: raw
        mode: box
        min: 0
        max: 5000
        step: 1

      bed_load_ref_weight:
        unit_of_measurement: kg
        mode: box
        min: 0
        max: 100
        step: 1

      # sleep_cycle:    #[todo] replace with var
        # unit_of_measurement: moves
        # min: 0
        # max: 100
        # step: 0.01
        # initial: 0

      # sleep_cycle_lowpass:    #[todo] replace with var
        # unit_of_measurement: moves
        # min: 0
        # max: 100
        # step: 0.1
        # initial: 0

      # sleep_cycle_ratio_lowpass:    #[todo] replace with var
        # unit_of_measurement: '%'
        # min: 0
        # max: 100
        # step: 0.1
        # initial: 0
    #-------------------------------------------------------------------------#
    #= ALARM

      wecker_fading:
        name: Aufblenden
        unit_of_measurement: Minuten
        mode: slider
        icon: mdi:timer
        min: 0
        max: 55
        step: 5
    #-------------------------------------------------------------------------#
    #= MISC

      esp_unit:
        mode: box
        min: 1
        max: 100
        step: 1

      drucker_timer:
        unit_of_measurement: hours
        min: 1
        max: 24
        step: 1

      alexa_volume:
        name: Laustärke
        icon: mdi:volume-high
        min: 0
        max: 100
        step: 1
        # mode: slider
        unit_of_measurement: '%'

      ticker_fx:    #[todo] replace with var  # used in script.dotmatrixdisplay
        name: ticker_fx
        mode: box
        min: 0
        max: 100
        step: 1
  #---------------------------------------------------------------------------#
  #= SELECT

    input_select:

      theme:
        name: Theme
        options:
          - default
          - michbaeck_material
          - midnight-remake

      alexa_device:
        name: Select Echo
        icon: mdi:amazon-alexa
        options:
          - Schlafzimmer1
          - Schlafzimmer2
          - Schlafzimmer
          - Stereopaar
          - Überall
          - Küche
          - Flur
          - Spare

      alexa_content:
        name: Select Content
        icon: mdi:amazon-alexa
        options:
          - WDR FÜNF
          - ROCKANTENNE

      alexa_content_provider:
        name: Select Content Provider
        icon: mdi:amazon-alexa
        options:
          - TUNEIN
          - SPOTIFY

      spotify_source:
        name: Spotify Source
        icon: mdi:spotify
        options:
          - Stereopaar
          - Schlafzimmer
          - Küche
          - Überall
          - FireTV
          - Computer

      datasheet:
        name: datasheet
        options:
          - 3.5mm pj-324m.pdf
          - 433receiver SRX882.pdf
          - 433remote he844a.pdf
          - 433socket he878.pdf
          - 433transceiver stx882.pdf
          - beacon NRF51822.pdf
          - connectors.pdf
          - DS18B20-pins.jpg
          - Dallas DS18b20.pdf
          - gesture apds9960.pdf
          - hs_color_scale.jpg
          - light TSL2561.pdf
          - motion HC-SR501.pdf
          - motion rcwl-0516.pdf
          - pir-motion-sensor.pdf
          - temp dht12.pdf

      michbaeck:    # where am I?
        name: michbaeck
        options:
          - home
          - work
          - away
          - unknown

      daily_routine:    # what am I doing?
        name: daily_routine
        options:
          - freetime_home   # when reaching home or when awake on free days
          - workday_morning   # when awake trigger
          - sleep   # when bedtime trigger
          - nightwalk   # if awake before alarm time
          - alarm_fadein    # at alarm time
          - alarm   # at alarm time
          - travel_work   # when leaving house
          - work    # when reaching work
          - preheat
          - travel_home   # when leaving work
          - freetime_away   # when leaving home after work or on free days
          - unknown
  #---------------------------------------------------------------------------#
  #= TEXT

    input_text:

      debug_states_include:
        #> initial: your_regex_pattern
        max: 100

      debug_states_exclude:
        #> initial: dotmatrixdisplay|ticker
        max: 100

      debug_services_include:
        #> initial: your_regex_pattern
        max: 100

      debug_services_exclude:
        #> initial: dotmatrixdisplay|ticker
        max: 100

      alarm_xiaomi:
        name: alarm_xiaomi
        max: 10

      ticker:   #[todo] replace with var
        name: ticker
        max: 1000

      alexa_say:
        name: alexa_say
        max: 500
  #---------------------------------------------------------------------------#
  #= DATETIME

    input_datetime:

      alarm:    # alarm time
        name: Lichtwecker Zeit
        has_date: false
        has_time: true

      leave_home:   # alarm time
        name: leave_home
        has_date: false
        has_time: true

      climate_1_start:
        name: Montag Start
        has_time: true

      climate_1_end:
        name: Montag Ende
        has_time: true

      climate_2_start:
        name: Dienstag Start
        has_time: true

      climate_2_end:
        name: Dienstag Ende
        has_time: true

      climate_3_start:
        name: Mittwoch Start
        has_time: true

      climate_3_end:
        name: Mittwoch Ende
        has_time: true

      climate_4_start:
        name: Donnerstag Start
        has_time: true

      climate_4_end:
        name: Donnerstag Ende
        has_time: true
        
      climate_5_start:
        name: Freitag Start
        has_time: true

      climate_5_end:
        name: Freitag Ende
        has_time: true

      climate_6_start:
        name: Samstag Start
        has_time: true

      climate_6_end:
        name: Samstag Ende
        has_time: true

      climate_7_start:
        name: Sonntag Start
        has_time: true

      climate_7_end:
        name: Sonntag Ende
        has_time: true
#-----------------------------------------------------------------------------#
#* AUTOMATION                                                                 #

    shell_command:
      debug_rename: mv /home/homeassistant/.homeassistant/www/debug/homeassistant_debug.txt /home/homeassistant/.homeassistant/www/debug/archive/{{ states("sensor.date")+"_"+states("sensor.time")+"_-_homeassistant_debug.log" }}

      curl: /bin/bash -c "/usr/bin/curl {{ url }}"
      curl_discovery: /bin/bash -c "/usr/bin/curl http://192.168.200.1{{ id }}/tools?cmd=discovery%2Cupdate"
      curl_esp: /bin/bash -c "/usr/bin/curl --fail-early -v http://{{ ip }}/control?cmd={{ cmd | replace('%','%25') | replace(' ','%20') | replace('ß','ss') | replace('ö','oe') | replace('ü','ue') | replace('ä','ae')  | replace('°','%20') | replace('>','%3E') }} >> /home/homeassistant/.homeassistant/curl.log 2>&1"

      alexa_pause: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e pause
      alexa_volume: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e vol:{{ volume|default(20) }}
      alexa_content: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -r '{{ content }}'
      alexa_routine: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e automation:'{{ routine }}'
      alexa_tts: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e speak:'{{ text|replace("%", " Prozent") }}'
      alexa_weather: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e weather
      alexa_traffic: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e traffic
      alexa_flashbriefing: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e flashbriefing
      alexa_goodmorning: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e goodmorning
      alexa_singasong: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e singasong
      alexa_tellstory: sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d '{{ device|default("schlafzimmer1") }}' -e tellstory
     
    variable:
      #| example variable:
        #|   name:
        #|   value|value_template: '{{ variable.state + 1 }}'
        #|   attributes:
        #|     friendly_name:
        #|     etc:
        #|   attributes_template:
        #|   restore: true
      #| example service
        #| service: variable.set_variable
        #| data:
        #|   variable: myvar
        #|   value: 'myvalue'
        #|   value_template: '{{ variable.state|int + myvalue }}'
        #|   attributes:
        #|     myattr1: 'test'
        #|     myattr2: 12
        #|   attributes_template: >-
        #|     {
        #|       "myattr1": "{{ variable.attribues.myattr1 + variable.state }}",
        #|       "myattr2": "{{ states('sensor.mysensor') }}"
        #|     }
        #|   replace_attributes: false
      #. climate_michbaeck_away:
      #.   restore: true
      #. climate_home_away:
      #.   restore: true
      dummy:
        value: 0

      start_work:
        restore: true

      bedtime:
        value: 0

      homeassistant_starttime:

      climate_bad_save:
        attributes:
          unit_of_measurement: '°C'
        restore: true
        #> value: 20
      climate_michbaeck_save:
        attributes:
          unit_of_measurement: '°C'
        restore: true
        #> value: 20
      climate_kueche_save:
        attributes:
          unit_of_measurement: '°C'
        restore: true
        #> value: 20

      climate_home_state:
        restore: true
      climate_bad_state:
        restore: true
      climate_kueche_state:
        restore: true
      climate_michbaeck_state:
        restore: true

      sun_elevation_min:
        restore: true
        attributes:
          friendly_name: Sonnenstand min
          unit_of_measurement: '°'
      sun_elevation_max:
        restore: true
        attributes:
          friendly_name: Sonnenstand max
          unit_of_measurement: '°'

      sleep_cycle:
        value: 0
        restore: true
        attributes:
          unit_of_measurement: '%'
          step:
          count:
          #. lastcount:
          lowpasscount:
          #. ratio:
          #. lastratio:
          lowpassratio:
          lastupdate:

      michbaeck_arrival:

      alexa_state:
        restore: true

      ticker:
      ticker_fx:

      light_baseline_michbaeck_1:
        restore: true
        attributes:
          unit_of_measurement: 'lx'
      light_baseline_michbaeck_2:
        restore: true
        attributes:
          unit_of_measurement: 'lx'
      light_baseline_michbaeck_3:
        restore: true
        attributes:
          unit_of_measurement: 'lx'
      light_baseline_michbaeck_4:
        restore: true
        attributes:
          unit_of_measurement: 'lx'
      light_baseline_bad:
        restore: true
        attributes:
          unit_of_measurement: 'lx'
      light_baseline_flur:
        restore: true
        attributes:
          unit_of_measurement: 'lx'
      light_baseline_kueche:
        restore: true
        attributes:
          unit_of_measurement: 'lx'
      light_baseline_aussen:
        restore: true
        attributes:
          unit_of_measurement: 'lx'

      plant_michbaeck_1_timestamp:
        restore: true
      plant_michbaeck_2_timestamp:
        restore: true

      database_check:
        restore: true

    automation:

      - id: testpush    # test
        alias: testpush
        initial_state: true
        trigger:
          platform: event
          event_type: ios.notification_action_fired
          event_data:
            actionName: TESTPUSH1
        action:
          - service: persistent_notification.create
            data:
              notification_id: testpush
              title: push received
              message: pushaction received

  #---------------------------------------------------------------------------#
  #= SYSTEM

      - id: homeassistant_shutdown  # archive custom logfile
        alias: homeassistant_shutdown
        trigger:
          - platform: homeassistant
            event: shutdown
        action:          
          - service: script.alexa_says    # voice
            data_template:
              text: Starte Homeassistant neu.
          - service: variable.set_variable    # disable alexa to not annoy on start
            data:
              variable: alexa_state
              value: 'off'
          - service: variable.set_variable    # save set climate temps, otherwise old values might be restored on startup
            data_template:
              variable: climate_michbaeck_save
              value_template: >-
                {% if is_state("binary_sensor.climate_michbaeck_helper", "on") %}
                  {{ state_attr("climate.michbaeck", "temperature") }}
                {% else %}
                  {{ states("variable.climate_michbaeck_save") }}
                {% endif %}
          - service: variable.set_variable    # save set climate temps, otherwise old values might be restored on startup
            data_template:
              variable: climate_kueche_save
              value_template: >-
                {% if is_state("binary_sensor.climate_kueche_helper", "on") %}
                  {{ state_attr("climate.kueche", "temperature") }}
                {% else %}
                  {{ states("variable.climate_kueche_save") }}
                {% endif %}
          - service: variable.set_variable    # save set climate temps, otherwise old values might be restored on startup
            data_template:
              variable: climate_bad_save
              value_template: >-
                {% if is_state("binary_sensor.climate_bad_helper", "on") %}
                  {{ state_attr("climate.bad", "temperature") }}
                {% else %}
                  {{ states("variable.climate_bad_save") }}
                {% endif %}
          - service: automation.trigger
            data:
              entity_id:
                - automation.motion_kueche_light_on
                - automation.motion_flur_light_on
          - service: shell_command.debug_rename   # add datetime to logfile and move to archive folder

      - id: homeassistant_start  # signalize start
        alias: homeassistant_start
        trigger:
          - platform: homeassistant
            event: start
        action:
          - service: mqtt.publish
            data:
              topic: esp01/cmd
              payload: discovery,update
          - service: mqtt.publish
            data:
              topic: esp02/cmd
              payload: discovery,update
          - service: mqtt.publish
            data:
              topic: esp04/cmd
              payload: discovery,update
          - service: mqtt.publish
            data:
              topic: esp05/cmd
              payload: discovery,update
          - service: mqtt.publish
            data:
              topic: esp07/cmd
              payload: discovery,update
          - service: mqtt.publish
            data:
              topic: esp10/cmd
              payload: discovery,update
          - service: mqtt.publish
            data:
              topic: esp20/cmd
              payload: discovery,update
          - service: mqtt.publish
            data:
              topic: esp22/cmd
              payload: discovery,update
          - service: frontend.set_theme
            data:
              name: michbaeck_material
          - service: light.turn_on    # flash lights to indicate startup
            data:
              entity_id: 
                - light.stehlampe
                - light.regal
              flash: short
          - service: script.ticker_generator
            data:
              text: Homeassistant gestartet.
          - delay: '00:00:10'
          - service: variable.set_variable    # reenable alexa after some delay
            data:
              variable: alexa_state
              value: 'on'
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # voice
            data:
              text: Homeassistant gestartet.
          - service: variable.set_variable
            data_template:
              variable: homeassistant_starttime
              value: >-
                {{ now().timestamp()|int }}
          #> - service: script.turn_off
          #>   data:
          #>     entity_id:
          #>       - script.light_animation_test
          #>       - script.light_animation_test_2
          #> - service: script.auto_color_michbaeck_1

      - id: homeassistant_cleanup   # tidy up database when asleep
        alias: homeassistant_cleanup
        trigger:
          platform: state
          entity_id: input_boolean.asleep
          to: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.homeassistant_cleanup (\"" + state_attr("automation.homeassistant_cleanup", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}
          - service: recorder.purge
            data_template:
              keep_days: 7
              # repack: true

      - id: homeassistant_database_check
        alias: homeassistant_database_check
        # initial_state: true
        trigger:
          - platform: homeassistant
            event: start
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {% if not is_state("variable.database_check", "ok") %}
                  {% set x = " Waiting 10 seconds to ensure restored value." %}
                {% else %}
                  {% set x = "" %}
                {% endif %}

                {{ now()|string + " - \"automation.homeassistant_database_check\" triggered. state of variable.database_check is: \"" + states("variable.database_check")|string + "\"." + x }}
          - condition: template
            value_template: >-
              {{ not is_state("variable.database_check", "ok") }} 
          - delay:
              seconds: 10
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - \"automation.homeassistant_database_check\" - 10 seconds passed. state of variable.database_check is: \"" + states("variable.database_check")|string + "\"." }}
          - condition: template
            value_template: >-
              {{ not is_state("variable.database_check", "ok") }}          
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # voice
            data_template:
              # device: Schlafzimmer
              text: Datenbank ist fehlerhaft, Ich setze alle Einstellungen zurück.
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - \"automation.homeassistant_database_check\" triggered. state of variable.database_check is: \"" + states("variable.database_check")|string + "\". restoring defaults" }}
          - service: script.homeassistant_defaults
          - service: persistent_notification.create
            data_template:
              notification_id: homeassistant_defaults
              title: Datenbank Fehler
              message: >-
                {{ "Achtung! Datenbank konnte nicht gelesen werden. Es wurden Standardwerte gesetzt. Bitte überprüfe deinen Wecker." }}
          - service: variable.set_variable    # reenable alexa after some delay
            data:
              variable: alexa_state
              value: 'on'
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # voice
            data_template:
              # device: Schlafzimmer
              text: >-
                {{ "Datenbank konnte nicht gelesen werden, ich habe Standardwerte gesetzt, Bitte überprüfe deinen Wecker." }}

      - id: theme_selector    # apply theme via dropdown #todo create theme
        alias: theme selector
        trigger:
          - platform: state
            entity_id: input_select.theme
        action:
          - service: frontend.set_theme
            data_template:
              name: >-
                {{ states("input_select.theme") }}
          - service: script.ticker_generator
            data_template:
              text: >-
                {{ "Theme " ~ states("input_select.theme") ~ " aktiviert." }}
          - service: frontend.reload_themes

      - id: homeassistant_debug_states
        alias: homeassistant_debug_states
        trigger: 
          - platform: event
            event_type: state_changed
        condition:
          condition: template
          value_template: >-
            {% set string = trigger.event.data.entity_id|string %}
            {% set include = states("input_text.debug_states_include") %}
            {% set exclude = states("input_text.debug_states_exclude") %}

            {{
              is_state("input_boolean.debug_states", "on") and
              trigger.event.data.old_state.state != trigger.event.data.new_state.state and
              string|regex_search(include) and not
              string|regex_search(exclude) and not
              string|regex_search("script\.")
            }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {% if is_state("input_boolean.debug_attributes", "on") %}
                  {% set old = trigger.event.data.old_state %}
                  {% set new = trigger.event.data.new_state %}
                {% else %}
                  {% set old = trigger.event.data.old_state.state %}
                  {% set new = trigger.event.data.new_state.state %}
                {% endif %}

                {{ 
                  now()|string + 
                  " - " + 
                  trigger.event.data.entity_id|string + 
                  " (\"" + 
                  state_attr(trigger.event.data.entity_id|string, "friendly_name") + 
                  "\") changed its state from \"" + 
                  old|string + 
                  "\" to \"" +
                  new|string +
                  "\""
                }}

      - id: homeassistant_debug_services
        alias: homeassistant_debug_services
        trigger: 
          - platform: event
            event_type: call_service
        condition:
          condition: template
          value_template: >-
            {% set service =  trigger.event.data.domain|string + "." + trigger.event.data.service|string %}
            {% set include = states("input_text.debug_services_include") %}
            {% set exclude = states("input_text.debug_services_exclude") %}
            
            {{ 
              is_state("input_boolean.debug_services", "on") and
              service|regex_search(include) and not
              service|regex_search(exclude) and not
              service|regex_search("notify\.homeassistant_debug")
            }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {% set service =  trigger.event.data.domain|string + "." + trigger.event.data.service|string %}

                {{ 
                  now()|string + " - service \"" + 
                  service +
                  " triggered with content: " + 
                  trigger.event.data.service_data|string
                }}

      - id: update_notification   # [debug on] notifications when update available
        alias: 'update_notification'
        trigger:
          - platform: state
            entity_id: updater.updater
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.update_notification (\"" + state_attr("automation.update_notification", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}
          - service: script.ticker_generator
            data_template:
              text: >-
                Es steht ein Update auf Version {{ states("updater.updater")|string }} zur Verfügung, deine aktuelle Version ist {{ states("sensor.current_version")|string }}.
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says
            data_template:
              # device: Schlafzimmer
              text: >-
                Es steht ein Update auf Version {{ states("updater.updater")|string }} zur Verfügung, deine aktuelle Version ist {{ states("sensor.current_version")|string }}.
          - service: notify.iospush
            data_template:
              message: >-
                Es steht ein Update auf Version {{ states("updater.updater")|string }} zur Verfügung, deine aktuelle Version ist {{ states("sensor.current_version")|string }}.
              title: 'Update verfügbar'
              data:
                push:
                  sound: 'silent.wav'
          - service: persistent_notification.create
            data_template:
              notification_id: update_notification
              title: Datenbank Fehler
              message: >-
                Es steht ein Update auf Version {{ states("updater.updater")|string }} zur Verfügung, deine aktuelle Version ist {{ states("sensor.current_version")|string }}.
  #---------------------------------------------------------------------------#
  #= SLEEP/WAKEUP

      # - id: bedtime_reminder
      #   alias: bedtime_reminder
      #   trigger:
      #     - platform: template
      #       value_template: >-
      #         {% set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) %}
      #         {% set timeleave = as_timestamp(strptime(states("input_datetime.alarm"),"%H:%M:%S")) %}
      #         {% set timediff = ((timeleave - timenow)/60) %}

      #         {% if timediff|int <= 15 %}
      #           {% set divisor = 5 %}
      #         {% elif  timediff|int <= 50 %}
      #           {% set divisor = 10 %}
      #         {% else %}
      #           {% set divisor = 60 %}
      #         {% endif %}

      #         {{ 
      #           (
      #             is_state("sensor.daily_routine","freetime_home")
      #             or is_state("sensor.daily_routine","alarm")
      #             or
      #               (
      #                 is_state("sensor.daily_routine","freetime_home")
      #                 and is_state("automation.wecker_fadein", "on")
      #               )
      #           )
      #           and timediff|int is divisibleby(divisor|int)
      #           and timediff|int >= 0
      #         }}
      #   condition:
      #     condition
      #   action:
      #     - service: notify.homeassistant_debug
      #       data_template:
      #         message: >-
      #           {{ now()|string + " - automation.bedtime_reminder (\"" + state_attr("automation.bedtime_reminder", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}

      - id: nightlight_on
        alias: nightlight_on
        trigger:
          - platform: state 
            entity_id: binary_sensor.motion_michbaeck_2
            to: 'on'
        condition:
          condition: template
          value_template: >-
            {{ 
              is_state("sensor.daily_routine", "sleep")
            }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.nightlight_on (\"" + state_attr("automation.nightlight_on", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}  
          - service: script.daily_routine   # update routine status
            data:
              event: nightlight
          - service: light.turn_on
            data:
              entity_id:
                - light.regal
                - light.grosses_licht
              brightness: 50
              rgb_color: [255,50,0]
              transition: 5

      - id: nightlight_off    # turn back to sleep routine, when back in bed or when turning off lights manually
        alias: nightlight_off
        trigger:
          - platform: numeric_state
            entity_id: sensor.bed_load
            above: 50
            for:
              seconds: 5
          - platform: state
            entity_id:
              - light.regal
              - light.grosses_licht
            to: 'off'
        condition:
          condition: template
          value_template: >-
            {{ 
              is_state("sensor.daily_routine", "nightwalk")
            }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.nightlight_off (\"" + state_attr("automation.nightlight_off", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}  
          - service: script.daily_routine   # update routine status
            data:
              event: bedtime
          - service: light.turn_off
            data:
              entity_id:
                - light.regal
                - light.grosses_licht
              transition: 5

      - id: bedtime_trigger_auto    # turns everything off when laying in bed for 1 minute
        alias: 'bedtime_trigger_auto'
        trigger:
          - platform: numeric_state
            entity_id: sensor.bed_load
            above: 50
            for:
              seconds: 60
        condition:
          condition: and
          conditions:
            - condition: or
              conditions:
                - condition: sun    # after sunset
                  after: sunset
                - condition: sun    # before sunrise
                  before: sunrise
            - condition: template   # home, not asleep, not in the morning
              value_template: >-
                {{
                  is_state("input_boolean.asleep", "off")
                  and is_state("sensor.michbaeck", "home")
                  and not is_state("sensor.daily_routine", "alarm")
                  and not is_state("sensor.daily_routine", "alarm_fadin")
                  and not is_state("sensor.daily_routine", "workday_morning")
                  and trigger.to_state.state|default(0)|int > trigger.from_state.state|default(0)|int
                }}
        action:
          # flash lights
          - service: light.turn_on                                                    
            data:
              entity_id: 
                - light.bett
                - light.regal
              flash: short
          - delay:
               seconds: 10
          - condition: numeric_state
            entity_id: sensor.bed_load
            above: 50
          - service: script.bedtime_actions

      - id: bedtime_actions   # turn lights, music, climate off if confirmed
        alias: 'bedtime_actions'
        initial_state: true
        trigger:    # if push received
          - platform: event
            event_type: ios.notification_action_fired
            event_data:
              actionName: BEDTIME
        action:
          - service: script.bedtime_actions
          - service: variable.set_variable
            data:
              variable: start_work
              value: 0

      - id: bed_load_calibration
        alias: 'bed_load_calibration'
        initial_state: 'on'
        trigger:
          - platform: time_pattern
            hours: '*'
        condition:
          condition: template
          value_template: >-
            {{
              states("sensor.bed_load_raw")|default(0)|float > 0
              and
              (
                (is_state("input_boolean.asleep", "on") and states("sensor.bed_load")|default(0)|int > 40 and states("sensor.bed_load")|default(0)|int < 80)
                or
                (is_state("input_boolean.asleep", "off") and states("sensor.bed_load")|default(0)|int > -10 and states("sensor.bed_load")|default(0)|int < 10)
              )
            }}
        action:
          # - wait_template: >-
          #     {{ states("sensor.sleep_cycle_ratio")|float = 0 }}
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + " - \"automation.bed_load_calibration\" triggered - current values are
                  - input_number.bed_load_raw_min = \"" + states("input_number.bed_load_raw_min")|default(0)|string + "\"
                  - input_number.bed_load_raw_max = \""  + states("input_number.bed_load_raw_max")|default(0)|string + "\""
                }}
          - service: input_number.set_value
            data_template:
              entity_id: >-
                {% if is_state("input_boolean.asleep", "on") and states("sensor.bed_load")|default(0)|int > 40 and states("sensor.bed_load")|default(0)|int < 80 %}
                  input_number.bed_load_raw_max
                {% elif is_state("input_boolean.asleep", "off") and states("sensor.bed_load")|default(0)|int > -10 and states("sensor.bed_load")|default(0)|int < 10  %}
                  input_number.bed_load_raw_min
                {% endif %}
              value: >-
                {{ states("sensor.bed_load_raw")|default(0)|int }}
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + " - \"automation.bed_load_calibration\" - new values are
                  - input_number.bed_load_raw_min = \"" + states("input_number.bed_load_raw_min")|default(0)|string + "\"
                  - input_number.bed_load_raw_max = \""  + states("input_number.bed_load_raw_max")|default(0)|string + "\""
                }}

      - id: sleep_cycle_calculations   # calculate bed motion diff
        alias: 'sleep_cycle_calculations'
        initial_state: true
        trigger:
          - platform: state
            entity_id: sensor.bed_load_raw
        action:
          - service: variable.set_variable    # calculate movement and save 'step'
            data_template:
              variable: sleep_cycle
              replace_attributes: false
              attributes_template: >-
                {% set from_raw = trigger.from_state.state|float %}
                {% set to_raw = trigger.to_state.state|float %}

                {% set raw_min = states("input_number.bed_load_raw_min")|default(800)|int %}
                {% set raw_max = states("input_number.bed_load_raw_max")|default(1200)|int %}
                {% set raw_range = raw_max - raw_min %}
                {% set ref = states("input_number.bed_load_ref_weight")|default(65)|int %}

                {% set from_load = ((from_raw - raw_min) * ref / raw_range)|float|round(2) %}
                {% set to_load = ((to_raw - raw_min) * ref / raw_range)|float|round(2) %}

                {# compensate sensor failures #}
                {% if from_load < 0 %}
                  {% set from_load = from_load + from_load|int*-1 +1 %}
                {% endif %} 
                {% if to_load < 0 %}
                  {% set to_load = to_load + to_load|int*-1 +1 %}
                {% endif %} 
                
                {% set step =
                  (to_load - from_load)*1000
                %}

                {% if step < -50000 or step > 50000 %}
                  {% set step = 0 %}
                {% endif %}

                {{
                  "{\"step\":" + step|int|string +"}"
                }}

          - service: variable.set_variable    # calculate count, ratio and filters
            data_template:
              variable: sleep_cycle
              replace_attributes: false
              attributes_template: >-
                {% set step = state_attr("variable.sleep_cycle", "step")|default(0)|float %}

                {% if step < 0 %}
                  {% set step = step*-1 %}
                {% endif %}

                {# update movement counter #}
                {% set lastcount = state_attr("variable.sleep_cycle", "count")|default(0)|float %}
                {# if threshold exceeded, increase #}
                {% if step > states("input_number.bed_load_sensitivity")|default(100)|int %}
                  {% set newcount =
                    [
                      [lastcount + step/1000, 100]|min,0
                    ]|max|float 
                  %}
                {# if below threshold, decrease #}
                {% else %}
                  {% set newcount =
                    [
                      [lastcount*0.99, lastcount-0.05]|min, 0
                    ]|max|float
                  %}
                {% endif %}

                {# apply lowpass filter to counter #}
                {% set B = 1/40 %}
                {% set A = 1-B %}

                {% set lastlowpass = state_attr("variable.sleep_cycle", "lowpasscount")|default(lastcount)|float %}

                {% set newlowpass =
                    A|float * lastlowpass|float + 
                    B|float * newcount|float
                %}
                {% if newlowpass < 0.3 %}
                  {% set newlowpass = 0 %}
                {% endif %}

                {# calculate lowpass for ratio #}
                {% set oldratio = state_attr("variable.sleep_cycle", "lowpassratio")|default(0)|float %}
                
                {% set newratio =
                   A|float * oldratio|float + 
                   B|float * states("sensor.sleep_cycle_ratio")|default(0)|float
                %}
                {% if newratio < 0.3 %}
                  {% set newratio = 0 %}
                {% endif %}
                
                {# update ratio only every 5sec to not decrease too fast #}
                {% set lastupdate = state_attr("variable.sleep_cycle", "lastupdate")|int %}
                
                {#. if now().timestamp()|int - lastupdate|int >= 5 #}
                  {% set lowpassratio = newratio %}
                  {#. set lastupdate = now().timestamp()|int #}
                {#. else #}
                  {#. set lowpassratio = oldratio #}
                {#. endif #}
                
                {{
                  "{
                    \"count\":" + newcount|float|round(2)|string + ",
                    \"lowpasscount\":" + newlowpass|float|round(2)|string + ",
                    \"lowpassratio\":" + lowpassratio|float|round(2)|string + ",
                    \"lastupdate\":" + lastupdate|string + "
                  }"
                }}
          - service: variable.set_variable    # copy attribute to state
            data_template:
              variable: sleep_cycle
              replace_attributes: false
              value: >-
                {{ state_attr("variable.sleep_cycle", "lowpassratio")|default(0) }}

      - id: wecker_helper   # disable light alarm on weekend/holiday/vacation
        alias: 'wecker_helper'
        #. initial_state: true
        trigger:
          - platform: state   # check on state change
            entity_id: binary_sensor.alarm_helper
          - platform: state   # check when user toggles
            entity_id: input_boolean.wecker_toggle
          # - platform: homeassistant   # check on startup
            # event: start
        condition:
          condition: state
          entity_id: input_boolean.wecker_toggle
          state: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.wecker_helper (\"" + state_attr("automation.wecker_helper", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}
          - service: script.wecker_on_off

      - id: wecker_warning    # displays message when alarm automatic off (input_boolean.wecker_toggle)
        alias: 'wecker_warning'
        #. initial_state: true
        trigger:
          - platform: state
            entity_id: automation.wecker_fadein
          - platform: state
            entity_id: binary_sensor.alarm_helper
          - platform: state
            entity_id: input_boolean.wecker_toggle
          - platform: homeassistant
            event: start
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.wecker_warning triggered by " + trigger.entity_id + " changing its state FROM: " + trigger.from_state.state|string + " TO: " + trigger.to_state.state|string }}
          - service: persistent_notification.dismiss
            data:
              notification_id: wecker_warning
          - condition: state
            entity_id: input_boolean.wecker_toggle
            state: 'off'
          - service: persistent_notification.create
            data_template:
              notification_id: wecker_warning
              title: Wecker Hinweis
              message: >-
                {% if is_state("automation.wecker_fadein", "off") %}
                  {% set x = "AUS" %}
                {% else %}
                  {% set x = "AN" %}
                {% endif %}
                {{- 
                  "Achtung! Wecker-Automatik ist deaktiviert.
                  Wecker ist derzeit " + x
                }}

      - id: wecker_fadein   # [debug on]trigger light alarm, if at home and start with increasing brightness
        alias: 'wecker_fadein'
        trigger:    # trigger when time = alarmtime from GUI reduced by fade in duration
          platform: template
          value_template: >
            {{
              states("sensor.time") == ( state_attr("input_datetime.alarm", "timestamp") - (states("input_number.wecker_fading")|int*60) )|timestamp_custom("%H:%M", False) 
            }}
        condition:
          condition: state
          entity_id: sensor.michbaeck
          state: 'home'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.wecker_fadein (\"" + state_attr("automation.wecker_fadein", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: script.wecker_fadein

      - id: wecker_alarm    # turn on radio when either alarm time reached or a peak of motion detected
        alias: 'wecker_alarm'
        trigger:
          - platform: state
            entity_id: binary_sensor.sleep_cycle_helper
            to: 'on'
        condition:
          condition: state
          entity_id: sensor.daily_routine
          state: alarm_fadein
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + " - automation.wecker_alarm triggerd by " + trigger.entity_id +
                  "  - Wecker ausgelöst um " + states("sensor.time")|string + "." +
                  "  - Last beträgt " + states("sensor.bed_load")|float|round(2)|string + "kg." +
                  "  - Ratio beträgt " + states("sensor.sleep_cycle_ratio")|int|string + "%." +
                  "  - Counter: " + states("sensor.sleep_cycle")|string +
                  "  - newRatio beträgt " + states("sensor.sleep_cycle_ratio_lowpass")|int|string + "%." +
                  "  - newCounter: " + states("input_number.sleep_cycle_lowpass")|string
                }}
          - service: script.wecker_alarm

      - id: wecker_snooze   # rings alarm every 10 min, can be snoozed
        alias: 'wecker_snooze'
        trigger:    # triggers every 10 minutes between alarm-time and leave-time
          - platform: template
            value_template: >-
              {% set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) -%}
              {% set timeleave = as_timestamp(strptime(states("input_datetime.leave_home"),"%H:%M:%S")) -%}
              {% set timediff = ((timeleave - timenow)/60) -%}

              {{ 
                is_state("sensor.daily_routine","alarm")
                and timediff|int is divisibleby(10)
              }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {%- set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) -%}
                {%- set timeleave = as_timestamp(strptime(states("input_datetime.leave_home"),"%H:%M:%S")) -%}
                {%- set timediff = ((timeleave - timenow)/60) -%}
                {{ 
                  now()|string + " - automation.wecker_snooze triggered." +
                  "  - TIMENOW: " + timenow|string + 
                  "  - TIMELEAVE: " + timeleave|string +
                  "  - TIMEDIFF: " + timediff|string +
                  "  - run script.wecker_snooze"
                }}
          - service: script.wecker_snooze

      - id: wecker_snooze_action_1    # snoozes alarm for 10 minutes
        alias: 'wecker_snooze_action_1'
        initial_state: true
        trigger:    # if push received
          platform: event
          event_type: ios.notification_action_fired
          event_data:
            actionName: WECKER_SNOOZE
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.wecker_snooze_action_1 triggered. received push snooze action 1. stopping alarm." }}
          - service: script.turn_off
            entity_id:
              - script.wecker_snooze
              - script.wecker_snooze_loop_1
              - script.wecker_snooze_loop_2
          - service: script.alarm_xiaomi_stop

      - id: wecker_snooze_action_2    # stops alarm scripts, but only, if "riddle" solved
        alias: 'wecker_snooze_action_2'
        initial_state: true
        trigger:    # if push received
          platform: event
          event_type: ios.notification_action_fired
          event_data:
            actionName: WECKER_STOP
        action:
          - service: script.turn_off
            entity_id:
              - script.wecker_snooze
              - script.wecker_snooze_loop_1
              - script.wecker_snooze_loop_2
          - service: script.alarm_xiaomi_stop
          - service: script.alexa_says
            data_template:
              text: >-
                {% if trigger.event.data.textInput|default("NA") == as_timestamp(now())|timestamp_custom("%A") %}
                  {{ "Wecker ausgeschaltet." }}
                {% else %}
                  {{ "Falsche Eingabe, Wecker klingelt gleich erneut." }}
                {% endif %}
          - condition: template
            value_template: >-
              {{ trigger.event.data.textInput|default("NA") == as_timestamp(now())|timestamp_custom("%A") }}
          #. - service: script.turn_off
          #.   entity_id: script.wecker_alarm
          - service: script.wakeup

      - id: set_awake   # stops alarm once got out of bed
        alias: 'set_awake'
        trigger:
          - platform: state
            entity_id:
              - binary_sensor.motion_michbaeck_1
            to: 'on'
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.asleep
              state: 'on'
            - condition: time
              after: '00:00:00'
              before: '18:00:00'
            - condition: template   # only after alarm time
              value_template: >-
                {{
                  states("sensor.time") > ( 
                    state_attr("input_datetime.alarm", "timestamp")|default(0) - 
                    (states("input_number.wecker_fading")|default(0)|int*60) 
                  )|timestamp_custom("%H:%M", False) 
                  and 
                  is_state("automation.wecker_fadein", "on")
                  and not 
                  is_state("sensor.daily_routine", "nightwalk") 
                }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.set_awake (\"" + state_attr("automation.set_awake", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: script.wakeup

      - id: morning_radio_move    # moves radio from Schlafzimmer to Kueche when door opens
        alias: 'morning_radio_move'
        trigger:
          - platform: state
            entity_id: binary_sensor.door_michbaeck
            from: 'off'
            to: 'on'
        condition:
          condition: and
          conditions:
            - condition: template
              value_template: >-
                {% set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) %}
                {% set timeleave = as_timestamp(strptime(states("input_datetime.leave_home"),"%H:%M:%S")) %}
                {% set timediff = ((timeleave - timenow)/60) %}
                {{ timediff > 5 }}
            - condition: state
              entity_id: sensor.daily_routine
              state: 'workday_morning'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.morning_radio_move (\"" + state_attr("automation.morning_radio_move", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          # - service: script.alexa_play_content    # start radio
          #   data_template:
          #     device: Überall
          #     content: 'WDR FÜNF'
          - service: media_player.play_media
            data:
              entity_id: media_player.uberall
              media_content_id: "WDR FÜNF"
              media_content_type: TUNEIN
 
      - id: leave_home_reminder   # voice reminder every 10 min when to leave
        alias: 'leave_home_reminder'
        trigger:
          - platform: template
            value_template: >-
              {% set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) %}
              {% set timeleave = as_timestamp(strptime(states("input_datetime.leave_home"),"%H:%M:%S")) %}
              {% set timediff = ((timeleave - timenow)/60) %}

              {% if timediff|int <= 15 %}
                {% set divisor = 5 %}
              {% elif  timediff|int <= 50 %}
                {% set divisor = 10 %}
              {% else %}
                {% set divisor = 60 %}
              {% endif %}

              {{ 
                (
                  is_state("sensor.daily_routine","workday_morning")
                  or is_state("sensor.daily_routine","alarm")
                  or
                    (
                      is_state("sensor.daily_routine","workday_morning")
                      and is_state("automation.wecker_fadein", "on")
                    )
                )
                and timediff|int is divisibleby(divisor|int)
                and timediff|int >= 0
              }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.leave_home_reminder (\"" + state_attr("automation.leave_home_reminder", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: script.wecker_voice
            data_template:
              text: >-
                {% set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) -%}
                {% set timeleave = as_timestamp(strptime(states("input_datetime.leave_home"),"%H:%M:%S")) -%}
                {% set timediff = ((timeleave - timenow)/60) -%}
                
                {# ["Michbaeck, ", ""]|random #}
                {%- if timediff|int == 0 -%}
                  du musst jetzt los
                  {%- if state_attr("weather.dark_sky", "forecast")[0].condition|string in ["rainy", "snowy", "snowy-rainy", "pouring", "lightning", "lightning-rainy", "hail"] -%}
                    {{- 
                      [
                        ", nimm einen Regenschirm mit.", 
                        ", du solltest einen Regenschirm mitnehmen.", 
                        ", pack einen Schirm ein.", 
                        ", du könntest einen Regenschirm brauchen."
                      ]|random 
                    -}}
                  {%- endif -%}
                {%- elif timediff|int <= 50 -%}
                  {{
                    [
                      "du musst in " + timediff|int|string + " Minuten los.",
                      "du hast noch " + timediff|int|string + " Minuten."
                     ]|random
                  }}
                {%- elif timediff|int <= 60 -%}
                  {{
                    [
                      "du musst in einer Stunde los.",
                      "du hast noch eine Stunde."
                     ]|random
                  }}
                {% else %}
                  {{
                    [
                      "du musst in " + (timediff|int/60)|round|string + " Stunden los.",
                      "du hast noch " + (timediff|int/60)|round|string + " Stunden."
                     ]|random
                  }}
                {%- endif %}
          - condition: template
            value_template: >- 
                {% set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) -%}
                {% set timeleave = as_timestamp(strptime(states("input_datetime.leave_home"),"%H:%M:%S")) -%}
                {% set timediff = ((timeleave - timenow)/60) -%}
                {{ timediff|int <= 5 }}
          - service: script.all_media_off
  #---------------------------------------------------------------------------#
  #= TRACKING

      - id: location_update   # update sensor.michbaeck on location changes
        alias: location_update
        trigger:
          - platform: state
            entity_id:
              - device_tracker.beacon_home
              - device_tracker.beacon_work
              - device_tracker.cb58345aa18f4028a72da9fb0c30e6f9   # iphone geofency
        condition:
          condition: template
          value_template: >-
            {% set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) %}
            {% set timetrigger = as_timestamp(strptime(as_timestamp(trigger.to_state.last_changed)|timestamp_custom("%H:%M",true),"%H:%M")) %}
            {% set window = (timenow-timetrigger)/60 > 10 %}

            {%- if trigger.entity_id == 'device_tracker.beacon_home' and trigger.to_state.state == 'home' -%}
              {%- set x = "home" -%}
            {%- elif trigger.entity_id == 'device_tracker.beacon_work' and trigger.to_state.state == 'work' -%}
              {%- set x = "work" -%}
            {%- elif trigger.entity_id == 'device_tracker.beacon_work' and trigger.to_state.state == 'not_home' and window == true -%}
              {%- set x = "away" -%}
            {%- elif trigger.entity_id == 'device_tracker.cb58345aa18f4028a72da9fb0c30e6f9' and trigger.to_state.state == 'not_home' -%}
              {%- set x = "away" -%}
            {%- elif trigger.entity_id == 'device_tracker.cb58345aa18f4028a72da9fb0c30e6f9' and not trigger.to_state.state == 'home' -%}
              {%- set x = trigger.to_state.state  -%}
            {%- endif -%}

            {{
              (
                (
                  trigger.entity_id == 'device_tracker.beacon_home'
                  and trigger.to_state.state == 'home'
                )
                or
                (
                  trigger.entity_id == 'device_tracker.beacon_work'
                  and trigger.to_state.state == 'work'
                )
                or
                (
                  trigger.entity_id == 'device_tracker.cb58345aa18f4028a72da9fb0c30e6f9'
                  and not trigger.to_state.state == 'home'
                )
              )
              and states("input_select.michbaeck") != x
            }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.location_update triggered by " + trigger.entity_id + " - "}}
                  {%- set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) -%}
                  {%- set timetrigger = as_timestamp(strptime(as_timestamp(trigger.to_state.last_changed)|timestamp_custom("%H:%M",true),"%H:%M")) -%}
                  {%- set window = (timenow-timetrigger)/60 > 10 -%}

                  {{- "Location update von: " + states("input_select.michbaeck") + " zu: " -}}

                  {%- if trigger.entity_id == 'device_tracker.beacon_home' and trigger.to_state.state == 'home' -%}
                    {%- set x = "home" -%}
                  {%- elif trigger.entity_id == 'device_tracker.beacon_work' and trigger.to_state.state == 'work' -%}
                    {%- set x = "work" -%}
                  {%- elif trigger.entity_id == 'device_tracker.beacon_work' and trigger.to_state.state == 'not_home' and window == true -%}
                    {%- set x = "away" -%}
                  {%- elif trigger.entity_id == 'device_tracker.cb58345aa18f4028a72da9fb0c30e6f9' and trigger.to_state.state == 'not_home' -%}
                    {%- set x = "away" -%}
                  {%- elif trigger.entity_id == 'device_tracker.cb58345aa18f4028a72da9fb0c30e6f9' and not trigger.to_state.state == 'home' -%}
                    {%- set x = trigger.to_state.state  -%}
                  {%- endif -%}

                  {{x}}
          - service: input_select.select_option
            data_template:  
              entity_id: input_select.michbaeck
              option: >-
                {% set timenow = as_timestamp(strptime(states("sensor.time"),"%H:%M")) %}
                {% set timetrigger = as_timestamp(strptime(as_timestamp(trigger.to_state.last_changed)|timestamp_custom("%H:%M",true),"%H:%M")) %}
                {% set window = (timenow-timetrigger)/60 > 10 %}

                {%- 
                  if trigger.entity_id == 'device_tracker.beacon_home'
                  and trigger.to_state.state == 'home'
                -%}
                  home
                {%- 
                  elif trigger.entity_id == 'device_tracker.beacon_work'
                  and trigger.to_state.state == 'work'
                -%}
                  work
                {%- 
                  elif trigger.entity_id == 'device_tracker.beacon_work'
                  and trigger.to_state.state == 'not_home'
                  and window == true
                -%}
                  away
                {%- 
                  elif trigger.entity_id == 'device_tracker.cb58345aa18f4028a72da9fb0c30e6f9'
                  and trigger.to_state.state == 'not_home'
                -%}
                  away
                {%- 
                  elif trigger.entity_id == 'device_tracker.cb58345aa18f4028a72da9fb0c30e6f9'
                  and not trigger.to_state.state == 'home'
                -%}
                  {{ trigger.to_state.state }}
                {%- endif -%}
          - condition: state
            entity_id: input_select.michbaeck
            state: work
          - service: input_select.select_option
            data:  
              entity_id: input_select.daily_routine
              option: work

      - id: michbaeck_arrival_work
        alias: michbaeck_arrival_work
        trigger:
          - platform: state 
            entity_id: sensor.michbaeck
            to: work
        condition:
          condition: template
          value_template: >-
            {# (now().hour*60 + now().minute)|int < states("variable.start_work")|int #}
            {{ states("variable.start_work")|int == 0 }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.michbaeck_arrival_work (\"" + state_attr("automation.michbaeck_arrival_work", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}
          - service: variable.set_variable
            data_template:
              variable: start_work
              value: >-
                {{ (now().hour*60 + now().minute)|int }}

      - id: michbaeck_preheat    # when leaving office for 10min + after 15:00, set routine to travel_home (-> climate on)
        alias: michbaeck_preheat
        trigger:
          - platform: state
            entity_id: sensor.time
        condition:
          condition: template
          value_template: >-
            {# arrival work + 9 hours - 30min/deg #}
            
            {% set now2 = (now().hour*60 + now().minute)|int %}
            {% set start = states("variable.start_work")|int %}
            {% set tempdiff = states("variable.climate_michbaeck_save")|float - states("sensor.temp_michbaeck")|float %}
            {% set heattime = start|float + 9*60 - (tempdiff|float*0.5*60)|round(1) %}

            {{ 
              is_state("sensor.michbaeck","work") and 
              now2|int >= heattime|int 
            }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {%
                  set tempdiff = states("variable.climate_michbaeck_save")|float - 
                  states("sensor.temp_michbaeck")|float 
                %}

                {{ 
                  now()|string + " - automation.michbaeck_preheat (\"" + 
                  state_attr("automation.michbaeck_preheat", "friendly_name") + "\") triggered." +
                  " Try to heat up " + tempdiff|round(1)|string + "°C"
                }}         
          - service: script.daily_routine
            data:
              event: preheat

      #[test] when leaving work → travel_home
      - id: michbaeck_travel_home    # when leaving office for 10min + after 16:00, set routine to travel_home (-> climate on)
        alias: michbaeck_travel_home
        trigger:
          - platform: state
            entity_id: device_tracker.beacon_work
            to: not_home
            for:
              minutes: 10
        condition:
          condition: time
          after: '16:00'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.michbaeck_travel_home (\"" + state_attr("automation.michbaeck_travel_home", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: script.daily_routine
            data:
              event: leave_work

      - id: michbaeck_arrival_home    # set state to home on arrival to enable/disable other automations
        alias: michbaeck_arrival_home
        initial_state: true
        trigger:    # when michbaeck arrives
          platform: state
          entity_id: sensor.michbaeck
          to: 'home'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.michbaeck_arrival_home (\"" + state_attr("automation.michbaeck_arrival_home", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: script.daily_routine
            data:
              event: arrive_home
          - service: variable.set_variable
            data:
              variable: start_work
              value: 0
          - service: homeassistant.turn_on    # switch on light and PC
            data:
              entity_id:
                - switch.computer
                - light.michbaeck_auto
                - input_boolean.michbaeck_arrival
                - automation.auto_color_michbaeck_1
          #! - service: script.alexa_volume    # set radio volume
            #! data:
            #!   device: Stereopaar
            #!   volume: '35'
          #! - service: script.alexa_play    # play radio
            #! data:
            #!   device: Stereopaar
            #!   content: 'WDR FÜNF'
          - service: notify.iospush   # send push (iospush = iphone+ipad)
            data_template:
              message: 'Computer/Radio/Licht eingeschaltet. Alarm deaktiviert.'
              title: 'Wohnung betreten'
              data:
                push:
                  sound: 'door_chime.wav'
          - wait_template: >-
              {{ is_state("binary_sensor.door_michbaeck", "on") }}
          - delay:
              seconds: 5
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # alexa tts text
            data_template:
              text: >-
                {{-
                  [
                    "Hallo Michbaeck,",
                    "Willkommen zurück,",
                    "Hey Michbaeck,",
                    "Moin Moin,",
                    "Hi,"
                  ]|random
                -}}
                {{- " Es sind " + states("sensor.temp_michbaeck")|int|string + " Grad in deinem Zimmer." -}}
          - delay:
              seconds: 5
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_summary
          - delay:
              seconds: 5
          - service: script.alexa_play_content
          
      - id: michbaeck_leaving_home    # set state to away on leave to enable/disable other automations
        alias: 'michbaeck_leaving_home'
        initial_state: true
        trigger:
          platform: state
          entity_id: sensor.michbaeck
          from: 'home'
          to: 'away'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.michbaeck_leaving_home (\"" + state_attr("automation.michbaeck_leaving_home", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          #> - service: script.michbaeck_leaving_home
          - service: script.ticker_generator
            data:
              text: Ciao!
          - service: script.daily_routine
            data:
              event: leave_home
          - service: script.light_michbaeck_off
          - service: script.all_media_off
          - service: notify.ios_brain
            data:
              message: 'Licht und Radio ausgeschaltet. Alarm aktiviert'
              title: 'Wohnung verlassen'
              data:
                push:
                  sound: 'door_chime.wav'
  #---------------------------------------------------------------------------#
  #= CLIMATE

      - id: climate_home_new
        alias: climate_home_new
        trigger:
          - platform: state
            entity_id:
              - binary_sensor.presence
              - input_boolean.asleep
              - sensor.daily_routine
              - input_datetime.climate_1_start
              - input_datetime.climate_1_end
              - input_datetime.climate_2_start
              - input_datetime.climate_2_end
              - input_datetime.climate_3_start
              - input_datetime.climate_3_end
              - input_datetime.climate_4_start
              - input_datetime.climate_4_end
              - input_datetime.climate_5_start
              - input_datetime.climate_5_end
              - input_datetime.climate_6_start
              - input_datetime.climate_6_end
              - input_datetime.climate_7_start
              - input_datetime.climate_7_end
              - sensor.time
        action:
          - service: variable.set_variable
            data_template:
              variable: climate_home_state
              replace_attributes: false
              attributes_template: >-
                {% set attr = trigger.entity_id %}

                {% set start = as_timestamp(strptime(states("input_datetime.climate_" + now().isoweekday()|string + "_start"),"%H:%M:%S")) %}
                {% set end = as_timestamp(strptime(states("input_datetime.climate_" + now().isoweekday()|string + "_end"),"%H:%M:%S")) %}
                {% set now = as_timestamp(strptime(states("sensor.time"),"%H:%M")) %}

                {% if start is none or end is none %}
                  {% set time = "on" %}
                {% elif now > start and now < end %}
                  {% set time = "on" %}
                {% else %}
                  {% set time = "off" %}
                {% endif %}

                {% if attr == "binary_sensor.presence" %}
                  {% if is_state(attr,"on") %}
                    {% set value = "on" %}
                  {% else  %}
                    {% set value = "off" %}
                  {% endif %}
                {% elif attr == "input_boolean.asleep" %}
                  {% if is_state(attr,"on") and states(attr) not in ["alarm","alarm_fadein"] %}
                    {% set value = "off" %}
                  {% else  %}
                    {% set value = "on" %}
                  {% endif %}
                {% elif attr == "sensor.daily_routine" %}
                  {% if is_state("inpt_boolean.asleep","on") and states(attr) not in ["alarm","alarm_fadein"] %}
                    {% set value = "off" %}
                  {% else  %}
                    {% set value = "on" %}
                  {% endif %}
                {% endif %}

                {{
                  "{" + 
                    "\"" + attr + "\":\"" + value|default("unknown")|string + "\"" +
                    ",\"" + "time" + "\":\"" + time|default("unknown")|string + "\"" +
                    ",\"" + "prev_state" + "\":\"" + states("variable.climate_home_state")|string + "\"" +
                  "}"
                }}
              value: >-
                {% set attr = trigger.entity_id %}

                {% set start = as_timestamp(strptime(states("input_datetime.climate_" + now().isoweekday()|string + "_start"),"%H:%M:%S")) %}
                {% set end = as_timestamp(strptime(states("input_datetime.climate_" + now().isoweekday()|string + "_end"),"%H:%M:%S")) %}
                {% set now = as_timestamp(strptime(states("sensor.time"),"%H:%M")) %}

                {% if start is none or end is none %}
                  {% set time = "on" %}
                {% elif now > start and now < end %}
                  {% set time = "on" %}
                {% else %}
                  {% set time = "off" %}
                {% endif %}

                {% if attr == "binary_sensor.presence" %}
                  {% if is_state(attr,"on") %}
                    {% set value = "on" %}
                  {% else  %}
                    {% set value = "Es ist niemand zu Hause." %}
                  {% endif %}
                {% elif attr == "input_boolean.asleep" %}
                  {% if is_state(attr,"on") and states(attr) not in ["alarm","alarm_fadein"] %}
                    {% set value = "Michbaeck schläft." %}
                  {% else  %}
                    {% set value = "on" %}
                  {% endif %}
                {% elif attr == "sensor.daily_routine" %}
                  {% if is_state("inpt_boolean.asleep","on") and states(attr) not in ["alarm","alarm_fadein"] %}
                    {% set value = "Michbaeck schläft." %}
                  {% else  %}
                    {% set value = "on" %}
                  {% endif %}
                {% endif %}

                {{ value|default("unknown") }}
          - condition: template   # log only if state changed
            value_template: >-
              {{ states("variable.climate_home_state")|string != state_attr("variable.climate_home_state","prev_state")|string }}
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + " - automation.climate_home_new (\"" + 
                  state_attr("automation.climate_home_new", "friendly_name") + 
                  "\") triggered by " + trigger.entity_id + 
                  " changing its state FROM: \"" + trigger.from_state.state|string + 
                  "\" TO: \"" + trigger.to_state.state|string + "\"" 
                }}

      - id: climate_michbaeck_new
        alias: climate_michbaeck_new
        trigger:
          - platform: state
            entity_id:
              - binary_sensor.climate_home    
              # - sensor.wetter_temperature
              - input_boolean.asleep
              - cover.window_michbaeck_1
              - binary_sensor.window_michbaeck_1
              - binary_sensor.window_michbaeck_2
              - binary_sensor.door_michbaeck
              - binary_sensor.window_kueche
              - sensor.daily_routine
              - sensor.michbaeck
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{
                  now()|string + " - automation.climate_michbaeck_new (\"" + 
                  state_attr("automation.climate_michbaeck_new", "friendly_name") + 
                  "\") triggered by " + trigger.entity_id + 
                  " changing its state FROM: \"" + trigger.from_state.state|string + 
                  "\" TO: \"" + trigger.to_state.state|string + "\"" 
                }}
          - service: variable.set_variable
            data_template:
              variable: climate_michbaeck_state
              replace_attributes: false
              attributes_template: >-
                {% set attr = trigger.entity_id %}

                {% if attr == "binary_sensor.climate_home" %}
                  {% if is_state(attr, "on") %}
                    {% set value = "on" %}
                  {% else %}
                    {% set value = "off" %}
                  {% endif %}
                {% elif attr in ["sensor.michbaeck","sensor.daily_routine"] %}
                  {% if states(attr) not in ["home","travel_home"] %}
                    {% set value = "off" %}
                  {% else %}
                    {% set value = "on" %}
                  {% endif %}
                {% elif attr in ["binary_sensor.window_michbaeck_1","binary_sensor.window_michbaeck_2"] %}
                  {% if states(attr) not in ["off","unavailable"] %}
                    {% set value = "off" %}
                  {% else %}
                    {% set value = "on" %}
                  {% endif %}
                {% elif attr == "binary_sensor.door_michbaeck" %}
                  {% if is_state(attr, "off") %}
                    {% set value = "on" %}
                  {% elif is_state(attr, "on") and is_state("binary_sensor.window_kueche", "on") %}
                    {% set value = "off" %}
                  {% endif %}
                {% elif attr == "binary_sensor.window_kueche" %}
                  {% if is_state(attr, "off") %}
                    {% set value = "on" %}
                  {% elif is_state(attr, "on") and is_state("binary_sensor.door_michbaeck", "on") %}
                    {% set value = "off" %}
                  {% endif %}
                {% elif attr == "input_boolean.asleep" %}
                  {% if is_state(attr, "off") %}
                    {% set value = "on" %}
                  {% else %}
                    {% set value = "off" %}
                  {% endif %}
                {% elif attr == "cover.window_michbaeck_1" %}
                  {% if is_state(attr, "closed") %}
                    {% set value = "on" %}
                  {% else %}
                    {% set value = "off" %}
                  {% endif %}
                {%  endif %}

                {{
                  "{\"" + attr + "\":\"" + value|default("unknown")|string + "\"}"
                }}
              value: >-
                {% set attr = trigger.entity_id %}

                {% if attr == "binary_sensor.climate_home" %}
                  {% if is_state(attr, "on") %}
                    {% set value = "on" %}
                  {% else %}
                    {% set value = "Boiler ist aus." %}
                  {% endif %}
                {% elif attr in ["sensor.michbaeck","sensor.daily_routine"] %}
                  {% if states(attr) not in ["home","travel_home"] %}
                    {% set value = "Michbaeck ist nicht zu Hause." %}
                  {% else %}
                    {% set value = "on" %}
                  {% endif %}
                {% elif attr in ["binary_sensor.window_michbaeck_1","binary_sensor.window_michbaeck_2"] %}
                  {% if states(attr) not in ["off","unavailable"] %}
                    {% set value = state_attr(attr,"friendly_name") + " ist offen." %}
                  {% else %}
                    {% set value = "on" %}
                  {% endif %}
                {% elif attr == "binary_sensor.door_michbaeck" %}
                  {% if is_state(attr, "off") %}
                    {% set value = "on" %}
                  {% elif is_state(attr, "on") and is_state("binary_sensor.window_kueche", "on") %}
                    {% set value = "Tür und Küchenfenster sind offen." %}
                  {% endif %}
                {% elif attr == "binary_sensor.window_kueche" %}
                  {% if is_state(attr, "off") %}
                    {% set value = "on" %}
                  {% elif is_state(attr, "on") and is_state("binary_sensor.door_michbaeck", "on") %}
                    {% set value = "Tür und Küchenfenster sind offen." %}
                  {% endif %}
                {% elif attr == "input_boolean.asleep" %}
                  {% if is_state(attr, "off") %}
                    {% set value = "on" %}
                  {% else %}
                    {% set value = "Michbaeck schläft." %}
                  {% endif %}
                {% elif attr == "cover.window_michbaeck_1" %}
                  {% if is_state(attr, "closed") %}
                    {% set value = "on" %}
                  {% else %}
                    {% set value = "Fenster 1 ist offen." %}
                  {% endif %}
                {%  endif %}

                {# if value == true #}
                  {# "Heizung aktiv" #}
                {# else #}
                  {{ value|default("unknown") }}
                {# endif #}

      - id: climate_michbaeck   # heater on/off
        alias: climate_michbaeck
        #. initial_state: true
        trigger:
          - platform: state
            entity_id: binary_sensor.climate_michbaeck_helper
        condition:
          condition: state
          entity_id: input_boolean.climate_automatic
          state: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + 
                  " - automation.climate_michbaeck (\"" + state_attr("automation.climate_michbaeck", "friendly_name") + 
                  "\") triggered by " + trigger.entity_id + 
                  " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" 
                }}         
          - service: script.climate_michbaeck_on_off

      - id: cover_michbaeck   # heater on/off
        alias: 'cover_michbaeck'
        #. initial_state: true
        trigger:
          - platform: numeric_state
            entity_id: sensor.temp_michbaeck
            below: 16
        condition:
          condition: state
          entity_id: binary_sensor.window_michbaeck_1
          state: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.cover_michbaeck (\"" + state_attr("automation.cover_michbaeck", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          # - service: cover.close_cover
          #   data:
          #     entity_id: cover.window_michbaeck_1

      - id: climate_home   # heater on/off
        alias: 'climate_home'
        #. initial_state: true
        trigger:
          - platform: state
            entity_id: 
              - binary_sensor.climate_home
              - input_boolean.climate_automatic
        condition:
          condition: state
          entity_id: input_boolean.climate_automatic
          state: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.climate_home (\"" + state_attr("automation.climate_home", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service_template: >-
              {%- if trigger.to_state.state == 'on' -%}
                switch.turn_on
              {%- else -%}
                switch.turn_off
              {%- endif -%}
            data:
              entity_id: switch.boiler

      - id: climate_michbaeck_ac    # turn on fan, if conditions met
        alias: 'climate_michbaeck_ac'
        #. initial_state: true
        trigger:
          - platform: state
            entity_id: 
              - binary_sensor.climate_michbaeck_ac_helper
              - input_boolean.climate_automatic
        condition:
          condition: state
          entity_id: input_boolean.climate_automatic
          state: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.climate_michbaeck_ac (\"" + state_attr("automation.climate_michbaeck_ac", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: climate.set_operation_mode
            data_template:
              entity_id: climate.michbaeck_ac
              operation_mode: >-
                {% if is_state("binary_sensor.climate_michbaeck_ac_helper", "on") %}
                  cool
                {% else %}
                  off
                {% endif %}

      - id: climate_michbaeck_fan_speed   # on temperature change, adjust fan speed
        alias: 'climate_michbaeck_fan_speed'
        trigger:
          - platform: state
            entity_id: sensor.temp_michbaeck
          - platform: state
            entity_id: fan.michbaeck
          - platform: state
            entity_id: sensor.climate_michbaeck_ac_temp
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: fan.michbaeck
              state: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.climate_michbaeck_fan_speed (\"" + state_attr("automation.climate_michbaeck_fan_speed", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: script.climate_michbaeck_fan_speed

      - id: climate_michbaeck_ac_temp   # when changing climate temp mqtt-publish and adjust AC temp
        alias: 'climate_michbaeck_ac_temp'
        trigger:
          - platform: state
            entity_id:
              - climate.michbaeck
              - input_number.climate_michbaeck_tempdiff
        condition:
          condition: template
          value_template: >-
            {{ state_attr("climate.michbaeck", "temperature")|float > 20 }}
        action:
          # - service: notify.homeassistant_debug
          #   data_template:
          #     message: >-
          #       {{ now()|string + " - automation.climate_michbaeck_ac_temp (\"" + state_attr("automation.climate_michbaeck_ac_temp", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: climate.set_temperature
            data_template:
              entity_id: climate.michbaeck_ac
              temperature: >-
                {{ state_attr("climate.michbaeck", "temperature")|float + states("input_number.climate_michbaeck_tempdiff")|float }}

      - id: climate_michbaeck_winter_fan    # when heater on turn on ceiling fan every 20min
        alias: 'climate_michbaeck_winter_fan'
        trigger:
          - platform: template
            value_template: >-
              {% set diff = ((utcnow().timestamp()/60)|int - (states.climate.michbaeck.last_changed.timestamp()/60)|int) %}
              {{
                is_state("climate.michbaeck", "heat") 
                and is_state_attr("climate.michbaeck_ac", "operation_mode", "cool")
                and states("sensor.time")|string != "this_line_forces_trigger_to_be_updated_every_minute" 
                and diff >= 10 
                and diff is divisibleby(20)
              }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.climate_michbaeck_winter_fan (\"" + state_attr("automation.climate_michbaeck_winter_fan", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: fan.turn_on
            data:
              entity_id: fan.michbaeck
              speed: low
          - delay:
              minutes: 2
          - service: fan.turn_off
            data:
              entity_id: fan.michbaeck

      - id: climate_kueche    # heater on/off
        alias: 'climate_kueche'
        # initial_state: true
        trigger:
          - platform: state
            entity_id: 
              - binary_sensor.climate_kueche_helper
              - input_boolean.climate_automatic
        condition:
          condition: state
          entity_id: input_boolean.climate_automatic
          state: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.climate_kueche (\"" + state_attr("automation.climate_kueche", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          # - service: climate.set_operation_mode
            # data_template:
            #   entity_id: climate.kueche
            #   operation_mode: >-
            #     {%- if is_state("binary_sensor.climate_kueche_helper", "on") -%}
            #       heat
            #     {%- else -%}
            #       off
            #     {%- endif -%}
          - service: variable.set_variable
            data_template:
              variable: climate_kueche_save
              value: >-
                {% if is_state("binary_sensor.climate_kueche_helper", "off") %}
                  {{ state_attr("climate.kueche", "temperature") }}
                {% else %}
                  {{ variable.state }}
                {% endif %}
          - service: climate.set_temperature
            data_template:
              entity_id: climate.kueche
              temperature: >-
                {% if is_state("binary_sensor.climate_kueche_helper", "on") %}
                  {{ states("variable.climate_kueche_save")|float }}
                {% else %}
                  {{ states("input_number.climate_away_temp")|float }}
                {% endif %}

      - id: climate_bad   # heater on/off
        alias: 'climate_bad'
        # initial_state: true
        trigger:
          - platform: state
            entity_id: 
              - binary_sensor.climate_bad_helper
              - input_boolean.climate_automatic
        condition:
          condition: state
          entity_id: input_boolean.climate_automatic
          state: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.climate_bad (\"" + state_attr("automation.climate_bad", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          # - service: climate.set_operation_mode
            # data_template:
            #   entity_id: climate.bad
            #   operation_mode: >-
            #     {%- if is_state("binary_sensor.climate_bad_helper", "on") -%}
            #       heat
            #     {%- else -%}
            #       off
            #     {%- endif -%}
          - service: variable.set_variable
            data_template:
              variable: climate_bad_save
              value: >-
                {% if is_state("binary_sensor.climate_bad_helper", "off") %}
                  {{ state_attr("climate.bad", "temperature") }}
                {% else %}
                  {{ variable.state }}
                {% endif %}
          - service: climate.set_temperature
            data_template:
              entity_id: climate.bad
              temperature: >-
                {% if is_state("binary_sensor.climate_bad_helper", "on") %}
                  {{ states("variable.climate_bad_save")|float }}
                {% else %}
                  {{ states("input_number.climate_away_temp")|float }}
                {% endif %}
  #---------------------------------------------------------------------------#
  #= MOTION

      - id: motion_flur_light_on
        alias: motion_flur_light_on
        trigger:    # when motion detected
          - platform: state
            entity_id: binary_sensor.motion_flur
            to: 'on'
          - platform: state
            entity_id: binary_sensor.motion_flur_2
            to: 'on'
          - platform: state
            entity_id: binary_sensor.motion_flur_3
            to: 'on'
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.motion_flur
              state: 'on'
            - condition: template
              value_template: >-
                {{ states("sensor.light_flur")|default(0)|float < states("input_number.motion_flur_trigger")|default(0)|float }}
        action:
          - service: script.light_flur_on

      - id: motion_flur_light_off
        alias: 'motion_flur_light_off'
        trigger:
          - platform: state
            entity_id: binary_sensor.motion_flur_helper
            to: 'off'
        action:
          - condition: state
            entity_id: binary_sensor.motion_flur_helper
            state: 'off'
          - condition: state
            entity_id: light.flur
            state: 'on'
          - service: light.turn_on
            data:
              entity_id: 
                - light.flur
              flash: short
          - delay:
              seconds: 10
          - service: script.light_flur_off

      - id: motion_kueche_light_on    # [debug off] lights on when motion detected
        alias: motion_kueche_light_on
        trigger:    # when motion detected
          - platform: state
            entity_id: binary_sensor.motion_kueche
            to: 'on'
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.motion_kueche
              state: 'on'
            - condition: template
              value_template: >-
                {{ states("sensor.light_kueche")|default(0)|float < states("input_number.motion_kueche_trigger")|default(0)|float }}
        action:
          - service: script.light_kueche_on

      - id: motion_kueche_light_off   # [debug off] lights off when no motion since...
        alias: motion_kueche_light_off
        trigger:
          - platform: state
            entity_id: binary_sensor.motion_kueche_helper
            to: 'off'
        action:
          - condition: state
            entity_id: binary_sensor.motion_kueche_helper
            state: 'off'
          - condition: state
            entity_id: light.kueche
            state: 'on'
          - service: light.turn_on
            data:
              entity_id: 
                - light.kueche
              flash: short
          - delay:
              seconds: 10
          - condition: state
            entity_id: binary_sensor.motion_kueche_helper
            state: 'off'
          - service: script.light_kueche_off

      - id: motion_bad_on   # lights on when motion detected
        alias: 'motion_bad_on'
        #. initial_state: true
        trigger:
          - platform: state
            entity_id: binary_sensor.motion_bad_2
            to: 'on'
          # - platform: template
          #   value_template: >-
          #     {{
          #       is_state("binary_sensor.motion_bad","on") and
          #       is_state("binary_sensor.motion_bad_2","on")
          #     }}
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.motion_bad
              state: 'on'
            #. - condition: state
            #.   entity_id: light.bad
            #.   state: 'off'
            - condition: template
              value_template: >-
                {{ states("sensor.light_bad")|default(0)|float < states("input_number.motion_bad_trigger")|default(0)|float }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.motion_bad_on (\"" + state_attr("automation.motion_bad_on", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: light.turn_on  
            data:
              entity_id: light.bad

      - id: motion_bad_off    # lights off when no motion since...
        alias: 'motion_bad_off'
        trigger:
          - platform: state
            entity_id: binary_sensor.motion_bad_helper
            to: 'off'
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.motion_bad
              state: 'on'
            - condition: template
              value_template: >-
                {{ 
                  is_state("light.bad", "on") 
                  and not is_state("sensor.esp05", "unavailable") 
                }}
        action:
          - condition: state
            entity_id: binary_sensor.motion_bad_helper
            state: 'off'
          - condition: state
            entity_id: light.bad
            state: 'on'
          #. - service: notify.homeassistant_debug
            #. data_template:
            #.   title: Motion Bad
            #.   message: >-
            #.     {{ now()|string + " - automation.motion_bad_off triggered - run script.light_bad_off" }}
          # - service: light.turn_on
            # data:
              # entity_id: 
                # - light.bad
              # flash: short
          # - delay:
              #  seconds: 10
          #. - condition: template
            #. value_template: >-
            #.   {{ utcnow().timestamp()|int - states.binary_sensor.motion_bad.last_changed.timestamp()|int > 15 }}
          # - condition: state
            # entity_id: binary_sensor.motion_bad_helper
            # state: 'off'
          - service: light.turn_off   # turn off lights
            data:
              entity_id: light.bad

      - id: motion_michbaeck_1_off    # [debug off] controller display off when no motion since...
        alias: 'motion_michbaeck_1_off'
        #. initial_state: true
        trigger:
          - platform: state
            entity_id: binary_sensor.motion_michbaeck_1
            to: 'off'
            for:
              minutes: 1
        action:
          #. - service: notify.homeassistant_debug
            #. data_template:
            #.   title: Motion Michbaeck 1
            #.   message: >-
            #.     {{ now()|string + " - " }} automation.motion_michbaeck_1_off triggered. 
            #.     run scrip.thermostat_michbaeck_off
          - service: script.thermostat_michbaeck_off
  #---------------------------------------------------------------------------#
  #= LIGHT

      - id: sun_elevation   # save min/max state of sun for flux
        alias: 'sun_elevation'
        trigger:  
          - platform: state
            entity_id: sun.sun
        action:
          # - service: notify.homeassistant_debug
          #   data_template:
          #     message: >-
          #       {{ now()|string + " - \"automation.sun_elevation\" triggered by " + trigger.entity_id + " changing its state FROM: " + trigger.from_state.state|string + " TO: " + trigger.to_state.state|string }}
          - service: variable.set_variable
            data_template:
              variable: sun_elevation_max
              value: >-
                {% set current = state_attr("sun.sun", "elevation")|int %}

                {% if current > states("variable.sun_elevation_max")|int %}
                  {{ current }}
                {% else %}
                  {{ states("variable.sun_elevation_max")|int }}
                {% endif %}
          - service: variable.set_variable
            data_template:
              variable: sun_elevation_min
              value: >-
                {% set current = state_attr("sun.sun", "elevation")|int %}
                
                {% if current < states("variable.sun_elevation_min")|int %}
                  {{ current }}
                {% else %}
                  {{ states("variable.sun_elevation_min")|int }}
                {% endif %}

      #[todo] put all baselines in single automation
      - id: light_aussen_baseline   # define max lightlevel when dark outside as 100%
        alias: 'light_aussen_baseline'
        initial_state: true
        trigger:
          - platform: state
            entity_id: sensor.light_aussen
        condition:
          condition: template
          value_template: >-
            {{
              trigger.to_state.state|float > states("variable.light_baseline_aussen")|default(0)|float
            }}
        action:
          - service: variable.set_variable
            data_template:
              variable: light_baseline_aussen
              value: >-
                {{ trigger.to_state.state }}

      - id: light_aussen_baseline_decrease    # decrease base line over time to allow adjustments downwards
        alias: 'light_aussen_baseline_decrease'
        initial_state: true
        trigger:
          - platform: homeassistant
            event: shutdown
        action:
          - service: variable.set_variable
            data_template:
              variable: light_baseline_aussen
              value: >-
                {{ states("variable.light_baseline_aussen")|float*0.99 }}

      - id: light_kueche_baseline   # define max lightlevel when dark outside as 100%
        alias: 'light_kueche_baseline'
        initial_state: true
        trigger:
          - platform: state
            entity_id: sensor.light_kueche
        condition:
          condition: template
          value_template: >-
            {{
              trigger.to_state.state|float > states("variable.light_baseline_kueche")|default(0)|float and
              states("sensor.light_aussen")|default(2)|float < 1 
            }}
        action:
          - service: variable.set_variable
            data_template:
              variable: light_baseline_kueche
              value: >-
                {{ trigger.to_state.state }}

      - id: light_bad_baseline    # define max lightlevel when dark outside as 100%
        alias: 'light_bad_baseline'
        initial_state: true
        trigger:
          - platform: state
            entity_id: sensor.light_bad
        condition:
          condition: template
          value_template: >-
            {{
              trigger.to_state.state|float > states("variable.light_baseline_bad")|default(0)|float and
              states("sensor.light_aussen")|default(2)|float < 1 
            }}
        action:
          - service: variable.set_variable
            data_template:
              variable: light_baseline_bad
              value: >-
                {{ trigger.to_state.state }}

      - id: light_flur_baseline    # define max lightlevel when dark outside as 100%
        alias: 'light_flur_baseline'
        initial_state: true
        trigger:
          - platform: state
            entity_id: sensor.light_flur
        condition:
          condition: template
          value_template: >-
            {{
              trigger.to_state.state|float > states("variable.light_baseline_flur")|default(0)|float and
              states("sensor.light_aussen")|default(2)|float < 1 
            }}
        action:
          - service: variable.set_variable
            data_template:
              variable: light_baseline_flur
              value: >-
                {{ trigger.to_state.state }}

      - id: light_michbaeck_1_baseline    # define max lightlevel when dark outside as 100%
        alias: 'light_michbaeck_1_baseline'
        initial_state: true
        trigger:
          - platform: state
            entity_id:
              - sensor.light_michbaeck_1
        condition:
          condition: template
          value_template: >-
            {{
              trigger.to_state.state|float > states("variable.light_baseline_michbaeck_1")|default(0)|float and
              states("sensor.light_aussen")|default(2)|float < 1 
            }}
        action:
          - service: variable.set_variable
            data_template:
              variable: light_baseline_michbaeck_1
              value: >-
                {{ trigger.to_state.state }}

      - id: light_michbaeck_2_baseline    # define max lightlevel when dark outside as 100%
        alias: 'light_michbaeck_2_baseline'
        initial_state: true
        trigger:
          - platform: state
            entity_id:
              - sensor.light_michbaeck_2
        condition:
          condition: template
          value_template: >-
            {{
              trigger.to_state.state|float > states("variable.light_baseline_michbaeck_2")|default(0)|float and
              states("sensor.light_aussen")|default(2)|float < 1 
            }}
        action:
          # - service: input_number.set_value
          #   data_template:
          #     entity_id: input_number.light_michbaeck_2_baseline
          #     value: '{{ states(trigger.entity_id) | float }}'
          - service: variable.set_variable
            data_template:
              variable: light_baseline_michbaeck_2
              value: >-
                {{ trigger.to_state.state }}

      - id: light_michbaeck_3_baseline    # define max lightlevel when dark outside as 100%
        alias: 'light_michbaeck_3_baseline'
        initial_state: true
        trigger:
          - platform: state
            entity_id:
              - sensor.light_michbaeck_3
        condition:
          condition: template
          value_template: >-
            {{
              trigger.to_state.state|float > states("variable.light_baseline_michbaeck_3")|default(0)|float and
              states("sensor.light_aussen")|default(2)|float < 1 
            }}
        action:
          - service: variable.set_variable
            data_template:
              variable: light_baseline_michbaeck_3
              value: >-
                {{ trigger.to_state.state }}

      - id: light_michbaeck_4_baseline    # define max lightlevel when dark outside as 100%
        alias: 'light_michbaeck_4_baseline'
        initial_state: true
        trigger:
          - platform: state
            entity_id:
              - sensor.light_michbaeck_4
        condition:
          condition: template
          value_template: >-
            {{
              trigger.to_state.state|float > states("variable.light_baseline_michbaeck_4")|default(0)|float and
              states("sensor.light_aussen")|default(2)|float < 1 
            }}
        action:
          - service: variable.set_variable
            data_template:
              variable: light_baseline_michbaeck_4
              value: >-
                {{ trigger.to_state.state }}

      - id: light_michbaeck_auto    # controls light brightness/on/off depending on sun and lightsensors in working area
        alias: light_michbaeck_auto
        trigger:    # check lighting whenever a light-related device changes
          - platform: state
            entity_id: 
              - sensor.light_michbaeck_auto
              - sensor.light_michbaeck_1
              - sensor.light_michbaeck_1_target
              - sensor.time
              - sensor.flux
        condition:
          condition: template
          value_template: >-
            {{ 
              not is_state("sensor.light_michbaeck_auto", "idle")
              and is_state("input_boolean.asleep", "off")
              and is_state("sensor.michbaeck", "home")
              and is_state("script.light_michbaeck_auto_increase_brightness", "off")
              and is_state("script.light_michbaeck_auto_increase_brightness_loop", "off")
              and is_state("script.light_michbaeck_auto_increase_color", "off")
              and is_state("script.light_michbaeck_auto_increase_color_loop", "off")
              and is_state("script.light_michbaeck_auto_decrease_brightness", "off")
              and is_state("script.light_michbaeck_auto_decrease_brightness_loop", "off")
              and is_state("script.light_michbaeck_auto_decrease_color", "off")
              and is_state("script.light_michbaeck_auto_decrease_color_loop", "off")
              and is_state("script.light_michbaeck_auto_off", "off")
            }}
        action:
          - service_template: >-
              {{- "script.light_michbaeck_auto_" + states("sensor.light_michbaeck_auto") }}

      - id: solder_light    # turn on IKEA light together with soldering iron
        alias: 'solder_light'
        trigger:
          - platform: state
            entity_id: switch.loetkolben
            to: 'on'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.solder_light (\"" + state_attr("automation.solder_light", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service_template: >-
              {%- if trigger.to_state.state == "on" -%}
                light.turn_on
              {%- elif trigger.to_state.state == "off" -%}
                light.turn_off
              {%- endif -%}
            data:
              entity_id: light.ikea
          - condition: template
            value_template: >-
              {{ trigger.to_state.state == "on" }}
          - service: light.turn_on
            data:
              entity_id: light.ikea
              brightness: 255

      - id: auto_color_michbaeck_1    # controls light color (flux replacement)
        alias: 'auto_color_michbaeck_1'
        trigger:
          # - platform: time
            # minutes: '/15'
            # seconds: 00
          - platform: state
            entity_id: 
              - input_number.flux_adjust
              - sensor.flux
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: light.michbaeck_dimmer
              state: 'on'
            - condition: state
              entity_id: input_boolean.light_michbaeck_color
              state: 'on'
            - condition: state
              entity_id: script.auto_color_michbaeck_1
              state: 'off'
            - condition: template
              value_template: >-
                {{ states("sensor.light_michbaeck_auto_state") in ["brightness increased", "brightness decreased", "disabled", "color_increased"] }}
        action:
          - service: script.auto_color_michbaeck_1

      - id: auto_color_kueche   # controls light color (flux replacement)
        alias: 'auto_color_kueche'
        initial_state: true
        trigger:
          platform: state
          entity_id: 
            - sensor.flux
            - light.kueche
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: light.kueche
              state: 'on'
        action:
          - service: light.turn_on
            data_template:
              entity_id: 
               - light.kueche
              transition: 10
              color_temp: '{{ [states("sensor.flux")|int * 1.1, 500]|min|int }}'

      - id: auto_color_flur   # controls light color (flux replacement)
        alias: 'auto_color_flur'
        initial_state: true
        trigger:
          platform: state
          entity_id: 
            - sensor.flux
            - light.flur
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: light.flur
              state: 'on'
        action:
          - service: light.turn_on
            data_template:
              entity_id: 
               - light.flur
              transition: 10
              color_temp: '{{ [states("sensor.flux")|int * 1.1, 500]|min|int }}'
  #---------------------------------------------------------------------------#
  #= PLANT

      - id: plant_update    # request states, if unknown
        alias: 'plant_update'
        initial_state: true
        trigger:
          platform: state
          entity_id:
            - sensor.plant_michbaeck_1
            - sensor.plant_michbaeck_2
        condition:
          condition: template
          value_template: >-
            {{ is_state(trigger.entity_id, "unknown") }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.plant_update (\"" + state_attr("automation.plant_update", "friendly_name") + "\") triggered by " + trigger.entity_id + " changing its state FROM: \"" + trigger.from_state.state|string + "\" TO: \"" + trigger.to_state.state|string + "\"" }}         
          - service: script.plant_update
            data_template:
              plant: >-
                {{ trigger.entity_id }}

      - id: plant_issue   # notify when plant gets too dry
        alias: 'plant_issue'
        trigger:
          platform: state
          entity_id:
            - sensor.plant_michbaeck_1
            - sensor.plant_michbaeck_2
        condition:
          condition: template
          value_template: >-
            {{ 
              trigger.from_state.state|default(0)|int != trigger.to_state.state|default(0)|int and
              trigger.from_state.state|default(0)|string != "unavailable" and
              trigger.to_state.state|default(0)|string != "unavailable" 
            }}
        action:
          - service: persistent_notification.dismiss
            data_template:
              notification_id: >-
                {{ trigger.entity_id + "_issue" }}
          - condition: template
            value_template: >-
              {{ trigger.to_state.state|int <= 30 }}
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.plant_issue triggered by " + trigger.entity_id + " changing its state FROM: " + trigger.from_state.state|string + " TO: " + trigger.to_state.state|string }}
          - service: script.plant_notify
            data_template:
              plant: >-
                {{ trigger.entity_id }}
          - service: persistent_notification.create
            data_template:
              notification_id: >-
                {{ trigger.entity_id + "_issue" }}
              title: >-
                {{ state_attr(trigger.entity_id, "friendly_name") }}
              message: >-
                {{ "Wert für " + state_attr(trigger.entity_id, "friendly_name") + " beträgt " + trigger.to_state.state_with_unit|string + " und sollte gegossen werden." }}

      - id: plant_water    # water flower if < 30, update state >> should retrigger if more water needed
        alias: plant_water
        trigger:
          platform: state
          entity_id: 
            - sensor.plant_michbaeck_1
            - sensor.plant_michbaeck_2
        condition:    # check water tank
          condition: template
          value_template: >-
            {{
              is_state("binary_" + trigger.entity_id + "_water", "on") and
              is_state("input_boolean.asleep", "off") and
              trigger.to_state.state|int <= 30
            }}
        action:
          - service: persistent_notification.dismiss
            data_template:
              notification_id: >-
                {{ trigger.entity_id + "_water" }}
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.plant_watering triggered by " + trigger.entity_id + " changing its state FROM: " + trigger.from_state.state|string + " TO: " + trigger.to_state.state|string }}
          - service: persistent_notification.create
            data_template:
              notification_id: >-
                {{ trigger.entity_id + "_water" }}
              title: >-
                {{ state_attr(trigger.entity_id, "friendly_name") }}
              message: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " wird gegossen." }}
          - service: switch.turn_on   # get entity_id for switch from sensor
            data_template:
              entity_id: >-
                {{ trigger.entity_id|replace("sensor","switch") + "_water" }}
          - delay:
              seconds: 10
          - service: switch.turn_off
            data_template:
              entity_id: >-
                {{ trigger.entity_id|replace("sensor","switch") + "_water" }}
          - service: script.plant_update
            data_template:
              plant: >-
                {{ trigger.entity_id }}
          # - service: mqtt.publish
          #   data_template:
          #     topic: esp10/cmd
          #     payload: event,plantrequest
          - wait_template: >-
              {{ states(trigger.entity_id)|int > trigger.to_state.state|int }}
            timeout: '00:01:00'
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.plant_watering - " + trigger.entity_id + " watered, new state: " + states(trigger.entity_id)|string + "%" }}
          - service: persistent_notification.dismiss
            data_template:
              notification_id: >-
                {{ trigger.entity_id + "_water" }}
          - service: persistent_notification.create
            data_template:
              notification_id: >-
                {{ trigger.entity_id + "_water" }}
              title: >-
                {{ state_attr(trigger.entity_id, "friendly_name") }}
              message: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " gegossen. Wert beträgt nun " + states(trigger.entity_id)|string + "%" }}
          - service: variable.set_variable
            data_template:
              variable: >-
                {{ trigger.entity_id|replace("sensor.","") + "_timestamp" }}
              value: >-
                {{ as_timestamp(now())|timestamp_custom("%d.%b %H:%M") }}

      - id: plant_water_empty   # notify on empty water tank
        alias: plant_water_empty
        trigger:
          - platform: state
            entity_id:
              #. - binary_sensor.plant_wohnzimmer_1_water
              - binary_sensor.plant_michbaeck_1_water
              - binary_sensor.plant_michbaeck_2_water
            to: 'off'
        condition:
          condition: template
          value_template: >-
            {{ 
              trigger.from_state.state|string != "unavailable" and
              trigger.to_state.state|string != "unavailable" 
            }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.plant_water_empty triggered by " + trigger.entity_id + " changing its state FROM: " + trigger.from_state.state|string + " TO: " + trigger.to_state.state|string }}
          - service: notify.iospush
            data_template:
              title: Wassertank leer
              message: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " ist leer und muss aufgefüllt werden." }}
              data:
                push:
                  sound: 'silent.wav'
          - wait_template: >-
              {{ is_state("input_boolean.asleep", "off") }}
          - service: script.alexa_says
            data_template:
              # device: Schlafzimmer
              # entity_id: automation.plant_water_empty
              text: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " ist leer und muss aufgefüllt werden." }}
          - service: persistent_notification.create
            data_template:
              notification_id: '{{states.trigger.entity_id.name}}'
              title: Wassertank ist leer
              message: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " ist leer und muss aufgefüllt werden." }}
  #---------------------------------------------------------------------------#
  #= ALERTS

      - id: door_alarm    # alerts and notifies, if door opened when not home
        alias: 'door_alarm'
        trigger:
          platform: state
          entity_id: binary_sensor.door_michbaeck
          from: 'off'
          to: 'on'
        condition:
          condition: template
          value_template: '{{ not is_state("sensor.michbaeck", "home") }}'
        action:
          - service: script.door_alarm

      - id: door_close    # stops alert and notifies
        alias: 'door_close'
        initial_state: true
        trigger:
          - platform: event
            event_type: ios.notification_action_fired
            event_data:
              actionName: DOOR_ALARM_OFF
          - platform: state
            entity_id: binary_sensor.door_michbaeck
            from: 'on'
            to: 'off'
        condition:
          condition: template
          value_template: '{{ not is_state("sensor.michbaeck", "home") }}'
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - \"automation.door_close\" triggered - calling script.door_alarm_stop" }}
          - service: script.door_alarm_stop

      - id: badewasser    # notify when Badewanne voll
        alias: 'badewasser'
        initial_state: true
        trigger:
          platform: state
          entity_id:
            - binary_sensor.water_1
            - binary_sensor.water_2
          from: 'off'
          to: 'on'
        action:
          - service: script.badewasser
          - service: persistent_notification.create
            data_template:
              notification_id: '{{states.trigger.entity_id.name}}'
              title: Badewanne voll!
              message: >-
                {{ "Badewanne ist voll. Bitte Wasser abstellen" }}

      - id: battery_alert   # alerts on empty battery or if unavailable
        alias: 'battery_alert'
        trigger:
          - platform: numeric_state
            entity_id:
              - sensor.iphone_battery_mqtt
              - sensor.ipad_battery_mqtt
              - sensor.battery_motion_flur
              - sensor.battery_motion_kueche
              - sensor.battery_temp_kueche
              - sensor.battery_door_michbaeck
              - sensor.battery_hue_dimmer1
              - sensor.battery_hue_dimmer2
              - sensor.battery_cube
              - sensor.battery_water_1
              - sensor.battery_water_2
            below: 10
          - platform: state
            entity_id:
              - sensor.iphone_battery_mqtt
              - sensor.ipad_battery_mqtt
              - sensor.battery_motion_flur
              - sensor.battery_motion_kueche
              - sensor.battery_temp_kueche
              - sensor.battery_door_michbaeck
              - sensor.battery_hue_dimmer1
              - sensor.battery_hue_dimmer2
              - sensor.battery_cube
              - sensor.battery_water_1
              - sensor.battery_water_2
            to: 'unavailable'
        action:
          - service: script.ticker_generator
            data_template:
              text: >-
                {%- if trigger.to_state.state|string == "unavailable" -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} ist nicht verfügbar und sollte geprüft werden.
                {%- elif trigger.to_state.state|int == 0 -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} ist leer und muss ausgewechselt werden.
                {%- else -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} hat nur noch {{ trigger.to_state.state|int|string }} Prozent und sollte bald ausgewechselt werden.
                {%- endif %} 
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # voice
            data_template:
              text: >-
                {%- if trigger.to_state.state == "unavailable" -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} ist nicht verfügbar und sollte geprüft werden.
                {%- elif trigger.to_state.state|int == 0 -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} ist leer und muss ausgewechselt werden.
                {%- else -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} hat nur noch {{ trigger.to_state.state|int }} Prozent und sollte bald ausgewechselt werden.
                {%- endif %} 
          - service: notify.iospush
            data_template:
              title: 'Batterie wechseln'
              message: >-
                {%- if trigger.to_state.state == "unavailable" -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} ist nicht verfügbar und sollte geprüft werden.
                {%- elif trigger.to_state.state|int == 0 -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} ist leer und muss ausgewechselt werden.
                {%- else -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} hat nur noch {{ trigger.to_state.state|int }} Prozent und sollte bald ausgewechselt werden.
                {%- endif %} 
          - service: persistent_notification.create
            data_template:
              notification_id: '{{states.trigger.entity_id.name}}'
              title: Leerer Akku
              message: >-
                {%- if trigger.to_state.state == "unavailable" -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} ist nicht verfügbar und sollte geprüft werden.
                {%- elif trigger.to_state.state|int == 0 -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} ist leer und muss ausgewechselt werden.
                {%- else -%}
                  {{ state_attr(trigger.entity_id, "friendly_name") }} hat nur noch {{ trigger.to_state.state|int }} Prozent und sollte bald ausgewechselt werden.
                {%- endif %} 
  #---------------------------------------------------------------------------#
  #= MISC HELPERS

      - id: loetkolben_off    # turn soldering iron off after 30min
        alias: 'loetkolben_off'
        trigger:
          - platform: state
            entity_id: switch.loetkolben
            to: 'on'
            for:
              minutes: 45
        action:
        - service: script.loetkolben_off
  #---------------------------------------------------------------------------#
  #= WEATHER
        
      - id: weather_light   # xiaomi light color matching to temperature
        alias: Weather Light
        initial_state: true
        trigger:
          - platform: state
            entity_id: sensor.temp_aussen
          - platform: homeassistant
            event: start
        condition:
          condition: and
          conditions:
          - condition: state
            entity_id: sensor.michbaeck
            state: home
          - condition: state
            entity_id: input_boolean.asleep
            state: 'off'
        action:
          - service: script.hue_from_temp
            data:
              light: light.xiaomi_gateway
              transition: 10
      
      - id: dwd_warning_current   # show/hide dwd, announce warnings
        alias: 'dwd_warning_current'
        trigger:
          - platform: homeassistant
            event: start
          - platform: state
            entity_id: sensor.dwd_current_warning_level
            to: '0'
          - platform: state
            entity_id: sensor.dwd_current_warning_level
            from: '0'
        action:
          - service: persistent_notification.dismiss
            data_template:
              notification_id: dwd_warning
          - condition: numeric_state
            entity_id: sensor.dwd_current_warning_level
            above: 0
          - service: persistent_notification.create
            data_template:
              notification_id: dwd_warning
              title: '{{ state_attr("sensor.dwd_current_warning_level", "warning_1_name") }}'
              message: >-
                  {{ "Es gibt eine Stufe " + states("sensor.dwd_current_warning_level")|string + " Warnung vom DWD, Sie lautet " + state_attr("sensor.dwd_current_warning_level", "warning_1_headline") }}.
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # alexa tts text
            data_template:
              text: >-
                  {{ "Es gibt eine Stufe " + states("sensor.dwd_current_warning_level")|string + " Warnung vom DWD, Sie lautet " + state_attr("sensor.dwd_current_warning_level", "warning_1_headline") }}.

      - id: dwd_warning_advance   # show/hide dwd, announce warnings
        alias: 'dwd_warning_advance'
        trigger:
          - platform: homeassistant
            event: start
          - platform: state
            entity_id: sensor.dwd_advance_warning_level
            to: '0'
          - platform: state
            entity_id: sensor.dwd_advance_warning_level
            from: '0'
        action:
          - service: persistent_notification.dismiss
            data_template:
              notification_id: dwd_warning_advance
          - condition: numeric_state
            entity_id: sensor.dwd_advance_warning_level
            above: 0
          - service: persistent_notification.create
            data_template:
              notification_id: dwd_warning_advance
              title: '{{ state_attr("sensor.dwd_advance_warning_level", "warning_1_name") }}'
              message: >-
                  {{ "Es gibt eine Stufe " + states("sensor.dwd_advance_warning_level")|string + " Warnung vom DWD, Sie lautet " + state_attr("sensor.dwd_advance_warning_level", "warning_1_headline") }}.
          - service: script.ticker_generator
            data_template:
              text: >-
                  {{ "Es gibt eine Stufe " + states("sensor.dwd_advance_warning_level")|string + " Warnung vom DWD, Sie lautet " + state_attr("sensor.dwd_advance_warning_level", "warning_1_headline") }}.
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # alexa tts text
            data_template:
              text: >-
                  {{ "Es gibt eine Stufe " + states("sensor.dwd_advance_warning_level")|string + " Warnung vom DWD, Sie lautet " + state_attr("sensor.dwd_advance_warning_level", "warning_1_headline") }}.
  #---------------------------------------------------------------------------#
  #= CONTROLLER
        
      ### XIAOMI CUBE 
      - id: cube    # [debug on]
        alias: cube
        trigger:
          - platform: event
            event_type: xiaomi_aqara.cube_action
            event_data:
              entity_id: binary_sensor.xiaomi_cube
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - automation.cube has been triggered - calling script.cube_" + trigger.event.data.action_type|string + " with VALUE = " + trigger.event.data.action_value|default(0)|string }}
          - service_template: >-
              {{ "script.cube_" + trigger.event.data.action_type|string }}
            data_template:
              value: >-
                {{ trigger.event.data.action_value|default(0)|float }}
  #---------------------------------------------------------------------------#
  #= TICKER

      - id: ticker_generator_on_off   # creates messages for devices turning on/off
        alias: 'ticker_generator_on_off'
        trigger:
          - platform: state
            entity_id:
              - automation.wecker
              - light.kueche
              - light.flur
              - light.wohnzimmer
              - light.stehlampe
              - light.regal
              - light.bett
              - light.schreibtisch
              - light.ikea
              - light.bad
              - switch.computer
              - switch.ventilator
              - switch.loetkolben
              - switch.3ddrucker
              - switch.rcswitch3
              - light.grosses_licht
              - light.xiaomi_gateway
            from: 'on'
            to: 'off'
          - platform: state
            entity_id:
              - automation.wecker
              - light.kueche
              - light.flur
              - light.wohnzimmer
              - light.stehlampe
              - light.regal
              - light.bett
              - light.schreibtisch
              - light.ikea
              - light.bad
              - switch.computer
              - switch.ventilator
              - switch.loetkolben
              - switch.3ddrucker
              - switch.rcswitch3
              - light.grosses_licht
              - light.xiaomi_gateway
            from: 'off'
            to: 'on'
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " " }}
                {%- if is_state(trigger.entity_id, "on") -%}
                  eingeschaltet.
                {%- else -%}
                  ausgeschaltet.
                {%- endif -%}

      - id: ticker_generator_open_close   # creates messages for doors and windows
        alias: 'ticker_generator_open_close'
        trigger:
          - platform: state
            entity_id:
              - binary_sensor.door_michbaeck
              - binary_sensor.window_michbaeck_1
              - binary_sensor.window_michbaeck_2
              - binary_sensor.window_kueche
              - binary_sensor.window_bad
            from: 'on'
            to: 'off'
          - platform: state
            entity_id:
              - binary_sensor.door_michbaeck
              - binary_sensor.window_michbaeck_1
              - binary_sensor.window_michbaeck_2
              - binary_sensor.window_kueche
              - binary_sensor.window_bad
            from: 'off'
            to: 'on'
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " " }}
                {%- if is_state(trigger.entity_id, "on") -%}
                  geöffnet.
                {%- else -%}
                  geschlossen.
                {%- endif -%}

      - id: ticker_generator_climate    # creates messages for climate devices
        alias: 'ticker_generator_climate'
        trigger:
          - platform: state
            entity_id:
              - climate.michbaeck
              - climate.michbaeck_ac
              - climate.kueche
              - climate.bad
            to: 'heat'
          - platform: state
            entity_id:
              - climate.michbaeck
              - climate.michbaeck_ac
              - climate.kueche
              - climate.bad
            to: 'cool'
          - platform: state
            entity_id:
              - climate.michbaeck
              - climate.michbaeck_ac
              - climate.kueche
              - climate.bad
            to: 'idle'
          - platform: state
            entity_id:
              - climate.michbaeck
              - climate.michbaeck_ac
              - climate.kueche
              - climate.bad
            to: 'off'
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " " }}
                {%- if is_state(trigger.entity_id, "heat") -%}
                  heizt.
                {%- elif is_state(trigger.entity_id, "cool") -%}
                  kühlt.
                {%- elif is_state(trigger.entity_id, "idle") -%}
                  ist aus.
                {%- elif is_state(trigger.entity_id, "off") -%}
                  ist abgeschaltet.
                {%- else -%}
                  ist "{{ states(trigger.entity_id) }}"
                {%- endif -%}

      - id: ticker_drucker_timer    # [debug on]
        alias: ticker_drucker_timer
        trigger:
          - platform: state
            entity_id: sensor.time
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: script.drucker_timer
              state: 'on'
            - condition: template
              value_template: >-
                {{ (states("input_number.drucker_timer")|default(0)|int*60 - (now().timestamp() - as_timestamp(state_attr("script.drucker_timer", "last_triggered")|default(0))|int/60)) is divisibleby(10) }}
        action:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - Schalte Drucker aus in " + (states("input_number.drucker_timer")|int*60 - ((now().timestamp() - state_attr("script.drucker_timer", "last_triggered").timestamp())/60)|int)|string + " Minuten." }}
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{ now()|string + " - Schalte Drucker aus in " + (states("input_number.drucker_timer")|int*60 - ((now().timestamp() - state_attr("script.drucker_timer", "last_triggered").timestamp())/60)|int)|string + " Minuten." }}

      - id: ticker_generator_states   # creates generic messages for state changes
        alias: ticker_generator_states
        trigger:
          - platform: state
            entity_id:
              - variable.climate_michbaeck_state
              - switch.boiler
              - sensor.michbaeck
              - sensor.daily_routine
              - climate.michbaeck
              - climate.kueche
              - climate.bad
              - binary_sensor.climate_kueche_helper
              - binary_sensor.climate_bad_helper
              - binary_sensor.climate_michbaeck_helper
              - binary_sensor.climate_home
              - fan.michbaeck
              - binary_sensor.plant_michbaeck_2_water
        condition:
          condition: template
          value_template: >-
            {{ trigger.from_state.state|default("NA")|string != trigger.to_state.state|default("NA")|string }}
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{ state_attr(trigger.entity_id, "friendly_name")|default(trigger.entity_id) + " hat seinen Status von \"" + trigger.from_state.state|string + "\" zu \"" + trigger.to_state.state|string + "\" geändert." }}
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - " + trigger.entity_id + " (\"" + state_attr(trigger.entity_id, "friendly_name")|default(trigger.entity_id) + "\") hat seinen Status von \"" + trigger.from_state.state|string + "\" zu \"" + trigger.to_state.state|string + "\" geändert." }}

      - id: ticker_generator_presence   # creates messages for presence changes
        alias: ticker_generator_presence
        trigger:
          - platform: state
            entity_id:
              - sensor.michbaeck
              - binary_sensor.johannes
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{ state_attr(trigger.entity_id, "friendly_name") + " ist " }}
                {%- if is_state(trigger.entity_id, "home") -%}
                  zu Hause.
                {%- elif is_state(trigger.entity_id, "not_home") -%}
                  unterwegs.
                {%- else -%}
                  ist bei "{{ states(trigger.entity_id) }}"
                {%- endif -%}

      - id: ticker_generator_time   # creates messages for time every minute
        alias: ticker_generator_time
        trigger:    # every min +10sec
          - platform: time_pattern
            minutes: '/1'
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{- states("sensor.time") -}}

      - id: ticker_generator_date_holiday_weather   # creates messages for date/weather/holidays every 5 minutes
        alias: ticker_generator_date_holiday_weather
        trigger:    # every 5min +30sec
          - platform: time_pattern
            minutes: '/5'
            seconds: 30
        action:
          - delay:
              seconds: 8
          - service: input_text.set_value   # date
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{- states("sensor.date") -}}
          - delay:
              seconds: 8
          - service: input_text.set_value   # holiday + weather 
            data_template:
              entity_id: input_text.ticker
              value: >-
                {%- set weather = states("sensor.wetter_symbol")|int -%}
                {%- if is_state("calendar.feiertage_feiertage", "on") -%}
                  Heute ist {{ state_attr("calendar.feiertage_feiertage", "message") + ". " }}
                {%- endif -%}
                {%- if weather == 1 -%}
                  Die Sonne scheint.
                {%- elif weather == 2 -%}
                  Es ist leicht bewölkt.
                {%- elif weather == 3 -%}
                  Es ist teilweise bewölkt.
                {%- elif weather == 4 -%}
                  Es ist bewölkt.
                {%- elif weather == 5 -%}
                  Es ist wechselhaft mit leichtem Regen.
                {%- elif weather == 6 -%}
                  Es ist wechselhaft mit Gewitter.
                {%- elif weather == 7 -%}
                  Es ist wechselhaft mit Schneeregen.
                {%- elif weather == 8 -%}
                  Es ist wechselhaft mit Schnee.
                {%- elif weather == 9 -%}
                  Es gibt leichten Regen.
                {%- elif weather == 10 -%}
                  Es gibt Regen.
                {%- elif weather == 11 -%}
                  Es gibt Gewitter.
                {%- elif weather == 41 -%}
                  Es ist wechselhaft.
                {%- endif -%}

      - id: ticker_generator_temps    # creates messages for temperature changes
        alias: ticker_generator_temps
        trigger:
          - platform: state
            entity_id: 
              - sensor.temp_michbaeck
              - sensor.temp_aussen
              - sensor.temp_flur
              - sensor.temp_kueche
              - sensor.temp_bad
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                Temperatur
                {%- if trigger.entity_id == "sensor.temp_flur" -%}
                  {{' '}} im Flur
                {%- elif trigger.entity_id == "sensor.temp_michbaeck" -%}
                  {{' '}} im Schlafzimmer
                {%- elif trigger.entity_id == "sensor.temp_aussen" -%}
                  {{' '}} außen
                {%- elif trigger.entity_id == "sensor.temp_kueche" -%}
                  {{' '}} in der Küche
                {%- elif trigger.entity_id == "sensor.temp_bad" -%}
                  {{' '}} im Bad
                {%- elif trigger.entity_id == "sensor.temp_wohnzimmer" -%}
                  {{' '}} im Wohnzimmer
                {%- elif trigger.entity_id == "sensor.temp_schlafzimmer2" -%}
                  {{' '}} in Schlafzimmer2
                {%- else -%}
                  {{' ' + trigger.to_state.name }}
                {%- endif -%}
                {{' '}} beträgt {{ states(trigger.entity_id)|float|round(1) }} °C
          - delay: '00:00:05' #.{{ states("sensor.randomizer_20_29") }}'

      - id: ticker_generator_motion   # creates messages for motion sensors
        alias: ticker_generator_motion
        trigger:
          - platform: state
            entity_id: 
              - binary_sensor.motion_kueche
              - binary_sensor.motion_flur
              - binary_sensor.motion_bad
              #. - binary_sensor.motion_michbaeck_1
              #. - binary_sensor.motion_michbaeck_2
              #. - binary_sensor.motion_wohnzimmer
              #. - binary_sensor.motion_schlafzimmer2
            to: 'on'
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                Bewegung{{' '}}
                {%- if trigger.entity_id == "binary_sensor.motion_flur" -%}
                  im Flur
                {%- elif trigger.entity_id == "binary_sensor.motion_michbaeck_1" or trigger.entity_id == "binary_sensor.motion_michbaeck_2" -%}
                  im Schlafzimmer
                {%- elif trigger.entity_id == "binary_sensor.motion_kueche" -%}
                  in der Küche
                {%- elif trigger.entity_id == "binary_sensor.motion_bad" -%}
                  im Bad
                {%- endif -%}

      - id: ticker_generator_spotify    # creates messages for artist/song playing
        alias: ticker_generator_spotify
        trigger:
          - platform: state
            entity_id: media_player.spotify
        condition:
          condition: template
          value_template: >-
            {{ states("media_player.spotify") not in ["idle", "paused"] }}
        action:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: >-
                {{ "Es läuft \"" + trigger.to_state.attributes.media_title + "\" von \"" + trigger.to_state.attributes.media_artist + "\"" }} 
                {%- if trigger.to_state.attributes.source == "Küche" -%}
                  {{ " in der" }}
                {%- elif trigger.to_state.attributes.source == "Schlafzimmer" -%}
                  {{ " im" }}
                {%- endif -%}
                {{ " " + trigger.to_state.attributes.source }}

      - id: dotmatrixdisplay    # calls script to publish messages to be displayed on dot matrix display
        alias: 'dotmatrixdisplay'
        trigger:
          - platform: state
            entity_id: input_text.ticker
        condition:
          condition: and
          conditions:
            - condition: state
              entity_id: sensor.michbaeck
              state: home
            - condition: state
              entity_id: input_boolean.asleep
              state: 'off'
            - condition: state
              entity_id: script.dotmatrixdisplay
              state: 'off'
        action:
          - wait_template: >-
              {{ is_state("script.dotmatrixdisplay", "off") }}
          - service: script.dotmatrixdisplay
            data_template:
              text: '{{ states("input_text.ticker") }}'
#-----------------------------------------------------------------------------#
#* SCRIPTS                                                                    #

    script:
      dummy:
        sequence:
          - service: variable.set_variable
            data_template:
              variable: dummy
              value: >-
                {{ states("variable.dummy")|int + 1 }}

      testpush:
        sequence:
          - service: notify.iospush   # push snooze/disable commands to iphone
            data:
              title: testpush title
              message: testpush message
              data:
                push:
                  # sound: 'silent.wav'
                  category: testpush

  #---------------------------------------------------------------------------#
  #= SYSTEM

      esp_recovery_http:
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {% set unit = unit|default(states("input_number.esp_unit"))|int %}
                {% if unit|int < 10 %}
                  {% set unit = "0" + unit|string %}
                {% endif %}

                {{ 
                  now()|string + " - script.esp_recovery_http called. 
                  send command 'event,recovery' to 192.168.200.1" + 
                  unit|string 
                }}
          - service: shell_command.curl_esp
            data_template:
              cmd: 'event,recovery'
              ip: >-
                {% set unit = unit|default(states("input_number.esp_unit"))|int %}
                {% if unit|int < 10 %}
                  {% set unit = "0" + unit|string %}
                {% endif %}

                {{ "192.168.200.1" + unit|string }}

      esp_recovery_mqtt:
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {% set unit = unit|default(states("input_number.esp_unit"))|int %}
                {% if unit|int < 10 %}
                  {% set unit = "0" + unit|string %}
                {% endif %}

                {{ 
                  now()|string + " - script.esp_recovery_mqtt called. 
                  send payload 'event,recovery' to topic " + 
                  "esp" + unit|string + "/cmd" 
                }}
          - service: mqtt.publish
            data_template:
              topic: >-
                {% set unit = unit|default(states("input_number.esp_unit"))|int %}
                {% if unit|int < 10 %}
                  {% set unit = "0" + unit|string %}
                {% endif %}

                {{ "esp" + unit|string + "/cmd" }}
              payload: 'event,recovery'

      homeassistant_defaults:
        sequence:
          - service: climate.set_temperature
            data:
              temperature: 20
          - service: climate.set_temperature
            data:
              entity_id: climate.michbaeck_ac
              temperature: 23
          - service: homeassistant.turn_on
            data:
              entity_id:
                - input_boolean.alexa_toggle
                - input_boolean.climate_automatic
                - input_boolean.motion_flur
                - input_boolean.motion_kueche
                - input_boolean.motion_bad
                - input_boolean.light_michbaeck_color
                - input_boolean.wecker_toggle
                - automation.auto_color_flur
                - automation.auto_color_kueche
                - automation.badewasser
                - automation.bed_load_calibration
                - automation.bedtime_actions
                - automation.bedtime_trigger_auto
                - automation.climate_bad
                - automation.climate_home
                - automation.climate_kueche
                - automation.climate_michbaeck
                - automation.climate_michbaeck_ac
                - automation.climate_michbaeck_fan_speed
                - automation.climate_michbaeck_winter_fan
                - automation.door_alarm
                - automation.door_close
                - automation.dotmatrixdisplay
                - automation.homeassistant_cleanup
                - automation.homeassistant_shutdown
                - automation.homeassistant_start
                - automation.leave_home_reminder
                - automation.light_aussen_baseline
                - automation.light_aussen_baseline_decrease
                - automation.light_bad_baseline
                - automation.light_flur_baseline
                - automation.light_kueche_baseline
                - automation.light_michbaeck_1_baseline
                - automation.light_michbaeck_2_baseline
                - automation.light_michbaeck_3_baseline
                - automation.light_michbaeck_4_baseline
                - automation.location_update
                - automation.loetkolben_off
                - automation.michbaeck_arrival_home
                - automation.michbaeck_leaving_home
                - automation.morning_radio_move
                - automation.motion_bad_off
                - automation.motion_bad_on
                - automation.motion_flur_light_off
                - automation.motion_flur_light_on
                - automation.motion_kueche_light_off
                - automation.motion_kueche_light_on
                - automation.motion_michbaeck_1_off
                - automation.plant_1_issue
                - automation.plant_2_issue
                - automation.plant_update
                - automation.plant_water_empty
                - automation.sleep_cycle_calculations
                - automation.solder_light
                - automation.sun_elevation
                - automation.theme_selector
                - automation.ticker_drucker_timer
                - automation.ticker_generator_climate
                - automation.ticker_generator_date_holiday_weather
                - automation.ticker_generator_motion
                - automation.ticker_generator_on_off
                - automation.ticker_generator_open_close
                - automation.ticker_generator_presence
                - automation.ticker_generator_spotify
                - automation.ticker_generator_states
                - automation.ticker_generator_temps
                - automation.ticker_generator_time
                - automation.weather_light
                - automation.wecker_alarm
                - automation.wecker_helper
                - automation.wecker_snooze
                - automation.wecker_snooze_action_1
                - automation.wecker_snooze_action_2
                - automation.wecker_warning
         
         # all default variables
          - service: variable.set_variable
            data:
              variable: climate_bad_save
              value: 19
          - service: variable.set_variable
            data:
              variable: climate_kueche_save
              value: 20
          - service: variable.set_variable
            data:
              variable: climate_michbaeck_save
              value: 20
          - service: variable.set_variable
            data:
              variable: light_baseline_bad
              value: 12
          - service: variable.set_variable
            data:
              variable: light_baseline_flur
              value: 15
          - service: variable.set_variable
            data:
              variable: light_baseline_kueche
              value: 25
          - service: variable.set_variable
            data:
              variable: light_baseline_michbaeck_1
              value: 30
          - service: variable.set_variable
            data:
              variable: light_baseline_michbaeck_2
              value: 1
          - service: variable.set_variable
            data:
              variable: light_baseline_michbaeck_3
              value: 30
          - service: variable.set_variable
            data:
              variable: light_baseline_michbaeck_4
              value: 20
          - service: variable.set_variable
            data:
              variable: light_baseline_aussen
              value: 2000
          - service: variable.set_variable
            data:
              variable: sun_elevation_min
              value: -50
          - service: variable.set_variable
            data:
              variable: sun_elevation_max
              value: 15

         # all default selections
          - service: input_select.select_option
            data:
              entity_id: input_select.daily_routine
              option: freetime_home
          - service: input_select.select_option
            data:
              entity_id: input_select.theme
              option: michbaeck_material
          - service: input_select.select_option
            data:
              entity_id: input_select.michbaeck
              option: home

         # all default numbers
          - service: input_number.set_value
            data:
              entity_id: input_number.light_michbaeck_auto
              value: 70
          - service: input_number.set_value
            data:
              entity_id: input_number.motion_flur_trigger
              value: 15
          - service: input_number.set_value
            data:
              entity_id: input_number.motion_bad_trigger
              value: 10
          - service: input_number.set_value
            data:
              entity_id: input_number.motion_kueche_trigger
              value: 20
          - service: input_number.set_value
            data:
              entity_id: input_number.motion_flur_delay
              value: 2
          - service: input_number.set_value
            data:
              entity_id: input_number.motion_bad_delay
              value: 4
          - service: input_number.set_value
            data:
              entity_id: input_number.motion_kueche_delay
              value: 4
          - service: input_number.set_value
            data:
              entity_id: input_number.climate_away_temp
              value: 12
          - service: input_number.set_value
            data:
              entity_id: input_number.climate_michbaeck_tempdiff
              value: 2
          - service: input_number.set_value
            data:
              entity_id: input_number.bed_load_sensitivity
              value: 100
          - service: input_number.set_value
            data:
              entity_id: input_number.bed_load_raw_min
              value: 400
          - service: input_number.set_value
            data:
              entity_id: input_number.bed_load_raw_max
              value: 800
          - service: input_number.set_value
            data:
              entity_id: input_number.bed_load_ref_weight
              value: 65
          - service: input_number.set_value
            data:
              entity_id: input_number.wecker_fading
              value: 30
          - service: input_number.set_value
            data:
              entity_id: input_number.alexa_volume
              value: 25

         # default alarm time
          - service: input_datetime.set_datetime
            data:
              entity_id: input_datetime.alarm
              time: '06:15:00'
          - service: input_datetime.set_datetime
            data:
              entity_id: input_datetime.leave_home
              time: '07:30:00'
          - service: input_datetime.set_datetime
            data:
              entity_id: 
                - input_datetime.climate_1_start
                - input_datetime.climate_2_start
                - input_datetime.climate_3_start
                - input_datetime.climate_4_start
                - input_datetime.climate_5_start
              time: '06:00:00'
          - service: input_datetime.set_datetime
            data:
              entity_id: 
                - input_datetime.climate_6_start
                - input_datetime.climate_7_start
              time: '10:00:00'

          - service: input_datetime.set_datetime
            data:
              entity_id: 
                - input_datetime.climate_7_end
                - input_datetime.climate_1_end
                - input_datetime.climate_2_end
                - input_datetime.climate_3_end
                - input_datetime.climate_4_end
              time: '23:00:00'


          # - service: input_datetime.set_datetime
          #   data:
          #     entity_id: 
          #       - input_datetime.climate_5_end
          #       - input_datetime.climate_6_end
          #     time: '06:00:00'

         # mark database as valid
          - service: variable.set_variable
            data:
              variable: database_check
              value: 'ok'
  #---------------------------------------------------------------------------#
  #= SLEEP/WAKEUP

      wecker_on_off:    # [todo] calendar Feiertage
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_on_off called. Turning alarm " }}
                {%- if is_state("binary_sensor.alarm_helper", "on") -%}
                  on
                {%- else -%}
                  off
                {%- endif -%}
          - condition: template   # if already set correctly, stop here
            value_template: >-
              {{
                (
                  is_state("binary_sensor.alarm_helper", "on") and 
                  is_state("automation.wecker_fadein", "off")
                )
                or
                (
                  is_state("binary_sensor.alarm_helper", "off") and 
                  is_state("automation.wecker_fadein", "on")
                )
              }}
          - service_template: >-
              {%- if is_state("binary_sensor.alarm_helper", "on") -%}
                automation.turn_on
              {%- else -%}
                automation.turn_off
              {%- endif -%}
            data:
              entity_id: 
                - automation.wecker_fadein
                - automation.set_awake
          - service: notify.iospush
            data_template:
              message: >-
                {%- if is_state("binary_sensor.alarm_helper", "on") -%}
                  Wecker wurde aktiviert.
                {%- else -%}
                  Wecker wurde wegen{{' '}}
                  {%- if is_state("calendar.feiertage_feiertage", "on") -%}
                    Feiertag
                  {%- elif is_state("calendar.arbeit","on") -%}
                    Urlaub
                  {%- elif is_state("binary_sensor.workday_sensor", "off") -%}
                    Wochenende
                  {%- endif -%} 
                  {{' '}}deaktiviert.
                {% endif %}
              title: >-
                {%- if is_state("binary_sensor.alarm_helper", "on") -%}
                  Wecker aktiviert!
                {%- else -%}
                  Wecker deaktiviert!
                {%- endif -%}
              data:
                push:
                  sound: 'silent.wav'
          - service: script.ticker_generator
            data_template:
              text: >-
                {%- if is_state("binary_sensor.alarm_helper", "on") -%}
                  Wecker wurde aktiviert.
                {%- else -%}
                  Wecker wurde wegen{{' '}}
                  {%- if is_state("calendar.feiertage_feiertage", "on") -%}
                    Feiertag
                  {%- elif is_state("calendar.arbeit","on") -%}
                    Urlaub
                  {%- elif is_state("binary_sensor.workday_sensor", "off") -%}
                    Wochenende
                  {%- endif -%} 
                  {{' '}}deaktiviert.
                {% endif %}
          - service: script.alexa_says    # alexa tts text
            data_template:
              text: >-
                {%- if is_state("binary_sensor.alarm_helper", "on") -%}
                  Wecker wurde aktiviert.
                {%- else -%}
                  Wecker wurde wegen{{' '}}
                  {%- if is_state("calendar.feiertage_feiertage", "on") -%}
                    Feiertag
                  {%- elif is_state("calendar.arbeit","on") -%}
                    Urlaub
                  {%- elif is_state("binary_sensor.workday_sensor", "off") -%}
                    Wochenende
                  {%- endif -%} 
                  {{' '}}deaktiviert.
                {% endif %}

      wecker_fadein:    # ()
        sequence:
          - service: notify.homeassistant_debug     # debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_fadein called. update routine, pass EVENT = alarm_fadein" }}
          - service_template: >-
              {% if states("sensor.temp_michbaeck")|float < states("variable.climate_michbaeck_save")|float %}
                cover.close_cover
              {% else %}
                cover.open_cover
              {% endif %}
            data:
              entity_id: cover.window_michbaeck_1
          - service: script.daily_routine   # set condition to suppress some other automations
            data:
              event: alarm_fadein
          - service: notify.homeassistant_debug     # debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_fadein. enable AC" }}
          - service: climate.set_operation_mode   # enable AC
            data:
              entity_id: climate.michbaeck_ac
              operation_mode: cool
          - service: notify.homeassistant_debug     # debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_fadein. turn on light.michbaeck_hue" }}
          - service: light.turn_on    # turn lights on, minimal brightness
            data:
              entity_id: light.michbaeck_hue
              kelvin: 1000
              brightness: 1
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_fadein. increase brightness for " + (states("input_number.wecker_fading")|int)|string + "min"}}
          - service: light.turn_on    # start fade in 
            data_template:
              entity_id: light.michbaeck_hue
              kelvin: 3000
              brightness: 255
              transition: >-
                {{ states("input_number.wecker_fading")|default(30)|int * 60 }}                   
          - delay: '00:{{ states("input_number.wecker_fading")|default(30)|int }}:00'   # delay as long as fade in lasts
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - " }}script.wecker_fadein. 
                  alarm time reached. call script.wecker_alarm
          - service: script.wecker_alarm

      wecker_alarm:   # ()
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - " }}script.wecker_alarm called. 
                  stopping script.wecker_fadein 
                  set max brightness. 
                  turn on radio. 
                  update routine, EVENT = alarm
          - service: cover.set_cover_position   #.open_cover
            data:
              entity_id:
                - cover.window_michbaeck_1_blind
                - cover.window_michbaeck_2_blind
              position: 80
          - service: script.turn_off    # turn off light fading (in case triggered by motion)
            data:
              entity_id: script.wecker_fadein
          - service: script.daily_routine   # change condition to enable other automations
            data:
              event: alarm
          - service: light.turn_on    # full brightness (in case triggered by motion)
            data_template:
              entity_id: light.michbaeck_hue
              kelvin: 3000
              brightness: 255
              transition: 1
          # - service: script.alexa_volume    # set radio default volume
          #   data_template:
          #     device: Schlafzimmer1
          #     volume: 25
          - service: script.alexa_play_content    # start radio

      wecker_snooze:    # ()
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_snooze called. Send push and wait 5 minutes." }}
          - service: notify.iospush   # push snooze/disable commands to iphone
            data:
              title: 'Wecker'
              message: 'Du kannst den Wecker ausschalten oder weiterschlummern'
              data:
                push:
                  sound: 'silent.wav'
                  category: 'wecker_snooze'
          - delay:    # delay causes alarm to trigger 5min after voice
              minutes: 1
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_snooze 5-min-delay passed. start alarm sound and wait 25 seconds." }}
          - service: script.alarm_xiaomi    # shuffled ringtone alarm
            data_template:
              id: '{{ [20,21,22,23,24,25,26,27,28,29,10006]|random }}'
              vol: 8
          - delay:    # wait for ringtone to end
              seconds: 30
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_snooze 25-sec-delay passed. call script.wecker_snooze_loop_1." }}
          - service: script.wecker_snooze_loop_1

      wecker_voice:   # (text)
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_voice called. Got argument TEXT = " + text|default("NA")|string + " - calling script.alexa_says" }}
          - service: script.alexa_says
            data_template:
              text: >-
                {{ text + " "}}

                {#- if is_state("sensor.daily_routine", "alarm") -#}
                  {#
                    [
                      "Gehe durch den Raum, um den Wecker auszuschalten.",
                      "Stehe auf, um den Wecker zu deaktivieren.",
                      "Du kannst den Wecker über dein Handy ausschalten.",
                      "Ich höre auf dich zu nerven, wenn du aufstehst",
                      "Los jetzt, aufstehen!"
                    ]|random
                  #}
                {#- endif -#}
          - condition: state
            entity_id: binary_sensor.door_michbaeck
            state: 'on'
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_voice: Tür michbaeck is open. Calling script.alexa_says_2 in addition." }}
          - service: script.alexa_says_2
            data_template:
              device: Küche
              text: >-
                {{ text }}

      wecker_snooze_loop_1:   # ()
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              title: WECKER
              message: >-
                {{ now()|string + " - script.wecker_snooze_loop_1 - start alarm sound and wait 25 seconds." }}
          - service: notify.iospush
            data:
              title: 'Wecker'
              message: 'Du kannst den Wecker ausschalten oder weiterschlummern'
              data:
                push:
                  sound: 'silent.wav'
                  category: 'wecker_snooze'
          - service: script.alarm_xiaomi
            data_template:
              id: '{{ [20,21,22,23,24,25,26,27,28,29]|random }}'
              vol: 10
          - delay:
              seconds: 30
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_snooze_loop_1 - 25-sec-delay passed. call script.wecker_snooze_loop_2." }}
          - service: script.wecker_snooze_loop_2

      wecker_snooze_loop_2:   # ()
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.wecker_snooze_loop_2 - calling script.wecker_snooze_loop_1." }}
          - delay:
              seconds: 1
          - service: script.wecker_snooze_loop_1

      wakeup:   # ()
        alias: wakeup
        sequence:
          - service: script.turn_off
            data:
              entity_id:
                - script.bedtime_lights
                - script.bedtime_lights_dim
                - script.bedtime_lights_off
                - script.bedtime_lights_loop
          - service: script.daily_routine   # update routine state
            data:
              event: wakeup
          - service: cover.set_cover_position
            data:
              entity_id:
                - cover.window_michbaeck_1_blind
                - cover.window_michbaeck_2_blind
              position: 80
          - service: script.turn_off    # stop alarm, if any
            entity_id:
              - script.wecker_snooze
              - script.wecker_snooze_loop_1
              - script.wecker_snooze_loop_2
          - service: script.alarm_xiaomi_stop
          - service: input_boolean.turn_off   # disable asleep state
            data:
              entity_id: input_boolean.asleep
          - service: script.ticker_generator
            data_template:
              text: Guten Morgen!
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # alexa say 'guten morgen'
            data_template:
              text: >-
                {%- set weather = state_attr("weather.dark_sky", "forecast")[0].condition|string -%}
                {%- if weather == "cloudy" -%}
                  {%- set weather = " bei bewölktem Himmel" -%}
                {%- elif weather == "fog" -%}
                  {%- set weather = " bei Nebel" -%}
                {%- elif weather == "hail" -%}
                  {%- set weather = " bei Hagel" -%}
                {%- elif weather == "lightning" -%}
                  {%- set weather = " bei Gweitter" -%}
                {%- elif weather == "lightning-rainy" -%}
                  {%- set weather = " bei Gewitter und Regen" -%}
                {%- elif weather == "partlycloudy" -%}
                  {%- set weather = " und teilweise bewölkt" -%}
                {%- elif weather == "pouring" -%}
                  {%- set weather = " bei strömendem Regen" -%}
                {%- elif weather == "rainy" -%}
                  {%- set weather = " bei Regen" -%}
                {%- elif weather == "snowy" -%}
                  {%- set weather = " bei Schnee" -%}
                {%- elif weather == "snowy-rainy" -%}
                  {%- set weather = " bei Schnee-Regen" -%}
                {%- elif weather == "sunny" -%}
                  {%- set weather = " und sonnig" -%}
                {%- elif weather == "windy" -%}
                  {%- set weather = " und windig" -%}
                {%- elif weather == "windy-variant" -%}
                  {%- set weather = " und windig" -%}
                {#- elif weather == "exceptional" -#}
                {%- else-%}
                  {%- set weather = "" -%}
                {%- endif -%}
                {{-
                  [
                    "Guten Morgen,",
                    "Herzlichen glückwunsch, du bist aufgestanden,",
                    "Moin Moin,",
                    "Morgen, Michbaeck,",
                    "Einen wunderschönen,"
                  ]|random
                -}}
                {{- " draussen sind es " + states("sensor.temp_aussen")|float|round(0)|string + " Grad," -}}
                {{- " es werden heute noch " + state_attr("weather.dark_sky", "forecast")[0].temperature|float|round(0)|string + " Grad" -}}
                {%- if weather != "" -%}
                  {{ weather }}
                {%- endif -%}
          - condition: state    # if free day, turn on computer and auto-dimmer
            entity_id: binary_sensor.alarm_helper
            state: 'off'
          - service: homeassistant.turn_on    
            data_template:
              entity_id:  
                - switch.computer
                - light.michbaeck_auto

      bedtime_trigger:    # ()
        alias: bedtime_trigger
        sequence:
          - service: notify.iospush
            data:
              title: 'Gute Nacht?'
              message: 'Alle Geräte ausschalten?'
              data:
                push:
                  sound: 'silent.wav'
                  category: 'bedtime_cmd'
          # set condition "true" to enable voice
          - condition: template
            value_template: >-
              {{ false }}
          - service: script.alexa_volume
            data:
              device: Schlafzimmer1
              volume: 25
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # alexa tts text
            data_template:
              text: >-
                {{
                  [
                    "Bitte bestätige auf deinem Handy, ob du das Licht ausschalten willst.",
                    "Bitte auf deinem Handy bestätigen, um das Licht auszuschalten.",
                    "Möchtest du das Licht ausschalten?",
                    "Benutze dein Handy, um das Licht auszuschalten.",
                    "Soll ich das Licht ausmachen?"
                  ]|random
                }}

      bedtime_actions:    # ()
        alias: bedtime_actions
        sequence:
          # - service: variable.set_variable
          #   data:
          #     variable: bedtime
          #     value: 1
          - service: script.daily_routine   # update routine status
            data:
              event: bedtime
          - service: cover.close_cover
            data:
              entity_id:
                - cover.window_michbaeck_1_blind
                - cover.window_michbaeck_2_blind
          - service: script.all_media_off   # stop radio/spotify etc.
          - service: script.alexa_volume    # set alexa volume
            data:
              volume: 25
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # say good night and tomorrow's weather
            data_template:
              text: >-
                {#- "if night, then today's forecast; else tomorrow's" -#}
                {%- if now().hour|int <= 12 -%}
                  {%- set day = 0 -%}
                {%- else -%}
                  {%- set day = 1 -%}
                {%- endif -%}

                {%- set weather = state_attr("weather.dark_sky", "forecast")[day|int].condition|string -%}
                {%- if weather == "cloudy" -%}
                  {%- set weather = " bei bewölktem Himmel" -%}
                {%- elif weather == "fog" -%}
                  {%- set weather = " bei Nebel" -%}
                {%- elif weather == "hail" -%}
                  {%- set weather = " bei Hagel" -%}
                {%- elif weather == "lightning" -%}
                  {%- set weather = " bei Gweitter" -%}
                {%- elif weather == "lightning-rainy" -%}
                  {%- set weather = " bei Gewitter und Regen" -%}
                {%- elif weather == "partlycloudy" -%}
                  {%- set weather = " und teilweise bewölkt" -%}
                {%- elif weather == "pouring" -%}
                  {%- set weather = " bei strömendem Regen" -%}
                {%- elif weather == "rainy" -%}
                  {%- set weather = " bei Regen" -%}
                {%- elif weather == "snowy" -%}
                  {%- set weather = " bei Schnee" -%}
                {%- elif weather == "snowy-rainy" -%}
                  {%- set weather = " bei Schnee-Regen" -%}
                {%- elif weather == "sunny" -%}
                  {%- set weather = " und sonnig" -%}
                {%- elif weather == "windy" -%}
                  {%- set weather = " und windig" -%}
                {%- elif weather == "windy-variant" -%}
                  {%- set weather = " und windig" -%}
                {#- elif weather == "exceptional" -#}
                {%- else-%}
                  {%- set weather = "" -%}
                {%- endif -%}


                {%- if day|int == 0 -%}
                  {{
                    [
                      "Ist mal wieder spät geworden,",
                      "Schlaf gut,",
                      "Bis später,",
                      "Man sieht sich,",
                      "Hau rein,"
                    ]|random 
                  }}
                  {{- " Später " -}}
                {%- else -%}
                  {{
                    [
                      "Gute Nacht,",
                      "Schlaf gut,",
                      "Bis morgen,",
                      "Man sieht sich,",
                      "Hau rein,"
                    ]|random 
                  }}
                  {{- " Morgen " -}}
                {%- endif -%}

                {{- "werden es " + state_attr("weather.dark_sky", "forecast")[day|int].templow|float|round(0)|string + " bis " + state_attr("weather.dark_sky", "forecast")[day|int].temperature|float|round(0)|string + " Grad" -}}
                {%- if weather != "" -%}
                  {{ weather }}
                {%- endif -%}
          - service: script.ticker_generator
            data:
              text: Gute Nacht!
          - service: input_boolean.turn_on                                            # set asleep
            data:
              entity_id: input_boolean.asleep
          - service: script.thermostat_michbaeck_off                                  # turn off thermostat display
          - service: homeassistant.turn_off                                           # static lights off and disable auto-dimmer and switches off
            data:
              entity_id:
                - light.xiaomi_gateway
                - light.michbaeck_auto
                - switch.computer
          - service: script.bedtime_lights
          - service: variable.set_variable
            data:
              variable: start_work
              value: 0
          # - service: light.turn_off                                                   # fade remaining lights to off
          #   data:
          #     entity_id: 
          #       - light.bett
          #       - light.ikea
          #       - light.regal
          #       - light.stehlampe
          #       - light.schreibtisch
          #     transition: 20
          # - delay:                                                                    # just to ensure lights/fan will be turned off
          #     seconds: 21
          # - service: homeassistant.turn_off
          #   data:
          #     entity_id:
          #       - light.bett
          #       - light.ikea
          #       - light.regal
          #       - light.stehlampe
          #       - light.grosses_licht
          #       - light.schreibtisch
          #       - fan.michbaeck

      bedtime_lights:
        sequence:
          - service_template: >-
              {% if 
                state_attr("light.bett", "brightness")|int > 0 or
                state_attr("light.ikea", "brightness")|int > 0 or
                state_attr("light.regal", "brightness")|int > 0 or
                state_attr("light.stehlampe", "brightness")|int > 0 or
                state_attr("light.grosses_licht", "brightness")|int > 0 or
                state_attr("light.schreibtisch", "brightness")|int > 0
              %}
                script.bedtime_lights_dim
              {% else %}
                script.bedtime_lights_off
              {% endif %}

      bedtime_lights_off:
        sequence:
          # - service: variable.set_variable
          #   data:
          #     variable: bedtime
          #     value: 0
          - service: homeassistant.turn_off
            data:
              entity_id:
                - light.bett
                - light.ikea
                - light.regal
                - light.stehlampe
                - light.grosses_licht
                - light.schreibtisch
                - fan.michbaeck

      bedtime_lights_dim:
        sequence:
          - service: light.turn_on
            data_template:
              entity_id:
                - light.bett
                - light.ikea
                - light.regal
                - light.stehlampe
                - light.grosses_licht
                - light.schreibtisch
              brightness: >-
                {{ 
                  ((
                    state_attr("cover.window_michbaeck_1_blind", "current_position")|int + 
                    state_attr("cover.window_michbaeck_2_blind", "current_position")|int
                  ) * 255/200)|int
                }}
              transition: 2
          - delay: '00:00:01'
          - wait_template: >-
              {{ is_state("script.bedtime_lights_loop","off") }}
          - service: script.bedtime_lights_loop

      bedtime_lights_loop:
        sequence:
          # - condition: template
          #   value_template: >-
          #     {{ states("variable.bedtime")|int == 1 }}
          - delay: '00:00:01'
          - wait_template: >-
              {{ is_state("script.bedtime_lights","off") }}
          - service: script.bedtime_lights
  #---------------------------------------------------------------------------#
  #= TRACKING

      daily_routine:    # [debug on]
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - " }}script.daily_routine called. 
                EVENT = {{ event }}. Set state to{{" "}}
                {%- if event == "bedtime" -%}
                  sleep
                {%- elif event == "nightlight" -%}
                  nightwalk
                {%- elif event == "alarm_fadein" -%}
                  alarm_fadein
                {%- elif event == "alarm" -%}
                  alarm
                {%- elif is_state("binary_sensor.alarm_helper", "on") and event == "wakeup" -%}
                  workday_morning
                {%- elif
                  (
                    is_state("binary_sensor.alarm_helper", "off") 
                    and event == "wakeup" 
                  )
                  or event == "arrive_home"
                -%}
                  freetime_home
                {%- elif is_state("sensor.daily_routine", "workday_morning") and event == "leave_home" -%}
                  travel_work
                {%- elif is_state("sensor.daily_routine", "freetime_home") and event == "leave_home" -%}
                  freetime_away
                {%- elif event == "arrive_work" -%}
                  work
                {#- elif is_state("sensor.daily_routine", "work") and event == "leave_work" and is_state_attr("proximity.home", "dir_of_travel", "towards") -#}
                {%- elif event == "leave_work" -%}
                  travel_home
                {%- elif event == "preheat" -%}
                  preheat
                {%- else -%}
                  unknown
                {%- endif -%}
          - service: input_select.select_option 
            data_template:
              entity_id: input_select.daily_routine
              option: >-
                {%- if event == "bedtime" -%}
                  sleep
                {%- elif event == "nightlight" -%}
                  nightwalk
                {%- elif event == "alarm_fadein" -%}
                  alarm_fadein
                {%- elif event == "alarm" -%}
                  alarm
                {%- elif
                  (
                    event == "wakeup" and
                    (
                      is_state("binary_sensor.alarm_helper", "off") or
                      is_state("automation.wecker_fadein", "off")
                    ) 
                  )
                  or event == "arrive_home"
                -%}
                  freetime_home
                {%- elif is_state("binary_sensor.alarm_helper", "on") and event == "wakeup" -%}
                  workday_morning
                {%- elif is_state("sensor.daily_routine", "workday_morning") and event == "leave_home" -%}
                  travel_work
                {%- elif is_state("sensor.daily_routine", "freetime_home") and event == "leave_home" -%}
                  freetime_away
                {%- elif event == "arrive_work" -%}
                  work
                {#- elif is_state("sensor.daily_routine", "work") and event == "leave_work" and is_state_attr("proximity.home", "dir_of_travel", "towards") -#}
                {%- elif event == "leave_work" -%}
                  travel_home
                {%- else -%}
                  unknown
                {%- endif -%}
  #---------------------------------------------------------------------------#
  #= DOOR/WINDOW

  #---------------------------------------------------------------------------#
  #= CLIMATE

      #> climate_generic_on_off:   # () turn heater on/off depending on conditions sensor
        # sequence:
        #   - service_template: >-
        #       {%- if is_state("binary_sensor.climate_home_helper", "on") -%}
        #         switch.turn_on
        #       {%- else -%}
        #         switch.turn_off
        #       {%- endif -%}
        #     data:
        #       entity_id: switch.boiler

      climate_michbaeck_on_off:   #[todo] split on-off  # () turn heater on/off depending on conditions sensor
        sequence:
          - service_template: >-
              {% if is_state("binary_sensor.climate_michbaeck_helper", "on") %}
                automation.turn_on
              {% else %}
                automation.turn_off
              {% endif %}
            data:
              entity_id:
                - automation.climate_michbaeck_ac_temp
                - automation.climate_michbaeck_fan_speed
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + " - script.climate_michbaeck_on_off
                   - checking conditions...
                   - climate.michbaeck is: " + states("climate.michbaeck")|string + "
                   - target temp is: " + state_attr("climate.michbaeck", "temperature")|string + "
                   - helper is: " + states("binary_sensor.climate_michbaeck_helper")|string + "
                   - turning climate.michbaeck mode to: "
                }} 
                {%- if is_state("binary_sensor.climate_michbaeck_helper", "on") -%}
                  heat
                {%- else -%}
                  off
                {%- endif -%}
          - service: variable.set_variable
            data_template:
              variable: climate_michbaeck_save
              value: >-
                {% if is_state("binary_sensor.climate_michbaeck_helper", "off") %}
                  {{ state_attr("climate.michbaeck", "temperature")|float }}
                {% else %}
                  {{ states("variable.climate_michbaeck_save")|float }}
                {% endif %}
          - service: climate.set_temperature
            data_template:
              entity_id: climate.michbaeck
              temperature: >-
                {% if is_state("binary_sensor.climate_michbaeck_helper", "on") %}
                  {{ states("variable.climate_michbaeck_save")|float }}
                {% else %}
                  {{ states("input_number.climate_away_temp")|float }}
                {% endif %}
          # - service: climate.set_operation_mode
            # data_template:
            #   entity_id: climate.michbaeck
            #   operation_mode: >-
            #     {% if is_state("binary_sensor.climate_michbaeck_helper", "on") %}
            #       heat
            #     {% else %}
            #       off
            #     {% endif %}
          - condition: template   # condition disables alexa
            value_template: >-
              {{ false }}
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says
            data_template:
              text: >-
                {% if is_state("binary_sensor.climate_michbaeck_helper", "on") -%}
                  {% set state = "ein." %}
                {%- else -%}
                  {% set state = "aus." %}
                {%- endif -%}

                {{ "Heizung " + state }}

      #. climate_michbaeck_away:   # ()
        # sequence:
        #   #. - service: notify.homeassistant_debug
        #     #. data_template:
        #     #.   message: >-
        #     #.     {{ 
        #     #.       now()|string + " - script.climate_michbaeck_away called -  
        #     #.       - saving temp setting " + state_attr("climate.michbaeck", "temperature")|string + " to input_number.climate_michbaeck_save
        #     #.       - set new temp " + states("input_number.climate_away_temp")|string + " from input_number.climate_away_temp
        #     #.       - turn on input_boolean.climate_michbaeck_away"
        #     #.     }}  
        #   - service: input_number.set_value
        #     data_template:
        #       entity_id: input_number.climate_michbaeck_save
        #       value: >-
        #         {{ state_attr("climate.michbaeck", "temperature")|float }}
        #   #. - service: automation.turn_off
        #     #. data:
        #     #.   entity_id: automation.thermostat_michbaeck_temp_update
        #   - service: climate.set_temperature
        #     data_template:
        #       entity_id: climate.michbaeck
        #       temperature: >-
        #         {{ states("input_number.climate_away_temp")|float }}
        #   - service: input_boolean.turn_on
        #     data:
        #       entity_id: input_boolean.climate_michbaeck_away

      #. climate_michbaeck_home:   # ()
        # sequence:
        #   #. - service: notify.homeassistant_debug
        #     #. data_template:
        #     #.   message: >-
        #     #.     {{ 
        #     #.       now()|string + " - script.climate_michbaeck_home called
        #     #.       - set new temp " + state_attr("climate.michbaeck", "temperature")|string + "
        #     #.       - turn off input_boolean.climate_michbaeck_away"
        #     #.     }}  
        #   #. - service: automation.turn_on
        #     #. data:
        #     #.   entity_id: automation.thermostat_michbaeck_temp_update
        #   - service: climate.set_temperature
        #     data_template:
        #       entity_id: climate.michbaeck
        #       temperature: >-
        #         {{ states("input_number.climate_michbaeck_save")|float }}
        #   - service: input_boolean.turn_off
        #     data:
        #       entity_id: input_boolean.climate_michbaeck_away

      #> climate_michbaeck_ac_on_off:    # () turn fan on/off depending on conditions sensor
        # sequence:
        #   #. - service: notify.homeassistant_debug
        #     #. data_template:
        #     #.   message: >-
        #     #.     {{ now()|string + " - script.climate_michbaeck_ac_on_off called. - Turning fan to: " -}}
        #     #.     {%- if is_state("binary_sensor.climate_michbaeck_ac_helper", "on") -%}
        #     #.       cool
        #     #.     {%- else -%}
        #     #.       off
        #     #.     {%- endif -%}
        #   - service: climate.set_operation_mode
        #     data_template:
        #       entity_id: climate.michbaeck_ac
        #       operation_mode: >-
        #         {% if is_state("binary_sensor.climate_michbaeck_ac_helper", "on") %}
        #           cool
        #         {% else %}
        #           off
        #         {% endif %}
        #   #. - service: notify.homeassistant_debug
        #     #. data_template:
        #     #.   message: >-
        #     #.     {{ now()|string + " - script.climate_michbaeck_ac_on_off - new state is: " + states("climate.michbaeck_ac") }}
                  
      climate_michbaeck_fan_speed:    # ()
        sequence:
          #. - service: notify.homeassistant_debug
            #. data_template:
            #.   message: >-
            #.     {{ now()|string + " - script.climate_michbaeck_fan_speed called - 3-sec-delay, then state check" }}
          - delay:
              seconds: 3
          - condition: state
            entity_id: fan.michbaeck
            state: 'on'
          #. - service: notify.homeassistant_debug
            #. data_template:
            #.   message: >-
            #.     {%- set temp = states("sensor.temp_michbaeck")|float -%}
            #.     {%- set target = state_attr("climate.michbaeck_ac", "temperature")|float -%}
            #.     {{ 
            #.       now()|string + " - script.climate_michbaeck_fan_speed. fan is on.
            #.        - TEMP: " + temp|string + "
            #.        - TARGET: " + target + "
            #.        - set speed to : "
            #.     }}
            #.     {%- if temp - target >= 6 -%}
            #.       {#- high -#}
            #.       medium (high)
            #.     {%- elif temp - target >= 3 -%}
            #.       medium
            #.     {%- else -%}
            #.       low
            #.     {%- endif -%}
          - service: fan.set_speed    # disabled high speed, need to fix wobbling
            data_template:
              entity_id: fan.michbaeck
              speed: >-
                {%- set temp = states("sensor.temp_michbaeck")|float -%}
                {%- set target = state_attr("climate.michbaeck_ac", "temperature")|float -%}
                {%- if temp - target >= 6 -%}
                  {# high #}
                  medium
                {%- elif temp - target >= 3 -%}
                  medium
                {%- else -%}
                  low
                {%- endif -%}

      #> climate_kueche_on_off:    # () turn heater on/off depending on conditions sensor
        # sequence:
        #   - service: climate.set_operation_mode
        #     data_template:
        #       entity_id: climate.kueche
        #       operation_mode: >-
        #         {%- if is_state("binary_sensor.climate_kueche_helper", "on") -%}
        #           heat
        #         {%- else -%}
        #           off
        #         {%- endif -%}

      #> climate_bad_on_off:   # () turn heater on/off depending on conditions sensor
        # sequence:
        #   - service: climate.set_operation_mode
        #     data_template:
        #       entity_id: climate.bad
        #       operation_mode: >-
        #         {%- if is_state("binary_sensor.climate_bad_helper", "on") -%}
        #           heat
        #         {%- else -%}
        #           off
        #         {%- endif -%}
  #---------------------------------------------------------------------------#
  #= LIGHT

      light_animation_test:
        sequence:
          - service: light.turn_on
            data:
              entity_id: light.grosses_licht_3
              brightness: 255
              rgb_color: [255,0,0]
          - service: light.turn_off
            data:
              entity_id: light.grosses_licht_3
          - service: light.turn_on
            data:
              entity_id: light.grosses_licht_2
              brightness: 255
              rgb_color: [255,255,0]
          - service: light.turn_off
            data:
              entity_id: light.grosses_licht_2
          - service: light.turn_on
            data:
              entity_id: light.grosses_licht_1
              brightness: 255
              rgb_color: [255,255,255]
          - service: light.turn_off
            data:
              entity_id: light.grosses_licht_1
          - wait_template: >
              {{ is_state("script.light_animation_test_2", "off") }}
          - service: script.light_animation_looper
            data:
              script: script.light_animation_test_2

      light_animation_test_2:
        sequence:     
          - service: light.turn_on
            data:
              entity_id: light.grosses_licht_3
              brightness: 100
              rgb_color: [255,0,0]
          - service: light.turn_off
            data:
              entity_id: light.grosses_licht_3
          - service: light.turn_on
            data:
              entity_id: light.grosses_licht_2
              brightness: 100
              rgb_color: [255,255,0]
          - service: light.turn_off
            data:
              entity_id: light.grosses_licht_2
          - service: light.turn_on
            data:
              entity_id: light.grosses_licht_1
              brightness: 100
              rgb_color: [255,255,255]
          - service: light.turn_off
            data:
              entity_id: light.grosses_licht_1
          - wait_template: >
              {{ is_state("script.light_animation_test", "off") }}
          - service: script.light_animation_looper
            data:
              script: script.light_animation_test

      light_animation_looper:
        sequence:
          - service_template: >
              {{ script }}

      light_flur_on:
        sequence:
          - condition: template   # condition for automation.homeassistant_shutdown
            value_template: >-
              {{ states("sensor.light_flur")|default(0)|float < states("input_number.motion_flur_trigger")|default(10)|float }}
          - service: light.turn_on    # turn floor lights on, brightness 255
            data_template:
              entity_id: 
                - light.flur_links
                - light.flur_rechts
              brightness: 254
              color_temp: '{{ states("sensor.flux")|default(350)|int }}'
          - delay:
              milliseconds: 200
          - service: light.turn_on    # twice as workaround for sporadic dark light
            data_template:
              entity_id: 
                - light.flur_links
                - light.flur_rechts
              brightness: 254
              color_temp: '{{ states("sensor.flux")|default(350)|int }}'

      light_flur_off:
        sequence:
          - service: light.turn_off
            data_template:
              entity_id: 
                - light.flur_links
                - light.flur_rechts

      light_kueche_on:
        sequence:
          - condition: template   # condition for automation.homeassistant_shutdown
            value_template: >-
              {{ states("sensor.light_kueche")|default(0)|float < states("input_number.motion_kueche_trigger")|default(10)|float }}
          - service: light.turn_on    # turn floor+kitchen lights on, brightness 255
            data_template:
              entity_id: light.esstisch
              brightness: 254
              color_temp: '{{ states("sensor.flux")|default(350)|int }}'
          - delay:
              milliseconds: 200
          - service: light.turn_on    # twice as workaround for sporadic dark light
            data_template:
              entity_id: light.esstisch
              brightness: 254
              color_temp: '{{ states("sensor.flux")|default(350)|int }}'

      light_kueche_off:
        sequence:
          - service: light.turn_off   # turn off lights
            data_template:
              entity_id: light.esstisch

      auto_color_kueche:
        sequence:
          - service: light.turn_on
            data_template:
              entity_id: light.kueche
              transition: 10
              color_temp: '{{ [states("sensor.flux")|int * 1.1, 500]|min|int }}'
     
      light_michbaeck_off:
        sequence:
          - service: light.turn_off
            data:
              entity_id:
                # - light.grosses_licht
                # - light.schreibtisch
                # - light.stehlampe
                # - light.regal
                # - light.bett
                # - light.xiaomi_gateway
                # - light.ikea
                # - light.michbaeck_auto
                - light.michbaeck_all

     #------------------------------------------------------------------------#
     #= michbaeck auto

      light_michbaeck_auto_increase_brightness:   # increase brightness until either match target or limit reached
        sequence:
          - condition: template
            value_template: >-
              {{ is_state("sensor.light_michbaeck_auto", "increase_brightness") }}
          #. - service: automation.turn_on
          #.   data:
          #.     entity_id: automation.auto_color_michbaeck_1
          - service: light.turn_on
            data_template:
              entity_id: >-
                {%- if is_state("switch.loetkolben", "off") -%}
                  light.ikea
                {%- else -%}
                  light.schreibtisch
                {%- endif -%}
              transition: 1
              brightness: >-
                {%- if is_state("switch.loetkolben", "off") -%}
                  {%- set light = "light.ikea" -%}
                {%- else -%}
                  {%- set light = "light.schreibtisch" -%}
                {%- endif -%}

                {{
                  [
                    state_attr(light, "brightness")|int +
                    [
                      [
                        states("sensor.light_michbaeck_1_target")|int - states("sensor.light_michbaeck_1_pct")|int, 
                        30
                      ]|min|int, 
                      5
                    ]|max|int,  
                    255
                  ]|min|int
                }}
          - service_template: >-
              {%- if is_state("switch.loetkolben", "off") -%}
                light.turn_on
              {%- else -%}
                script.dummy
              {%- endif -%}
            data_template:
              entity_id:
                - light.schreibtisch
              transition: 1
              brightness: >-
                {{ [state_attr("light.ikea", "brightness")|int * 1.2, 255]|min|int }}
          - service: light.turn_on
            data_template:
              entity_id:
                - light.stehlampe
                - light.regal
                - light.grosses_licht
              transition: 1
              brightness: >-
                {{ [state_attr("light.schreibtisch", "brightness")|int * 1.2, 255]|min|int }}
          - delay:
              seconds: 1
          - service: script.light_michbaeck_auto_increase_brightness_loop

      light_michbaeck_auto_increase_brightness_loop:    # repeats script above
        sequence:
          - delay:
              seconds: 2
          - service: script.light_michbaeck_auto_increase_brightness

      light_michbaeck_auto_decrease_brightness:   # decrease brightness until either match target or 0 reached
        sequence:
          - condition: template
            value_template: >-
              {{ is_state("sensor.light_michbaeck_auto", "decrease_brightness") }}
          #. - service: automation.turn_on
          #.   data:
          #.     entity_id: automation.auto_color_michbaeck_1
          - service: light.turn_on
            data_template:
              entity_id: >-
                {%- if is_state("switch.loetkolben", "off") -%}
                  light.ikea
                {%- else -%}
                  light.schreibtisch
                {%- endif -%}
              transition: 1
              brightness: >-
                {%- if is_state("switch.loetkolben", "off") -%}
                  {%- set light = "light.ikea" -%}
                {%- else -%}
                  {%- set light = "light.schreibtisch" -%}
                {%- endif -%}

                {{
                  [
                    state_attr(light, "brightness")|int -
                    [
                      [
                        states("sensor.light_michbaeck_1_pct")|int - states("sensor.light_michbaeck_1_target")|int, 
                        30
                      ]|min|int, 
                      5
                    ]|max|int, 
                    0
                  ]|max|int
                }}
          - service_template: >-
              {%- if is_state("switch.loetkolben", "off") -%}
                light.turn_on
              {%- else -%}
                script.dummy
              {%- endif -%}
            data_template:
              entity_id:
                - light.schreibtisch
              transition: 1
              brightness: >-
                {{ [state_attr("light.ikea", "brightness")|int * 1.2, 0]|max|int }}
          - service: light.turn_on
            data_template:
              entity_id:
                - light.stehlampe
                - light.regal
                - light.grosses_licht
              transition: 1
              brightness: >-
                {{ [state_attr("light.schreibtisch", "brightness")|int * 1.2, 0]|max|int }}
          - delay:
              seconds: 1
          - service: script.light_michbaeck_auto_decrease_brightness_loop

      light_michbaeck_auto_decrease_brightness_loop:    # repeats script above
        sequence:
          - delay:
              seconds: 2
          - service: script.light_michbaeck_auto_decrease_brightness

      light_michbaeck_auto_decrease_color:    # decrease color to increase brightness until either match target or limit reached
        sequence:
          - condition: template
            value_template: >-
              {{ is_state("sensor.light_michbaeck_auto", "decrease_color") }}
          #. - service: automation.turn_off
          #.   data:
          #.     entity_id: automation.auto_color_michbaeck_1
          - service: light.turn_on
            data_template:
              entity_id: 
                - light.stehlampe
                - light.regal
                - light.grosses_licht
              color_temp: >-
                {# [state_attr("light.schreibtisch", "color_temp")|int - 5, states("sensor.flux")|int*1.3]|max|int #}
                {# [state_attr("light.schreibtisch", "color_temp")|int - 10, 250]|max|int #}
                {% set current = state_attr("light.stehlampe", "color_temp")|int %}
                {% set low = 250 %}
                {% set high = 500 %}
                {% set maxstep = 10 %}
                {% set step = ([states("sensor.light_michbaeck_1_target")|int - states("sensor.light_michbaeck_1_pct")|int, maxstep]|min)|int %}

                {# current color - step but minimum 250 and maximum 500 #}
                {{ [ (current|int - step|int), low]|max|int }}
          - service: light.turn_on
            data_template:
              entity_id:
                - light.schreibtisch
              color_temp: >-
                {% set current = state_attr("light.stehlampe", "color_temp")|int %}
                {% set low = 350 %}
                {{ [current, low]|max|int }}
          - delay:
              seconds: 1
          - service: script.light_michbaeck_auto_decrease_color_loop

      light_michbaeck_auto_decrease_color_loop:   # repeats script above
        sequence:
          - delay:
              seconds: 2
          - service: script.light_michbaeck_auto_decrease_color

      light_michbaeck_auto_increase_color:    # increase color to decrease brightness until either match target or flux reached
        sequence:
          - condition: template
            value_template: >-
              {{ is_state("sensor.light_michbaeck_auto", "increase_color") }}
          #. - service: automation.turn_off
          #.   data:
          #.     entity_id: automation.auto_color_michbaeck_1
          - service: light.turn_on
            data_template:
              entity_id: 
                - light.stehlampe
                - light.regal
                - light.grosses_licht
              color_temp: >-
                {% set current = state_attr("light.stehlampe", "color_temp")|int %}
                {% set flux = states("sensor.flux")|int %}
                {% set low = 250 %}
                {% set high = flux %}
                {% set maxstep = 10 %}
                {% set step = ([states("sensor.light_michbaeck_1_pct")|int - states("sensor.light_michbaeck_1_target")|int, maxstep]|min)|int %}
                {{ [current|int + step, flux]|min|int }}
          - service: light.turn_on
            data_template:
              entity_id:
                - light.schreibtisch
              color_temp: >-
                {% set flux = states("sensor.flux")|int %}
                {% set current = state_attr("light.stehlampe", "color_temp")|int %}
                {{ [current * 1.2, flux]|min|int }}
          - delay:
              seconds: 1
          - service: script.light_michbaeck_auto_increase_color_loop

      light_michbaeck_auto_increase_color_loop:   # repeats script above
        sequence:
          - delay:
              seconds: 2
          - service: script.light_michbaeck_auto_increase_color

      light_michbaeck_auto_off:   # if 0 reached turn off
        sequence:
          - condition: template
            value_template: >-
              {{ is_state("sensor.light_michbaeck_auto", "off") }}
          #. - service: automation.turn_on
          #.   data:
          #.     entity_id: automation.auto_color_michbaeck_1
          - service: light.turn_off
            data_template:
              entity_id:
                - light.stehlampe
                - light.regal
                - light.schreibtisch
                - light.grosses_licht
          - condition: state
            entity_id: switch.loetkolben
            state: 'off'
          - service: light.turn_off
            data_template:
              entity_id:
                - light.ikea

      light_michbaeck_auto_idle:    # should not be called, but if, it will avoid error
        sequence:
          - service: mqtt.publish
            data:
              topic: /homeassistant/dummy
              payload: dummy

      auto_color_michbaeck_1:
        sequence:
          - condition: state
            entity_id: light.michbaeck_dimmer
            state: 'on'
          - service: light.turn_on
            data_template:
              entity_id: 
                - light.regal
                - light.grosses_licht_1
                - light.stehlampe
              transition: 10
              color_temp: >
                {{ [states("sensor.flux")|int, 500]|min|int }}
          - service: light.turn_on
            data_template:
              entity_id: 
                - light.grosses_licht_2
                - light.schreibtisch
              transition: 8
              color_temp: >
                {{ [states("sensor.flux")|int + 50, 500]|min|int }}
          - service: light.turn_on
            data_template:
              entity_id: 
                - light.grosses_licht_3
              transition: 6
              color_temp: >
                {{ [states("sensor.flux")|int + 100, 500]|min|int }}
  #---------------------------------------------------------------------------#
  #= PLANT

      plant_update:   # (plant)
        sequence:
          - condition: template
            value_template: >-
              {{ is_state(plant, "unknown") }}
          - service: mqtt.publish
            data_template:
              topic: >-
                {% if plant == "sensor.plant_michbaeck_1" %}
                  esp01/cmd
                {% elif plant == "sensor.plant_michbaeck_2" %}
                  esp20/cmd
                {% endif %}
              payload: event,plantrequest

      plant_update_voice:
        sequence:
          - service: script.plant_update
            data:
              plant: sensor.plant_michbaeck_1
          - wait_template: >-
              {{ is_state("script.plant_update", "off") }}
          - service: script.plant_update
            data:
              plant: sensor.plant_michbaeck_2
          - wait_template: >-
              {{ 
                utcnow().timestamp() - states.sensor.plant_michbaeck_1.last_changed.timestamp() < 60 and
                utcnow().timestamp() - states.sensor.plant_michbaeck_1.last_changed.timestamp() > 10 and
                utcnow().timestamp() - states.sensor.plant_michbaeck_2.last_changed.timestamp() < 60 and
                utcnow().timestamp() - states.sensor.plant_michbaeck_2.last_changed.timestamp() > 10 and
                is_state("script.alexa_says", "off")
              }}
                {# and not is_state("sensor.randomizer_0_100", 101) #}
            timeout: '00:01:10'
          - service: script.alexa_says    # alexa tts text
            data_template:
              text: >-
                {%- set plants = ["sensor.plant_michbaeck_1", "sensor.plant_michbaeck_2"] -%}

                {%- for plant in plants -%}
                  {{- " " + state_attr(plant, "friendly_name") -}}

                  {%- if states(plant)|int > 20 -%}
                    {{- " geht es gut, " -}}
                  {%- else -%}
                    {{- " braucht Wasser, " -}}
                  {%- endif -%}

                  {{- "Die Feuchtigkeit beträgt noch " + states(plant)|string + " Prozent." -}}
                {%- endfor -%}

      plant_notify:   # (plant)
        sequence:
          #> - service: notify.iospush
            #> data_template:
            #>   message: >-
            #>     {{ state_attr(plant, "friendly_name") + " braucht Wasser." }}
            #>   title: >-
            #>     Große Pflanze braucht Wasser. Feuchtigkeit beträgt {{ states("sensor.plant_michbaeck_1") }}%
            #>   data:
            #>     push:
            #>       sound: 'door_chime.wav'
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # alexa tts text
            data_template:
              text: >-
                {{ state_attr(plant, "friendly_name") + " braucht Wasser, Feuchtigkeit beträgt nur noch " + states(plant) + " %" }}
          - service: script.ticker_generator
            data_template:
              text: >-
                {{ state_attr(plant, "friendly_name") + " braucht Wasser, Feuchtigkeit beträgt nur noch " + states(plant) + " %" }}
  #---------------------------------------------------------------------------#
  #= ALERTS

      door_alarm:   # () xiaomi alarm + ios push
        sequence:
          - service: notify.iospush
            data:
              title: 'Tür Alarm'
              message: 'Jemand betritt dein Zimmer!'
              data:
                push:
                  sound: 'house-alarm.wav'
                  category: 'door_alarm'

      door_alarm_stop:    # () stop alarm + ios push
        sequence:
          - service: service.alarm_xiaomi_stop
          - service: notify.iospush
            data:
              title: 'Tür Alarm'
              message: 'Tür wurde wieder geschlossen oder der Alarm deaktiviert'
              data:
                push:
                  sound: 'door_chime.wav'

      alarm_xiaomi:   # (id, vol) xiaomi alarm, id = ringtone-id
        sequence:
            # 10001 = hail
            # 10002 = light rain (silent)
            # 10003 = heavy rain
            # 10004 = sunny/birds
            # 10005 = wind
            # 10006 = screaming sun
            # 10007 = thunder
            # 10008 = thunder 2
            # 10009 = 
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + " - script.ALARM_XIAOMI called. got arguments 
                  - ID = " + id|default(10006)|string + "
                  - VOL = " + vol|default(10)|string 
                }}
          - service: xiaomi_aqara.play_ringtone
            data_template:
              gw_mac: 7811DCE136B6
              ringtone_id: '{{ id|default(10006) }}'
              ringtone_vol: '{{ vol|default(10) }}'

      alarm_xiaomi_stop:    # () stop xiaomi alarm
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ now()|string + " - script.ALARM_XIAOMI_STOP called." }}
          - service: xiaomi_aqara.stop_ringtone
            data:
              gw_mac: 7811DCE136B6
  #---------------------------------------------------------------------------#
  #= MISC HELPERS

      badewasser:   # ()
        sequence:
          - service: notify.iospush
            data_template:
              title: 'Water Sensor'
              message: 'Badewasser eingelassen.'
              data:
                push:
                  sound: 'door_chime.wav'
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says    # alexa tts text
            data_template:
              # device: Schlafzimmer
              # entity_id: automation.badewasser
              text: Badewanne ist voll.
          - wait_template: >-
              {{ is_state("script.alexa_says_2", "off") }}
          - service: script.alexa_says_2    # alexa tts text
            data_template:
              device: Küche
              # entity_id: automation.badewasser
              text: Badewanne ist voll.

      loetkolben_off:   # ()
        sequence:
          - service: script.alexa_says    # alexa tts text
            data_template:
              # device: Schlafzimmer
              # entity_id: script.loetkolben_off
              text: Lötkolben ausgeschaltet.
          - service: script.ticker_generator
            data_template:
              text: Schalte Lötkolben aus.
          - service: switch.turn_off
            data:
              entity_id: switch.loetkolben

      drucker_timer:
        sequence:
          - condition: state
            entity_id: switch.drucker
            state: 'on'
          - delay: '{{ states("input_number.drucker_timer")|int }}:00:00'
          - service: switch.turn_off
            data:
              entity_id: switch.drucker

      thermostat_michbaeck_off:   # turn display off
        sequence:    
          - service: shell_command.curl_esp
            data:
              cmd: 'lcdcmd,off'
              ip: '192.168.200.104'          
  #---------------------------------------------------------------------------#
  #= MEDIA

      alexa_summary:
        sequence:
          - condition: template
            value_template: >-
                {% set x %}
                  {% for state in states.persistent_notification -%}
                    {%- if loop.last -%}
                      {{- state.attributes.message -}}.
                    {%- else -%}
                      {{- state.attributes.message + ", " -}}
                    {%- endif -%}
                  {% else %}
                    false
                  {%- endfor %}
                {% endset %}

                {{ x != false }}
          - wait_template: >-
              {{ is_state("script.alexa_says", "off") }}
          - service: script.alexa_says
            data_template:
              text: >-
                {% set x %}
                  {% for state in states.persistent_notification -%}
                    {%- if loop.last -%}
                      {{- state.attributes.message -}}.
                    {%- else -%}
                      {{- state.attributes.message + ", " -}}
                    {%- endif -%}
                  {% else %}
                    {% set x = false %}
                  {%- endfor %}
                {% endset %}

                {% if x != false %}
                  {{ 
                    [
                      ["Dies","Das","Folgendes"]|random + " ist passiert während du weg warst, ", 
                      "Ich habe " + ["folgende","diese",""]|random + " Neuigkeiten für dich, "
                    ]|random + x 
                  }}
                {% else %}
                  {{
                    [
                      "Ich habe keine Neuigkeiten für dich.", 
                      "Es ist nichts aufregendes passiert während du weg warst."
                    ]|random 
                  }}
                {% endif %}

      alexa_volume:   # (device, volume)
        alias: Alexa Volume
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + " - script.alexa_volume called - executing shell_command.alexa_volume with arguments:
                  - DEVICE = " + device|default(states("input_select.alexa_device")|default("Schlafzimmer1"))|string + "
                  - VOLUME = " + volume|default(states("input_number.alexa_volume")|default(25))|string 
                }}
          # - service: shell_command.alexa_volume
          #   data_template:
          #     device: >-
          #       {{ device|default(states("input_select.alexa_device")|default("Schlafzimmer1")) }}
          #     volume: >-
          #       {{ volume|default(states("input_number.alexa_volume")|default(25)) }}
          - service: media_player.volume_set
            data_template:
              entity_id: >-
                {% if device|default("Schlafzimmer1") == "Schlafzimmer1" %}
                  media_player.schlafzimmer1
                {% elif device == "Schlafzimmer2" %}
                  media_player.schlafzimmer2
                {% elif device == "Küche" %}
                  media_player.kuche
                {% elif device == "Flur" %}
                  media_player.flur
                {% elif device == "Überall" %}
                  media_player.uberall
                {% elif device == "Stereopaar" %}
                  media_player.stereopaar
                {% endif %}
              volume_level: >-
                {{ volume|default(states("input_number.alexa_volume")|default(25))|int/100 }}

      alexa_play_content:
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {{ 
                  now()|string + " - script.alexa_play (\"" + state_attr("script.alexa_play", "friendly_name") + "\") 
                  called with arguments DEVICE = " + 
                  device|default(states("input_select.alexa_device")|default("Schlafzimmer1"))|string + 
                  ", CONTENT = " + 
                  content|default(states("input_select.alexa_content")|default("WDR FÜNF"))|string 
                }}                  
          # - service: shell_command.alexa_content
          #   data_template:
          #     device: >-
          #       {{ device|default(states("input_select.alexa_device")|default("Stereopaar")) }}
          #     content: >-
          #       {{ content|default(states("input_select.alexa_content")|default("WDR FÜNF")) }}
          - service: media_player.play_media
            data_template:
              entity_id: >-
                {% if device|default("Schlafzimmer1") == "Schlafzimmer1" %}
                  media_player.schlafzimmer1
                {% elif device == "Schlafzimmer2" %}
                  media_player.schlafzimmer2
                {% elif device == "Küche" %}
                  media_player.kuche
                {% elif device == "Flur" %}
                  media_player.flur
                {% elif device == "Überall" %}
                  media_player.uberall
                {% elif device == "Stereopaar" %}
                  media_player.stereopaar
                {% endif %}
              media_content_id: >-
                {{ content|default(states("input_select.alexa_content")|default("WDR FÜNF")) }}
              media_content_type: >-
                {{ content_provider|default(states("input_select.alexa_content_provider")|default("TUNEIN")) }}

      alexa_play:
        sequence:
          - service: media_player.media_play
            data_template:
              entity_id: >-
                {% if device|default("Schlafzimmer1") == "Schlafzimmer1" %}
                  media_player.schlafzimmer1
                {% elif device == "Schlafzimmer2" %}
                  media_player.schlafzimmer2
                {% elif device == "Küche" %}
                  media_player.kuche
                {% elif device == "Flur" %}
                  media_player.flur
                {% elif device == "Überall" %}
                  media_player.uberall
                {% elif device == "stereopaar" %}
                  media_player.stereopaar
                {% endif %}

      alexa_play_pause:
        sequence:
          - service: media_player.media_play_pause
            data_template:
              entity_id: >-
                {% if device|default("Schlafzimmer1") == "Schlafzimmer1" %}
                  media_player.schlafzimmer1
                {% elif device == "Schlafzimmer2" %}
                  media_player.schlafzimmer2
                {% elif device == "Küche" %}
                  media_player.kuche
                {% elif device == "Flur" %}
                  media_player.flur
                {% elif device == "Überall" %}
                  media_player.uberall
                {% elif device == "Stereopaar" %}
                  media_player.stereopaar
                {% endif %}

      alexa_pause:
        sequence:
          # - service: shell_command.alexa_pause
          #   data_template:
          #     device: >-
          #       {{ device|default("Stereopaar") }}
          - service: media_player.media_pause
            data:
              entity_id:
                - media_player.schlafzimmer1
                - media_player.flur
                - media_player.schlafzimmer2
                - media_player.spare
                - media_player.stereopaar
                - media_player.uberall
                - media_player.kuche
            # data_template:
            #   entity_id: >-
            #     {% if device|default("Stereopaar") == "Stereopaar" %}
            #       media_player.alexa_stereopaar
            #     {% elif device == "Schlafzimmer2" %}
            #       media_player.alexa_schlafzimmer2
            #     {% elif device == "Küche" %}
            #       media_player.alexa_kueche
            #     {% elif device == "Flur" %}
            #       media_player.alexa_flur
            #     {% elif device == "Überall" %}
            #       media_player.alexa_ueberall
            #     {% elif device == "Schlafzimmer1" %}
            #       media_player.alexa_schlafzimmer1
            #     {% endif %}

      alexa_says:   # (device, text) let Alexa speak
        alias: alexa_says
        sequence:
          - condition: and    # only when home, awake and enabled
            conditions:
              - condition: state
                entity_id: sensor.michbaeck
                state: 'home'
              - condition: state
                entity_id: input_boolean.alexa_toggle
                state: 'on'
              - condition: state
                entity_id: variable.alexa_state
                state: 'on'
              - condition: or
                conditions:
                  - condition: state
                    entity_id: sensor.daily_routine
                    state: alarm
                  - condition: state
                    entity_id: input_boolean.asleep
                    state: 'off'
          # - service: shell_command.alexa_tts    # alexa tts text
          #   data_template:
          #     device: '{{ device|default("Schlafzimmer1") }}'
          #     text: '{{ text|replace("%", " Prozent") }}'
          - service: media_player.alexa_tts
            data_template:
              entity_id: >-
                {% if device|default("Schlafzimmer1") == "Schlafzimmer1" %}
                  media_player.schlafzimmer1
                {% elif device == "Schlafzimmer2" %}
                  media_player.schlafzimmer2
                {% elif device == "Küche" %}
                  media_player.kuche
                {% elif device == "Flur" %}
                  media_player.flur
                {% elif device == "Überall" %}
                  media_player.uberall
                {% elif device == "Stereopaar" %}
                  media_player.stereopaar
                {% endif %}
              message: >-
                {{ text|replace("%", " Prozent") }}
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {% if (text|list|count/6)|round(0) < 10 %}
                  {% set x = 0 %}
                {% endif %}

                {{ 
                  now()|string + " - script.alexa_says called.
                  - DEVICE = " + device|default("Schlafzimmer1") + "
                  - BLOCK = 00:00:" + x|string + (text|list|count/8)|round(0)|string + "
                  - cmd = sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d " + device|default("Schlafzimmer1") + " -e speak:'" + text|replace("%", " Prozent") + "'"
                }}
          - delay: '00:00:{% if (text|list|count/8)|round(0) < 10 %}0{% endif %}{{ [(text|list|count/8)|round(0),59]|min }}'

      alexa_says_2:   # (device, text) can be used in addition for other alexa device
        alias: alexa_says_2
        sequence:
          - condition: and    # only when home, awake and enabled
            conditions:
              - condition: state
                entity_id: sensor.michbaeck
                state: 'home'
              - condition: or
                conditions:
                  - condition: state
                    entity_id: sensor.daily_routine
                    state: alarm
                  - condition: state
                    entity_id: input_boolean.asleep
                    state: 'off'
              - condition: state
                entity_id: input_boolean.alexa_toggle
                state: 'on'
              - condition: state
                entity_id: variable.alexa_state
                state: 'on'
          # - service: shell_command.alexa_tts    # alexa tts text
          #   data_template:
          #     device: '{{ device }}'
          #     text: '{{ text|replace("%", " Prozent") }}'
          - service: media_player.alexa_tts
            data_template:
              entity_id: >-
                {% if device|default("Schlafzimmer1") == "Schlafzimmer1" %}
                  media_player.schlafzimmer1
                {% elif device == "Schlafzimmer2" %}
                  media_player.schlafzimmer2
                {% elif device == "Küche" %}
                  media_player.kuche
                {% elif device == "Flur" %}
                  media_player.flur
                {% elif device == "Überall" %}
                  media_player.uberall
                {% elif device == "Stereopaar" %}
                  media_player.stereopaar
                {% endif %}
              message: >-
                {{ text|replace("%", " Prozent") }}
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {% if (text|list|count/6)|round(0) < 10 %}
                  {% set x = 0 %}
                {% endif %}

                {{ 
                  now()|string + " - script.alexa_says_2 called.
                  - DEVICE = " + device|default("Schlafzimmer2") + "
                  - BLOCK = 00:00:" + x|string + (text|list|count/8)|round(0)|string + "
                  - cmd = sh /home/homeassistant/.homeassistant/alexa-remote/alexa_remote_control.sh -d " + device|default("Schlafzimmer1") + " -e speak:'" + text|replace("%", " Prozent") + "'"
                }}
          - delay: '00:00:{% if (text|list|count/8)|round(0) < 10 %}0{% endif %}{{ [(text|list|count/8)|round(0),59]|min }}'

      all_media_off:
        sequence:
          - service: media_player.media_pause
            data:
              entity_id:
                - media_player.flur
                - media_player.schlafzimmer1
                - media_player.schlafzimmer2
                - media_player.spare
                - media_player.stereopaar
                - media_player.ueberall
                - media_player.kuche
                - media_player.spotify

      alexa_say:    # (device, text)
        sequence:
          # - service: script.alexa_says
          #   data_template:
          #     device: >-
          #       {{ states("input_select.alexa_device")|default("Schlafzimmer1") }}
          #     text: >-
          #       {{ states("input_text.alexa_say")|default("test") }}
          - service: media_player.alexa_tts
            data_template:
              entity_id: >-
                {% set device = states("input_select.alexa_device")|default("Schlafzimmer1") %}

                {% if device|default("Schlafzimmer1") == "Schlafzimmer1" %}
                  media_player.schlafzimmer1
                {% elif device == "Schlafzimmer2" %}
                  media_player.schlafzimmer2
                {% elif device == "Küche" %}
                  media_player.kuche
                {% elif device == "Flur" %}
                  media_player.flur
                {% elif device == "Überall" %}
                  media_player.uberall
                {% elif device == "Stereopaar" %}
                  media_player.stereopaar
                {% endif %}
              message: >-
                {{ states("input_text.alexa_say")|default("test") }}

      spotify_play_pause:   # ()
        sequence:
          - service: media_player.media_play_pause
            data:
              entity_id: media_player.spotify

      spotify_next_track:   # ()
        sequence:
          - service: media_player.media_next_track
            data:
              entity_id: media_player.spotify

      spotify_previous_track:   # ()
        sequence:
          - service: media_player.media_previous_track
            data:
              entity_id: media_player.spotify

      spotify_next_source:    # ()
        sequence: 
          - service: input_select.select_next
            data:
              entity_id: input_select.spotify_source
          - service: media_player.select_source
            data_template:
              entity_id: media_player.spotify
              source: >-
                {{ states("input_select.spotify_source")|default("Stereopaaar") }}

      spotify_previous_source:    # ()
        sequence: 
          - service: input_select.select_previous
            data:
              entity_id: input_select.spotify_source
          - service: media_player.select_source
            data_template:
              entity_id: media_player.spotify
              source: >-
                {{ states("input_select.spotify_source")|default("Stereopaaar") }}
 
      spotify_shuffle_toggle:   # ()
        sequence:
          - service: media_player.shuffle_set
            data_template:
              entity_id: media_player.spotify
              shuffle: >-
                {%- if is_state_attr("media_player.spotify", "shuffle", false) -%}
                  true
                {%- elif is_state_attr("media_player.spotify", "shuffle", true) -%}
                  false
                {%- endif -%}
  #---------------------------------------------------------------------------#
  #= WEATHER

      hue_from_temp:    # (light) applies formular to match hue scale to temp
        sequence:
          - service: light.turn_on
            data_template:
              entity_id: >-
                {{ light|default("light.xiaomi_gateway") }}
              hs_color: ['{% set temp = states("sensor.temp_aussen")|default(40)|float -%} {% set hue = [(-48/11*temp + 1680/11)|int, 0]|max %} {{- hue|int -}}', 100]
              brightness: 255
              #. brightness: '{{ [[(states("sensor.light_michbaeck_1_pct")|int*255/100)|int,0]|max,255]|min }}'
  #---------------------------------------------------------------------------#
  #= CONTROLLER
  
    #---------------------------------------------------------------------------#
    #= CUBE
    
      cube_message: #[OK]   # show message what mode and room cube is set to
        sequence:    
          - service: persistent_notification.dismiss
            data_template:
              notification_id: Cube
          - service: persistent_notification.create
            data_template:
              notification_id: Cube
              title: Cube
              message: >-
                {{ "Mode: " + states("input_select.cube_mode") + ", Room: " + states("input_select.cube_room") }}
          - service: script.ticker_generator
            data_template:
              text: >-
                {{ "Mode: " + states("input_select.cube_mode") + ", Room: " + states("input_select.cube_room") }}

      cube_tap_twice: #[OK]   # change mode [dimmer,climate,media]
        sequence:
          - service: input_select.select_next
            data:
              entity_id: input_select.cube_mode
          - service: script.cube_message
          - service: script.alexa_says
            data_template:
              # device: Schlafzimmer1
              text: >-
                {{ "Modus " + states("input_select.cube_mode") }}
          
      cube_flip180: #[OK]   # switch between rooms
        sequence:
          - service: input_select.select_next
            data:
              entity_id: input_select.cube_room
          - service: script.cube_message
          - service: script.alexa_says
            data_template:
              # device: Schlafzimmer
              text: >-
                {{ "Raum " + states("input_select.cube_room") }}

     ### move actions
      cube_move:
        sequence:
          - service_template: >-
              {{- "script.cube_move_" + states("input_select.cube_mode")|lower -}}
            data_template:
              value: >-
                {{ value }}

      cube_move_dimmer:   # (value)
        sequence:
          - service: script.dummy

      cube_move_heizung:    # (value)
        sequence:
          - service: script.dummy

      cube_move_spotify:    # (value)
        sequence:
          - service: media_player.media_next_track
            data:
              entity_id: media_player.spotify

     ### rotate actions
      cube_rotate: #[OK]    # (value) call rotate script depending on selected mode
        sequence:
          - service_template: >-
              {{- "script.cube_rotate_" + states("input_select.cube_mode")|lower -}}
            data_template:
              value: >-
                {{ value }}

      cube_rotate_dimmer: #[OK]   # [debug on] 
        sequence:
          - service: notify.homeassistant_debug
            data_template:
              message: >-
                {%- if is_state("input_select.cube_room", "michbaeck") -%}
                  {% set light = "light.michbaeck_auto" %}
                {%- else -%}
                  {% set light = "light." + states("input_select.cube_room") %}
                {%- endif -%}
                {%- if is_state("input_select.cube_room", "michbaeck") -%}
                  {% set bright = [[state_attr("light.michbaeck_auto", "brightness")|int + value|int*2,255]|min,0]|max %}
                {%- else -%}
                  {% set bright = [[state_attr("light." + states("input_select.cube_room"), "brightness")|int + value|int*2,255]|min,0]|max %}
                {%- endif -%}

                {{ 
                  now()|string + " - script.cube_rotate_dimmer triggered
                   - turning light on
                   - ENTITY_ID = " + light|string + "
                   - BRIGHTNESS = " + bright|string
                }}
          - service: light.turn_on
            data_template:
              entity_id: >-
                {%- if is_state("input_select.cube_room", "michbaeck") -%}
                  light.michbaeck_auto
                {%- else -%}
                  {{ "light." + states("input_select.cube_room") }}
                {%- endif -%}
              brightness: >-
                {%- if is_state("input_select.cube_room", "michbaeck") -%}
                  {{ [[state_attr("light.michbaeck_auto", "brightness")|int + value|int*2,255]|min,0]|max }}
                {%- else -%}
                  {{ [[state_attr("light." + states("input_select.cube_room"), "brightness")|int + value|int*2,255]|min,0]|max }}
                {%- endif -%}
          - delay:
              milliseconds: 500
          - service: script.ticker_generator
            data_template:
              text: >-
                {%- if is_state("input_select.cube_room", "michbaeck") -%}
                  {{ "Dimme auf " + [[((state_attr("light.michbaeck_auto", "brightness")|int + value|int*2)*100/255)|int,100]|min,0]|max|string + "%" }}
                {%- else -%}
                  {{ "Dimme auf " + [[((state_attr("light." + states("input_select.cube_room"), "brightness")|int + value|int*2)*100/255)|int,100]|min,0]|max|string + "%"  }}
                {%- endif -%}
          - service: script.alexa_says
            data_template:
              # device: Schlafzimmer
              text: >-
                {%- if is_state("input_select.cube_room", "michbaeck") -%}
                  {{ "Dimme auf " + [[((state_attr("light.michbaeck_auto", "brightness")|int + value|int*2)*100/255)|int,100]|min,0]|max|string + " Prozent" }}
                {%- else -%}
                  {{ "Dimme auf " + [[((state_attr("light." + states("input_select.cube_room"), "brightness")|int + value|int*2)*100/255)|int,100]|min,0]|max|string + " Prozent"  }}
                {%- endif -%}

      cube_rotate_spotify: #[OK]
        sequence:
          # - service_template: >-
          #     {%- if value|float > 0 -%}
          #       media_player.volume_up
          #     {%- elif value|float < 0 -%}
          #       media_player.volume_down
          #     {%- endif -%}
          - service: media_player.volume_set
            data_template:
              entity_id: media_player.spotify
              volume_level: >-
                {{ ([[state_attr("media_player.spotify", "volume_level")|float + value|float/100, 0]|max, 1]|min)|float|round(2) }}
          - service: script.alexa_says
            data_template:
              # device: Schlafzimmer
              text: >-
                {%- if value|float > 0 -%}
                  lauter
                {%- elif value|float < 0 -%}
                  leiser
                {%- endif -%}

      cube_rotate_heizung: #[ISSUE]
        sequence:
          - service: climate.set_temperature
            data_template:
              entity_id: >-
                {{ "climate." + states("input_select.cube_room") }}
              temperature: >-
                {{ (state_attr("climate." + states("input_select.cube_room"), "temperature")|float + (value/10)|float|round(0))|float }}
              operation_mode: heat
          - service: script.alexa_says
            data_template:
              # device: Schlafzimmer
              text: >-
                {{ (state_attr("climate." + states("input_select.cube_room"), "temperature")|float + (value/10)|float|round(0))|string + " Grad eingestellt." }}
          - service: script.ticker_generator
            data_template:
              text: >-
                {{ "Stelle Heizung auf: " + (state_attr("climate." + states("input_select.cube_room"), "temperature")|float + (value/10)|float|round(0))|string + "°C" }}
          - condition: state
            entity_id: input_select.cube_room
            state: michbaeck
          - service: climate.set_temperature
            data_template:
              entity_id: climate.michbaeck_ac
              temperature: >-
                {{ state_attr("climate.michbaeck", "temperature")|float + 2 }}

     ### flip actions
      cube_flip90:    # () call flip script depending on selected mode
        sequence:
          - service_template: >-
              {{- "script.cube_flip90_" + states("input_select.cube_mode")|lower -}}

      cube_flip90_dimmer:   # ()
        sequence:
          - service: script.dummy

      cube_flip90_heizung:    # ()
        sequence:
          - service_template: >-
              {%- if is_state("climate." + states("input_select.cube_room"), "off") -%}
                climate.turn_on
              {%- else -%}
                climate.turn_off
              {%- endif -%}
            data_template:
              entity_id: >-
                {{ "climate." + states("input_select.cube_room") }}

      cube_flip90_spotify:    # ()
        sequence:
          - service: media_player.media_play_pause
            data:
              entity_id: media_player.spotify

     ### shake actions
      cube_shake_air:
        sequence:
          - service_template: >-
              {{- "script.cube_shake_air_" + states("input_select.cube_mode")|lower -}}
            data_template:
              value: >-
                {{ value }}

      cube_shake_air_dimmer:    # (value)
        sequence:
          - service: script.dummy

      cube_shake_air_heizung:   # (value)
        sequence:
          - service: script.dummy

      cube_shake_air_spotify:   # (value)
        sequence:
          - service: script.dummy

      cube_alert:
        sequence:
          - service: script.dummy
          # - service: persistent_notification.dismiss
          #   data_template:
          #     notification_id: 'cube_script'
          # - service: persistent_notification.create
          #   data_template:
          #     notification_id: 'cube_script'
          #     title: >-
          #       'cube_script'
          #     message: >-
          #       {{"script.cube_alert: " + value|string }}

      cube_swing:
        sequence:
          - service: persistent_notification.dismiss
            data_template:
              notification_id: 'cube_script'
          - service: persistent_notification.create
            data_template:
              notification_id: 'cube_script'
              title: >-
                'cube_script'
              message: >-
                {{"script.cube_swing: " + value|string }}

      cube_free_fall:
        sequence:
          - service: persistent_notification.dismiss
            data_template:
              notification_id: 'cube_script'
          - service: persistent_notification.create
            data_template:
              notification_id: 'cube_script'
              title: >-
                'cube_script'
              message: >-
                {{"script.cube_free_fall: " + value|string }}
  #---------------------------------------------------------------------------#
  #= TICKER

      ticker_generator:   # (text) text will be used for oled, matrixled, etc.
        sequence:
          - service: input_text.set_value                                                    
            data_template:
              entity_id: input_text.ticker
              value: '{{ text }}'

      dotmatrixdisplay:   # (text) formats text, defines animation and speed suitable for dotmatrixled
        # Effects:
          #  0 scroll left to right
          #  1 scroll right to left (default for longer messages)
          #  2 scroll bottom to top
          #  3 scroll top to bottom
          #  4 center to outer      ←|345|→
          #  5 outer to center   12|→     ←|89
          #  6 left to right     1234|→
          #  7 up|down|up|down slices
          #  8 fade in (speed 40-80)
          #  9 no effect
          # 10 lamellen 1|2|3|4|5|6|7|
          # 11 running on-column left-right, then pop in
          # 12 pop in, running off-column left-right (does not turn off, until next)
          # 13 running on-row, then pop in
          # 14 pop in, running off-row top-down (does not turn off, until next)
          # 15 column by column (speed 0-5)
          # 16 fast flicker
          # 17 like 6 w/o pipe
          # 18 like 4 w/o pipe
          # 19 like 5 w/o pipe
          # 20 scroll bottom-right to top-left
          # 21 scroll bottom-left to top-right
          # 22 scroll top-right to bottom-left
          # 23 scroll top-left to bottom-right
          # 24 grow from bottom
          # 25 grow from top
        # Luminance:
          #  0 darkest
          # 15 brightest
        # Speed:
          #    0 fastest
          # 100+ slowest
        # Position:
          # 0 left
          # 1 center
          # 2 right
        sequence:
          - service: input_number.set_value
            data_template:
              entity_id: input_number.ticker_fx
              value: >-
                {%- if text|regex_search("^\d\d:\d\d") -%}
                  {{ [12,14]|random }}
                {%- elif (text|list|count)|int <= 15 -%}
                  {{ [4,5,6,7,8,9,10,11,13,15,16,24,25]|random }}
                {%- else -%}
                  1
                {%- endif -%}
          - service: mqtt.publish
            data_template:
              topic: homeassistant/display/dotmatrixdisplay
              payload_template: >-
                {%- if (text|list|count)|int <= 15 -%}
                  {%- set short = true -%}
                {%- else -%}
                  {%- set short = false -%}
                {%- endif -%}
                {# JSON: #}
                {
                 "text": "{{ text|default('')|replace('\"','\'') }}",
                 "priorite": 1,
                 "lum": {{ [states("sensor.light_michbaeck_1_pct")|default(50)|int * 15/100,1]|max|int }},
                 "pos": 1,
                 "eff_in": {{ states("input_number.ticker_fx")|default(1)|int }},
                 "eff_out": {{ states("input_number.ticker_fx")|default(1)|int }},
                 "speed": "{% if states("input_number.ticker_fx")|default(1)|int == 15 %}2{%- elif states("input_number.ticker_fx")|default(1)|int == 8 %}50{% else %}17{% endif %}",
                 "pause": {% if short %}3000{% else %}0{% endif %}
                }
          - delay: '00:00:{% if (text|list|count/8)|round(0) < 10 %}0{% endif %}{{ [(text|list|count/8)|round(0),59]|min }}'
#-----------------------------------------------------------------------------#  